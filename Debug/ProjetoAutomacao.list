
ProjetoAutomacao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001958  0800cd08  0800cd08  0000dd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e660  0800e660  00010224  2**0
                  CONTENTS
  4 .ARM          00000008  0800e660  0800e660  0000f660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e668  0800e668  00010224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e668  0800e668  0000f668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e66c  0800e66c  0000f66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800e670  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000224  0800e894  00010224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800e894  00010988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161d2  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003854  00000000  00000000  00026426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00029c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f15  00000000  00000000  0002b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026af5  00000000  00000000  0002bf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b42d  00000000  00000000  00052a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e723c  00000000  00000000  0006de57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000668c  00000000  00000000  001550d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015b764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000224 	.word	0x20000224
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ccec 	.word	0x0800ccec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000228 	.word	0x20000228
 800020c:	0800ccec 	.word	0x0800ccec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC1_Init+0x98>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <MX_ADC1_Init+0x9c>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_ADC1_Init+0x98>)
 80010de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_ADC1_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_ADC1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_ADC1_Init+0x98>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <MX_ADC1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <MX_ADC1_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_ADC1_Init+0x98>)
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <MX_ADC1_Init+0xa0>)
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_ADC1_Init+0x98>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_ADC1_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_ADC1_Init+0x98>)
 8001126:	f002 fad9 	bl	80036dc <HAL_ADC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001130:	f000 fbfa 	bl	8001928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_ADC1_Init+0x98>)
 8001146:	f002 fbdf 	bl	8003908 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001150:	f000 fbea 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000240 	.word	0x20000240
 8001160:	40012000 	.word	0x40012000
 8001164:	0f000001 	.word	0x0f000001

08001168 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	@ 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_ADC_MspInit+0x7c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d127      	bne.n	80011da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 8001194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_ADC_MspInit+0x80>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <HAL_ADC_MspInit+0x84>)
 80011d6:	f002 fed7 	bl	8003f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40012000 	.word	0x40012000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000

080011f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	4b35      	ldr	r3, [pc, #212]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a34      	ldr	r2, [pc, #208]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a2d      	ldr	r2, [pc, #180]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a1f      	ldr	r2, [pc, #124]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_GPIO_Init+0xf0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_VERDE_Pin|TRIGER_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2160      	movs	r1, #96	@ 0x60
 800127a:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 800127c:	f003 f818 	bl	80042b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOTAO1_Pin BOTAO2_Pin */
  GPIO_InitStruct.Pin = BOTAO1_Pin|BOTAO2_Pin;
 8001280:	2312      	movs	r3, #18
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001284:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128a:	2301      	movs	r3, #1
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 8001296:	f002 fe77 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERDE_Pin TRIGER_Pin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin|TRIGER_Pin;
 800129a:	2360      	movs	r3, #96	@ 0x60
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <MX_GPIO_Init+0xf4>)
 80012b2:	f002 fe69 	bl	8003f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2007      	movs	r0, #7
 80012bc:	f002 fe2d 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012c0:	2007      	movs	r0, #7
 80012c2:	f002 fe46 	bl	8003f52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2100      	movs	r1, #0
 80012ca:	200a      	movs	r0, #10
 80012cc:	f002 fe25 	bl	8003f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012d0:	200a      	movs	r0, #10
 80012d2:	f002 fe3e 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3728      	adds	r7, #40	@ 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012ee:	4a13      	ldr	r2, [pc, #76]	@ (800133c <MX_I2C1_Init+0x54>)
 80012f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012f4:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x58>)
 80012f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_I2C1_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_I2C1_Init+0x50>)
 8001326:	f003 f80f 	bl	8004348 <HAL_I2C_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001330:	f000 fafa 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000288 	.word	0x20000288
 800133c:	40005400 	.word	0x40005400
 8001340:	00061a80 	.word	0x00061a80

08001344 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_I2C_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12c      	bne.n	80013c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_I2C_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_I2C_MspInit+0x88>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_I2C_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001388:	2312      	movs	r3, #18
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001394:	2304      	movs	r3, #4
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <HAL_I2C_MspInit+0x8c>)
 80013a0:	f002 fdf2 	bl	8003f88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_I2C_MspInit+0x88>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_I2C_MspInit+0x88>)
 80013ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_I2C_MspInit+0x88>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020400 	.word	0x40020400

080013d4 <get_total_racao>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int get_total_racao() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	return (int)(((15.0 - Distance) / 15.0) * 100);
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <get_total_racao+0x54>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8c1 	bl	8000564 <__aeabi_i2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	f04f 0000 	mov.w	r0, #0
 80013ea:	4910      	ldr	r1, [pc, #64]	@ (800142c <get_total_racao+0x58>)
 80013ec:	f7fe ff6c 	bl	80002c8 <__aeabi_dsub>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <get_total_racao+0x58>)
 80013fe:	f7ff fa45 	bl	800088c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <get_total_racao+0x5c>)
 8001410:	f7ff f912 	bl	8000638 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fbbc 	bl	8000b98 <__aeabi_d2iz>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	2000032d 	.word	0x2000032d
 800142c:	402e0000 	.word	0x402e0000
 8001430:	40590000 	.word	0x40590000

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143a:	f002 f8b9 	bl	80035b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143e:	f000 f889 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001442:	f7ff fed5 	bl	80011f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001446:	f7ff fe3d 	bl	80010c4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800144a:	f7ff ff4d 	bl	80012e8 <MX_I2C1_Init>
  MX_RTC_Init();
 800144e:	f000 fa71 	bl	8001934 <MX_RTC_Init>
  MX_TIM1_Init();
 8001452:	f000 fd29 	bl	8001ea8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001456:	f000 fdc7 	bl	8001fe8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800145a:	f000 fe3b 	bl	80020d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800145e:	f001 fe65 	bl	800312c <ssd1306_Init>
  bmp280_init_default_params(&bmp280.params);
 8001462:	482e      	ldr	r0, [pc, #184]	@ (800151c <main+0xe8>)
 8001464:	f001 f803 	bl	800246e <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <main+0xec>)
 800146a:	2276      	movs	r2, #118	@ 0x76
 800146c:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <main+0xec>)
 8001470:	4a2c      	ldr	r2, [pc, #176]	@ (8001524 <main+0xf0>)
 8001472:	629a      	str	r2, [r3, #40]	@ 0x28
  bmp280_init(&bmp280, &bmp280.params);
 8001474:	4929      	ldr	r1, [pc, #164]	@ (800151c <main+0xe8>)
 8001476:	482a      	ldr	r0, [pc, #168]	@ (8001520 <main+0xec>)
 8001478:	f001 f973 	bl	8002762 <bmp280_init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800147c:	2100      	movs	r1, #0
 800147e:	482a      	ldr	r0, [pc, #168]	@ (8001528 <main+0xf4>)
 8001480:	f005 fd34 	bl	8006eec <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001484:	2104      	movs	r1, #4
 8001486:	4829      	ldr	r0, [pc, #164]	@ (800152c <main+0xf8>)
 8001488:	f005 fec2 	bl	8007210 <HAL_TIM_IC_Start_IT>
  HAL_ADC_Start(&hadc1);
 800148c:	4828      	ldr	r0, [pc, #160]	@ (8001530 <main+0xfc>)
 800148e:	f002 f969 	bl	8003764 <HAL_ADC_Start>

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x2345)
 8001492:	2101      	movs	r1, #1
 8001494:	4827      	ldr	r0, [pc, #156]	@ (8001534 <main+0x100>)
 8001496:	f005 fc5f 	bl	8006d58 <HAL_RTCEx_BKUPRead>
 800149a:	4603      	mov	r3, r0
 800149c:	f242 3245 	movw	r2, #9029	@ 0x2345
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00a      	beq.n	80014ba <main+0x86>
	{
	  set_time(15, 54, 00);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2136      	movs	r1, #54	@ 0x36
 80014a8:	200f      	movs	r0, #15
 80014aa:	f000 fb41 	bl	8001b30 <set_time>
	  set_date(24, 8, 11, 7);
 80014ae:	2307      	movs	r3, #7
 80014b0:	220b      	movs	r2, #11
 80014b2:	2108      	movs	r1, #8
 80014b4:	2018      	movs	r0, #24
 80014b6:	f000 fb69 	bl	8001b8c <set_date>
	}
	set_alarm(15, 54, 20, 11);
 80014ba:	230b      	movs	r3, #11
 80014bc:	2214      	movs	r2, #20
 80014be:	2136      	movs	r1, #54	@ 0x36
 80014c0:	200f      	movs	r0, #15
 80014c2:	f000 faf5 	bl	8001ab0 <set_alarm>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  bmp280_read_float(&bmp280, &temp, &pres, &humdt);
 80014c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <main+0x104>)
 80014c8:	4a1c      	ldr	r2, [pc, #112]	@ (800153c <main+0x108>)
 80014ca:	491d      	ldr	r1, [pc, #116]	@ (8001540 <main+0x10c>)
 80014cc:	4814      	ldr	r0, [pc, #80]	@ (8001520 <main+0xec>)
 80014ce:	f001 fd3d 	bl	8002f4c <bmp280_read_float>
	  HCSR04_Read();
 80014d2:	f001 fda1 	bl	8003018 <HCSR04_Read>
	  int total_racao = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]

	  menu(&total_racao);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 f8a7 	bl	8001630 <menu>

	  if (feed) {
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <main+0x110>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0ed      	beq.n	80014c6 <main+0x92>
		  ComportaOnOff();
 80014ea:	f001 fdcd 	bl	8003088 <ComportaOnOff>
		  HAL_Delay(60);
 80014ee:	203c      	movs	r0, #60	@ 0x3c
 80014f0:	f002 f8d0 	bl	8003694 <HAL_Delay>
		  if (get_total_racao() < 15){
 80014f4:	f7ff ff6e 	bl	80013d4 <get_total_racao>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b0e      	cmp	r3, #14
 80014fc:	dc05      	bgt.n	800150a <main+0xd6>
			  PlayTone(tom, dura, NULL, 10);
 80014fe:	230a      	movs	r3, #10
 8001500:	2200      	movs	r2, #0
 8001502:	4911      	ldr	r1, [pc, #68]	@ (8001548 <main+0x114>)
 8001504:	4811      	ldr	r0, [pc, #68]	@ (800154c <main+0x118>)
 8001506:	f001 fd6d 	bl	8002fe4 <PlayTone>
		  }
		  HAL_GPIO_TogglePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin);
 800150a:	2120      	movs	r1, #32
 800150c:	4810      	ldr	r0, [pc, #64]	@ (8001550 <main+0x11c>)
 800150e:	f002 fee8 	bl	80042e2 <HAL_GPIO_TogglePin>

		  feed = 0;
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <main+0x110>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  while (1){
 8001518:	e7d5      	b.n	80014c6 <main+0x92>
 800151a:	bf00      	nop
 800151c:	20000308 	.word	0x20000308
 8001520:	200002dc 	.word	0x200002dc
 8001524:	20000288 	.word	0x20000288
 8001528:	20000358 	.word	0x20000358
 800152c:	200003e8 	.word	0x200003e8
 8001530:	20000240 	.word	0x20000240
 8001534:	20000334 	.word	0x20000334
 8001538:	20000318 	.word	0x20000318
 800153c:	20000314 	.word	0x20000314
 8001540:	20000310 	.word	0x20000310
 8001544:	20000330 	.word	0x20000330
 8001548:	20000028 	.word	0x20000028
 800154c:	20000000 	.word	0x20000000
 8001550:	40020000 	.word	0x40020000

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	@ 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2234      	movs	r2, #52	@ 0x34
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f008 f805 	bl	8009572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0308 	add.w	r3, r7, #8
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b2a      	ldr	r3, [pc, #168]	@ (8001628 <SystemClock_Config+0xd4>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <SystemClock_Config+0xd4>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	@ 0x40
 8001588:	4b27      	ldr	r3, [pc, #156]	@ (8001628 <SystemClock_Config+0xd4>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001594:	2300      	movs	r3, #0
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <SystemClock_Config+0xd8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015a0:	4a22      	ldr	r2, [pc, #136]	@ (800162c <SystemClock_Config+0xd8>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <SystemClock_Config+0xd8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80015b4:	2305      	movs	r3, #5
 80015b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80015d0:	235a      	movs	r3, #90	@ 0x5a
 80015d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015dc:	2302      	movs	r3, #2
 80015de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 fd33 	bl	8006050 <HAL_RCC_OscConfig>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80015f0:	f000 f99a 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f4:	230f      	movs	r3, #15
 80015f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f8:	2302      	movs	r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2102      	movs	r1, #2
 8001610:	4618      	mov	r0, r3
 8001612:	f003 febd 	bl	8005390 <HAL_RCC_ClockConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800161c:	f000 f984 	bl	8001928 <Error_Handler>
  }
}
 8001620:	bf00      	nop
 8001622:	3750      	adds	r7, #80	@ 0x50
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <menu>:
//void EXTI1_IRQHandler(void)
//{
//    HAL_GPIO_EXTI_IRQHandler(BOTAO1_Pin); // Chama o callback registrado
//}

void menu(int* total_racao) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	switch(contador){
 8001638:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <menu+0x128>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d063      	beq.n	8001708 <menu+0xd8>
 8001640:	2b02      	cmp	r3, #2
 8001642:	dc77      	bgt.n	8001734 <menu+0x104>
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <menu+0x1e>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d050      	beq.n	80016ee <menu+0xbe>
 800164c:	e072      	b.n	8001734 <menu+0x104>
			  case 0:{
				  oled_print(temp,  "Temperatura: %d C", 0, 0);
 800164e:	4b43      	ldr	r3, [pc, #268]	@ (800175c <menu+0x12c>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001658:	2300      	movs	r3, #0
 800165a:	2200      	movs	r2, #0
 800165c:	4940      	ldr	r1, [pc, #256]	@ (8001760 <menu+0x130>)
 800165e:	ee17 0a90 	vmov	r0, s15
 8001662:	f001 ff75 	bl	8003550 <oled_print>
				  oled_print(pres,  "Pressao: %d Pa", 0, 14);
 8001666:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <menu+0x134>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001670:	230e      	movs	r3, #14
 8001672:	2200      	movs	r2, #0
 8001674:	493c      	ldr	r1, [pc, #240]	@ (8001768 <menu+0x138>)
 8001676:	ee17 0a90 	vmov	r0, s15
 800167a:	f001 ff69 	bl	8003550 <oled_print>

				  if (Distance > 15) {
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <menu+0x13c>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	d903      	bls.n	800168e <menu+0x5e>
					  *total_racao = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e026      	b.n	80016dc <menu+0xac>
				  }
				  else {
					  *total_racao = (int)(((15.0 - Distance) / 15.0) * 100);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <menu+0x13c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff66 	bl	8000564 <__aeabi_i2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	4933      	ldr	r1, [pc, #204]	@ (8001770 <menu+0x140>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001770 <menu+0x140>)
 80016b4:	f7ff f8ea 	bl	800088c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <menu+0x144>)
 80016c6:	f7fe ffb7 	bl	8000638 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fa61 	bl	8000b98 <__aeabi_d2iz>
 80016d6:	4602      	mov	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
				  }

				  oled_print(*total_racao, "Racao: %d \%", 0, 26);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	231a      	movs	r3, #26
 80016e4:	2200      	movs	r2, #0
 80016e6:	4924      	ldr	r1, [pc, #144]	@ (8001778 <menu+0x148>)
 80016e8:	f001 ff32 	bl	8003550 <oled_print>
				  break;
 80016ec:	e02f      	b.n	800174e <menu+0x11e>

			  }
			  case 1:{
				  oled_print(temp,  "Temperatura: %d C", 0, 0);
 80016ee:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <menu+0x12c>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f8:	2300      	movs	r3, #0
 80016fa:	2200      	movs	r2, #0
 80016fc:	4918      	ldr	r1, [pc, #96]	@ (8001760 <menu+0x130>)
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f001 ff25 	bl	8003550 <oled_print>
				  break;
 8001706:	e022      	b.n	800174e <menu+0x11e>
			  }
			  case 2:{
				  if (Distance > 15) {
 8001708:	4b18      	ldr	r3, [pc, #96]	@ (800176c <menu+0x13c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d903      	bls.n	8001718 <menu+0xe8>
					  *total_racao = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e004      	b.n	8001722 <menu+0xf2>
				  }
				  else {
					  *total_racao = get_total_racao();
 8001718:	f7ff fe5c 	bl	80013d4 <get_total_racao>
 800171c:	4602      	mov	r2, r0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
				  }

				  oled_print(*total_racao, "Racao: %d \%", 0, 0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	2300      	movs	r3, #0
 800172a:	2200      	movs	r2, #0
 800172c:	4912      	ldr	r1, [pc, #72]	@ (8001778 <menu+0x148>)
 800172e:	f001 ff0f 	bl	8003550 <oled_print>
				  break;
 8001732:	e00c      	b.n	800174e <menu+0x11e>

			  }
			  default:{
				  // Pressao
				  oled_print(pres,  "Pressao: %d Pa", 0, 0);
 8001734:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <menu+0x134>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800173e:	2300      	movs	r3, #0
 8001740:	2200      	movs	r2, #0
 8001742:	4909      	ldr	r1, [pc, #36]	@ (8001768 <menu+0x138>)
 8001744:	ee17 0a90 	vmov	r0, s15
 8001748:	f001 ff02 	bl	8003550 <oled_print>
				  break;
 800174c:	bf00      	nop

			  }
		  }
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000031c 	.word	0x2000031c
 800175c:	20000310 	.word	0x20000310
 8001760:	0800cd08 	.word	0x0800cd08
 8001764:	20000314 	.word	0x20000314
 8001768:	0800cd1c 	.word	0x0800cd1c
 800176c:	2000032d 	.word	0x2000032d
 8001770:	402e0000 	.word	0x402e0000
 8001774:	40590000 	.word	0x40590000
 8001778:	0800cd2c 	.word	0x0800cd2c

0800177c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1)
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d102      	bne.n	8001792 <HAL_GPIO_EXTI_Callback+0x16>
	{
		feed = 1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <HAL_GPIO_EXTI_Callback+0x44>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_4)
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d10e      	bne.n	80017b6 <HAL_GPIO_EXTI_Callback+0x3a>
	{
		clean();
 8001798:	f001 fec6 	bl	8003528 <clean>
		if (contador > 3)
 800179c:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x48>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	dd03      	ble.n	80017ac <HAL_GPIO_EXTI_Callback+0x30>
			contador = 0;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x48>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
		else
			contador++;
	}
}
 80017aa:	e004      	b.n	80017b6 <HAL_GPIO_EXTI_Callback+0x3a>
			contador++;
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x48>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_GPIO_EXTI_Callback+0x48>)
 80017b4:	6013      	str	r3, [r2, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000330 	.word	0x20000330
 80017c4:	2000031c 	.word	0x2000031c

080017c8 <HAL_RTC_AlarmAEventCallback>:




void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	feed = 1;
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
  //verifica o nivel
  // apita se necessario
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000330 	.word	0x20000330

080017e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7f1b      	ldrb	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	f040 8083 	bne.w	8001900 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured == 0) // if the first value is not captured
 80017fa:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x128>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d11a      	bne.n	8001838 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8001802:	2104      	movs	r1, #4
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f006 f941 	bl	8007a8c <HAL_TIM_ReadCapturedValue>
 800180a:	4603      	mov	r3, r0
 800180c:	4a41      	ldr	r2, [pc, #260]	@ (8001914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800180e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001810:	4b3f      	ldr	r3, [pc, #252]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001824:	621a      	str	r2, [r3, #32]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
		}
	}
}
 8001836:	e063      	b.n	8001900 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured == 1)   // if the first is already captured
 8001838:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x128>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d15f      	bne.n	8001900 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 8001840:	2104      	movs	r1, #4
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f006 f922 	bl	8007a8c <HAL_TIM_ReadCapturedValue>
 8001848:	4603      	mov	r3, r0
 800184a:	4a33      	ldr	r2, [pc, #204]	@ (8001918 <HAL_TIM_IC_CaptureCallback+0x130>)
 800184c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d907      	bls.n	8001872 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4a2b      	ldr	r2, [pc, #172]	@ (800191c <HAL_TIM_IC_CaptureCallback+0x134>)
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e00f      	b.n	8001892 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d909      	bls.n	8001892 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800188c:	33ff      	adds	r3, #255	@ 0xff
 800188e:	4a23      	ldr	r2, [pc, #140]	@ (800191c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001890:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <HAL_TIM_IC_CaptureCallback+0x134>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe54 	bl	8000544 <__aeabi_ui2d>
 800189c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001908 <HAL_TIM_IC_CaptureCallback+0x120>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fec9 	bl	8000638 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018b6:	f7fe ffe9 	bl	800088c <__aeabi_ddiv>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f991 	bl	8000be8 <__aeabi_d2uiz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_TIM_IC_CaptureCallback+0x138>)
 80018cc:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_TIM_IC_CaptureCallback+0x128>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a1a      	ldr	r2, [r3, #32]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80018e2:	621a      	str	r2, [r3, #32]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a12      	ldr	r2, [r2, #32]
 80018ee:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	60da      	str	r2, [r3, #12]
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	b020c49c 	.word	0xb020c49c
 800190c:	3fa16872 	.word	0x3fa16872
 8001910:	2000032c 	.word	0x2000032c
 8001914:	20000320 	.word	0x20000320
 8001918:	20000324 	.word	0x20000324
 800191c:	20000328 	.word	0x20000328
 8001920:	2000032d 	.word	0x2000032d
 8001924:	200003e8 	.word	0x200003e8

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <Error_Handler+0x8>

08001934 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b090      	sub	sp, #64	@ 0x40
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800193a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2228      	movs	r2, #40	@ 0x28
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f007 fe0c 	bl	8009572 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800195a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a44 <MX_RTC_Init+0x110>)
 800195c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a48 <MX_RTC_Init+0x114>)
 800195e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001960:	4b38      	ldr	r3, [pc, #224]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001966:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001968:	227f      	movs	r2, #127	@ 0x7f
 800196a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <MX_RTC_Init+0x110>)
 800196e:	22ff      	movs	r2, #255	@ 0xff
 8001970:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001978:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <MX_RTC_Init+0x110>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001984:	482f      	ldr	r0, [pc, #188]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001986:	f004 fe01 	bl	800658c <HAL_RTC_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001990:	f7ff ffca 	bl	8001928 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 8001994:	2313      	movs	r3, #19
 8001996:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 40;
 800199a:	2328      	movs	r3, #40	@ 0x28
 800199c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80019ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b2:	2200      	movs	r2, #0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <MX_RTC_Init+0x110>)
 80019b8:	f004 fe6b 	bl	8006692 <HAL_RTC_SetTime>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80019c2:	f7ff ffb1 	bl	8001928 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80019c6:	2303      	movs	r3, #3
 80019c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 80019cc:	2312      	movs	r3, #18
 80019ce:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 18;
 80019d2:	2312      	movs	r3, #18
 80019d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e2:	2200      	movs	r2, #0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4817      	ldr	r0, [pc, #92]	@ (8001a44 <MX_RTC_Init+0x110>)
 80019e8:	f004 feed 	bl	80067c6 <HAL_RTC_SetDate>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80019f2:	f7ff ff99 	bl	8001928 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_RTC_Init+0x110>)
 8001a2e:	f004 ff4f 	bl	80068d0 <HAL_RTC_SetAlarm_IT>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001a38:	f7ff ff76 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	3740      	adds	r7, #64	@ 0x40
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000334 	.word	0x20000334
 8001a48:	40002800 	.word	0x40002800

08001a4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b09a      	sub	sp, #104	@ 0x68
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	225c      	movs	r2, #92	@ 0x5c
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 fd88 	bl	8009572 <memset>
  if(rtcHandle->Instance==RTC)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <HAL_RTC_MspInit+0x5c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d119      	bne.n	8001aa0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a76:	f107 030c 	add.w	r3, r7, #12
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fd8e 	bl	800559c <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a86:	f7ff ff4f 	bl	8001928 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_RTC_MspInit+0x60>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2029      	movs	r0, #41	@ 0x29
 8001a96:	f002 fa40 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a9a:	2029      	movs	r0, #41	@ 0x29
 8001a9c:	f002 fa59 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3768      	adds	r7, #104	@ 0x68
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40002800 	.word	0x40002800
 8001aac:	42470e3c 	.word	0x42470e3c

08001ab0 <set_alarm>:
}

/* USER CODE BEGIN 1 */

void set_alarm (uint8_t hr, uint8_t min, uint8_t sec, uint8_t date)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b08d      	sub	sp, #52	@ 0x34
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71bb      	strb	r3, [r7, #6]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	717b      	strb	r3, [r7, #5]
 8001aca:	4613      	mov	r3, r2
 8001acc:	713b      	strb	r3, [r7, #4]
	RTC_AlarmTypeDef sAlarm = {0};
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	2228      	movs	r2, #40	@ 0x28
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f007 fd4b 	bl	8009572 <memset>
	sAlarm.AlarmTime.Hours = hr;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	723b      	strb	r3, [r7, #8]
	sAlarm.AlarmTime.Minutes = min;
 8001ae0:	79bb      	ldrb	r3, [r7, #6]
 8001ae2:	727b      	strb	r3, [r7, #9]
	sAlarm.AlarmTime.Seconds = sec;
 8001ae4:	797b      	ldrb	r3, [r7, #5]
 8001ae6:	72bb      	strb	r3, [r7, #10]
	sAlarm.AlarmTime.SubSeconds = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = date;
 8001b00:	793b      	ldrb	r3, [r7, #4]
 8001b02:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 8001b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001b0c:	f107 0308 	add.w	r3, r7, #8
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <set_alarm+0x7c>)
 8001b16:	f004 fedb 	bl	80068d0 <HAL_RTC_SetAlarm_IT>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <set_alarm+0x74>
	{
		Error_Handler();
 8001b20:	f7ff ff02 	bl	8001928 <Error_Handler>
	}
}
 8001b24:	bf00      	nop
 8001b26:	3734      	adds	r7, #52	@ 0x34
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd90      	pop	{r4, r7, pc}
 8001b2c:	20000334 	.word	0x20000334

08001b30 <set_time>:
  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
}

void set_time (uint8_t hr, uint8_t min, uint8_t sec)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	71bb      	strb	r3, [r7, #6]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef sTime = {0};
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
	sTime.Hours = hr;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = min;
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = sec;
 8001b5a:	797b      	ldrb	r3, [r7, #5]
 8001b5c:	73bb      	strb	r3, [r7, #14]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <set_time+0x58>)
 8001b70:	f004 fd8f 	bl	8006692 <HAL_RTC_SetTime>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <set_time+0x4e>
	{
		Error_Handler();
 8001b7a:	f7ff fed5 	bl	8001928 <Error_Handler>
	}
}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000334 	.word	0x20000334

08001b8c <set_date>:

void set_date (uint8_t year, uint8_t month, uint8_t date, uint8_t day)  // monday = 1
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71bb      	strb	r3, [r7, #6]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	717b      	strb	r3, [r7, #5]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef sDate = {0};
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
	sDate.WeekDay = day;
 8001bae:	793b      	ldrb	r3, [r7, #4]
 8001bb0:	733b      	strb	r3, [r7, #12]
	sDate.Month = month;
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	737b      	strb	r3, [r7, #13]
	sDate.Date = date;
 8001bb6:	797b      	ldrb	r3, [r7, #5]
 8001bb8:	73bb      	strb	r3, [r7, #14]
	sDate.Year = year;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	73fb      	strb	r3, [r7, #15]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4809      	ldr	r0, [pc, #36]	@ (8001bec <set_date+0x60>)
 8001bc8:	f004 fdfd 	bl	80067c6 <HAL_RTC_SetDate>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <set_date+0x4a>
	{
		Error_Handler();
 8001bd2:	f7ff fea9 	bl	8001928 <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x2345);  // backup register
 8001bd6:	f242 3245 	movw	r2, #9029	@ 0x2345
 8001bda:	2101      	movs	r1, #1
 8001bdc:	4803      	ldr	r0, [pc, #12]	@ (8001bec <set_date+0x60>)
 8001bde:	f005 f8a1 	bl	8006d24 <HAL_RTCEx_BKUPWrite>
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000334 	.word	0x20000334

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c2e:	2007      	movs	r0, #7
 8001c30:	f002 f968 	bl	8003f04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <NMI_Handler+0x4>

08001c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <MemManage_Handler+0x4>

08001c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f001 fcdd 	bl	8003654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO1_Pin);
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f002 fb38 	bl	8004318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTAO2_Pin);
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	f002 fb31 	bl	8004318 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc0:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <TIM2_IRQHandler+0x10>)
 8001cc2:	f005 fbcd 	bl	8007460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200003a0 	.word	0x200003a0

08001cd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cd4:	4802      	ldr	r0, [pc, #8]	@ (8001ce0 <TIM3_IRQHandler+0x10>)
 8001cd6:	f005 fbc3 	bl	8007460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200003e8 	.word	0x200003e8

08001ce4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ce8:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <RTC_Alarm_IRQHandler+0x10>)
 8001cea:	f004 ff35 	bl	8006b58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000334 	.word	0x20000334

08001cf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return 1;
 8001cfc:	2301      	movs	r3, #1
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_kill>:

int _kill(int pid, int sig)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d12:	f007 fc81 	bl	8009618 <__errno>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2216      	movs	r2, #22
 8001d1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_exit>:

void _exit (int status)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ffe7 	bl	8001d08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <_exit+0x12>

08001d3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e00a      	b.n	8001d66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d50:	f3af 8000 	nop.w
 8001d54:	4601      	mov	r1, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	60ba      	str	r2, [r7, #8]
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	3301      	adds	r3, #1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	dbf0      	blt.n	8001d50 <_read+0x12>
  }

  return len;
 8001d6e:	687b      	ldr	r3, [r7, #4]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e009      	b.n	8001d9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dbf1      	blt.n	8001d8a <_write+0x12>
  }
  return len;
 8001da6:	687b      	ldr	r3, [r7, #4]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_close>:

int _close(int file)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dd8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_isatty>:

int _isatty(int file)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f007 fbe6 	bl	8009618 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20020000 	.word	0x20020000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000354 	.word	0x20000354
 8001e80:	20000988 	.word	0x20000988

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b096      	sub	sp, #88	@ 0x58
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]
 8001ed6:	615a      	str	r2, [r3, #20]
 8001ed8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2220      	movs	r2, #32
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f007 fb46 	bl	8009572 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001ee8:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe4 <MX_TIM1_Init+0x13c>)
 8001eea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001eec:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001eee:	22b3      	movs	r2, #179	@ 0xb3
 8001ef0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001ef8:	4b39      	ldr	r3, [pc, #228]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001efa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001efe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f06:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f12:	4833      	ldr	r0, [pc, #204]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f14:	f004 ff42 	bl	8006d9c <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f1e:	f7ff fd03 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482c      	ldr	r0, [pc, #176]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f30:	f005 fce4 	bl	80078fc <HAL_TIM_ConfigClockSource>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f3a:	f7ff fcf5 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f3e:	4828      	ldr	r0, [pc, #160]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f40:	f004 ff7b 	bl	8006e3a <HAL_TIM_PWM_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f4a:	f7ff fced 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4820      	ldr	r0, [pc, #128]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f5e:	f006 fa47 	bl	80083f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f68:	f7ff fcde 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6c:	2360      	movs	r3, #96	@ 0x60
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f74:	2300      	movs	r3, #0
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4813      	ldr	r0, [pc, #76]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001f92:	f005 fbf1 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f9c:	f7ff fcc4 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4807      	ldr	r0, [pc, #28]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001fc4:	f006 fa90 	bl	80084e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001fce:	f7ff fcab 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fd2:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <MX_TIM1_Init+0x138>)
 8001fd4:	f000 f99a 	bl	800230c <HAL_TIM_MspPostInit>

}
 8001fd8:	bf00      	nop
 8001fda:	3758      	adds	r7, #88	@ 0x58
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000358 	.word	0x20000358
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	@ 0x38
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	615a      	str	r2, [r3, #20]
 8002016:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800201a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800201e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002022:	2259      	movs	r2, #89	@ 0x59
 8002024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 800202c:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800202e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002040:	4823      	ldr	r0, [pc, #140]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002042:	f004 feab 	bl	8006d9c <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800204c:	f7ff fc6c 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800205e:	f005 fc4d 	bl	80078fc <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002068:	f7ff fc5e 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800206c:	4818      	ldr	r0, [pc, #96]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800206e:	f004 fee4 	bl	8006e3a <HAL_TIM_PWM_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002078:	f7ff fc56 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	4619      	mov	r1, r3
 800208a:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800208c:	f006 f9b0 	bl	80083f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002096:	f7ff fc47 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209a:	2360      	movs	r3, #96	@ 0x60
 800209c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 80020b2:	f005 fb61 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020bc:	f7ff fc34 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 80020c2:	f000 f923 	bl	800230c <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3738      	adds	r7, #56	@ 0x38
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003a0 	.word	0x200003a0

080020d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b092      	sub	sp, #72	@ 0x48
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020f2:	f107 0320 	add.w	r3, r7, #32
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002112:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002114:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <MX_TIM3_Init+0x130>)
 8002116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002118:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <MX_TIM3_Init+0x12c>)
 800211a:	2259      	movs	r2, #89	@ 0x59
 800211c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b38      	ldr	r3, [pc, #224]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff - 1;
 8002124:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002126:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800212a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b34      	ldr	r3, [pc, #208]	@ (8002200 <MX_TIM3_Init+0x12c>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b33      	ldr	r3, [pc, #204]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002138:	4831      	ldr	r0, [pc, #196]	@ (8002200 <MX_TIM3_Init+0x12c>)
 800213a:	f004 fe2f 	bl	8006d9c <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002144:	f7ff fbf0 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002152:	4619      	mov	r1, r3
 8002154:	482a      	ldr	r0, [pc, #168]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002156:	f005 fbd1 	bl	80078fc <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002160:	f7ff fbe2 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002164:	4826      	ldr	r0, [pc, #152]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002166:	f004 fff9 	bl	800715c <HAL_TIM_IC_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002170:	f7ff fbda 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002174:	4822      	ldr	r0, [pc, #136]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002176:	f004 fe60 	bl	8006e3a <HAL_TIM_PWM_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002180:	f7ff fbd2 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800218c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002190:	4619      	mov	r1, r3
 8002192:	481b      	ldr	r0, [pc, #108]	@ (8002200 <MX_TIM3_Init+0x12c>)
 8002194:	f006 f92c 	bl	80083f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800219e:	f7ff fbc3 	bl	8001928 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021a2:	2300      	movs	r3, #0
 80021a4:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021a6:	2301      	movs	r3, #1
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021b2:	f107 0320 	add.w	r3, r7, #32
 80021b6:	2204      	movs	r2, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4811      	ldr	r0, [pc, #68]	@ (8002200 <MX_TIM3_Init+0x12c>)
 80021bc:	f005 fa40 	bl	8007640 <HAL_TIM_IC_ConfigChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80021c6:	f7ff fbaf 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ca:	2360      	movs	r3, #96	@ 0x60
 80021cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80021ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80021d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2208      	movs	r2, #8
 80021e0:	4619      	mov	r1, r3
 80021e2:	4807      	ldr	r0, [pc, #28]	@ (8002200 <MX_TIM3_Init+0x12c>)
 80021e4:	f005 fac8 	bl	8007778 <HAL_TIM_PWM_ConfigChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80021ee:	f7ff fb9b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021f2:	4803      	ldr	r0, [pc, #12]	@ (8002200 <MX_TIM3_Init+0x12c>)
 80021f4:	f000 f88a 	bl	800230c <HAL_TIM_MspPostInit>

}
 80021f8:	bf00      	nop
 80021fa:	3748      	adds	r7, #72	@ 0x48
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200003e8 	.word	0x200003e8
 8002204:	40000400 	.word	0x40000400

08002208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	@ 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a35      	ldr	r2, [pc, #212]	@ (80022fc <HAL_TIM_Base_MspInit+0xf4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	4a33      	ldr	r2, [pc, #204]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6453      	str	r3, [r2, #68]	@ 0x44
 800223a:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002246:	e054      	b.n	80022f2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002250:	d116      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4a29      	ldr	r2, [pc, #164]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6413      	str	r3, [r2, #64]	@ 0x40
 8002262:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	201c      	movs	r0, #28
 8002274:	f001 fe51 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002278:	201c      	movs	r0, #28
 800227a:	f001 fe6a 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 800227e:	e038      	b.n	80022f2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1f      	ldr	r2, [pc, #124]	@ (8002304 <HAL_TIM_Base_MspInit+0xfc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d133      	bne.n	80022f2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a1b      	ldr	r2, [pc, #108]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_TIM_Base_MspInit+0xf8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022c2:	2380      	movs	r3, #128	@ 0x80
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d2:	2302      	movs	r3, #2
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	480a      	ldr	r0, [pc, #40]	@ (8002308 <HAL_TIM_Base_MspInit+0x100>)
 80022de:	f001 fe53 	bl	8003f88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	201d      	movs	r0, #29
 80022e8:	f001 fe17 	bl	8003f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022ec:	201d      	movs	r0, #29
 80022ee:	f001 fe30 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3730      	adds	r7, #48	@ 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40010000 	.word	0x40010000
 8002300:	40023800 	.word	0x40023800
 8002304:	40000400 	.word	0x40000400
 8002308:	40020000 	.word	0x40020000

0800230c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a37      	ldr	r2, [pc, #220]	@ (8002408 <HAL_TIM_MspPostInit+0xfc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d11f      	bne.n	800236e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a35      	ldr	r2, [pc, #212]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b33      	ldr	r3, [pc, #204]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800234a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800234e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800235c:	2301      	movs	r3, #1
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	4619      	mov	r1, r3
 8002366:	482a      	ldr	r0, [pc, #168]	@ (8002410 <HAL_TIM_MspPostInit+0x104>)
 8002368:	f001 fe0e 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800236c:	e047      	b.n	80023fe <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002376:	d11f      	bne.n	80023b8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	4b23      	ldr	r3, [pc, #140]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	4a22      	ldr	r2, [pc, #136]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6313      	str	r3, [r2, #48]	@ 0x30
 8002388:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002394:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a6:	2301      	movs	r3, #1
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4817      	ldr	r0, [pc, #92]	@ (8002410 <HAL_TIM_MspPostInit+0x104>)
 80023b2:	f001 fde9 	bl	8003f88 <HAL_GPIO_Init>
}
 80023b6:	e022      	b.n	80023fe <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <HAL_TIM_MspPostInit+0x108>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11d      	bne.n	80023fe <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a10      	ldr	r2, [pc, #64]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_TIM_MspPostInit+0x100>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023de:	2301      	movs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ee:	2302      	movs	r3, #2
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4807      	ldr	r0, [pc, #28]	@ (8002418 <HAL_TIM_MspPostInit+0x10c>)
 80023fa:	f001 fdc5 	bl	8003f88 <HAL_GPIO_Init>
}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	@ 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40010000 	.word	0x40010000
 800240c:	40023800 	.word	0x40023800
 8002410:	40020000 	.word	0x40020000
 8002414:	40000400 	.word	0x40000400
 8002418:	40020400 	.word	0x40020400

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002454 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002420:	f7ff fd30 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002424:	480c      	ldr	r0, [pc, #48]	@ (8002458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002426:	490d      	ldr	r1, [pc, #52]	@ (800245c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002428:	4a0d      	ldr	r2, [pc, #52]	@ (8002460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800242c:	e002      	b.n	8002434 <LoopCopyDataInit>

0800242e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002432:	3304      	adds	r3, #4

08002434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002438:	d3f9      	bcc.n	800242e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243a:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800243c:	4c0a      	ldr	r4, [pc, #40]	@ (8002468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002440:	e001      	b.n	8002446 <LoopFillZerobss>

08002442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002444:	3204      	adds	r2, #4

08002446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002448:	d3fb      	bcc.n	8002442 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800244a:	f007 f8eb 	bl	8009624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7fe fff1 	bl	8001434 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8002460:	0800e670 	.word	0x0800e670
  ldr r2, =_sbss
 8002464:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8002468:	20000988 	.word	0x20000988

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>

0800246e <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2203      	movs	r2, #3
 800248c:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	715a      	strb	r2, [r3, #5]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b08a      	sub	sp, #40	@ 0x28
 80024aa:	af04      	add	r7, sp, #16
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	460b      	mov	r3, r1
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80024c0:	7afb      	ldrb	r3, [r7, #11]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	8af9      	ldrh	r1, [r7, #22]
 80024c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80024ca:	9302      	str	r3, [sp, #8]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2301      	movs	r3, #1
 80024d8:	f002 f974 	bl	80047c4 <HAL_I2C_Mem_Read>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80024e2:	7d7b      	ldrb	r3, [r7, #21]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	7d3b      	ldrb	r3, [r7, #20]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b21b      	sxth	r3, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	801a      	strh	r2, [r3, #0]
		return true;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <read_register16+0x56>
	} else
		return false;
 80024fa:	2300      	movs	r3, #0

}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b08b      	sub	sp, #44	@ 0x2c
 8002508:	af04      	add	r7, sp, #16
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	460b      	mov	r3, r1
 8002512:	72fb      	strb	r3, [r7, #11]
 8002514:	4613      	mov	r3, r2
 8002516:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b29a      	uxth	r2, r3
 8002528:	7abb      	ldrb	r3, [r7, #10]
 800252a:	b29b      	uxth	r3, r3
 800252c:	8af9      	ldrh	r1, [r7, #22]
 800252e:	f241 3488 	movw	r4, #5000	@ 0x1388
 8002532:	9402      	str	r4, [sp, #8]
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2301      	movs	r3, #1
 800253c:	f002 f942 	bl	80047c4 <HAL_I2C_Mem_Read>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <read_data+0x46>
		return 0;
 8002546:	2300      	movs	r3, #0
 8002548:	e000      	b.n	800254c <read_data+0x48>
	else
		return 1;
 800254a:	2301      	movs	r3, #1

}
 800254c:	4618      	mov	r0, r3
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd90      	pop	{r4, r7, pc}

08002554 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	2188      	movs	r1, #136	@ 0x88
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff9f 	bl	80024a6 <read_register16>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d06f      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3302      	adds	r3, #2
 8002572:	461a      	mov	r2, r3
 8002574:	218a      	movs	r1, #138	@ 0x8a
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ff95 	bl	80024a6 <read_register16>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d065      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3304      	adds	r3, #4
 8002586:	461a      	mov	r2, r3
 8002588:	218c      	movs	r1, #140	@ 0x8c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff8b 	bl	80024a6 <read_register16>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d05b      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3306      	adds	r3, #6
 800259a:	461a      	mov	r2, r3
 800259c:	218e      	movs	r1, #142	@ 0x8e
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ff81 	bl	80024a6 <read_register16>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d051      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3308      	adds	r3, #8
 80025ae:	461a      	mov	r2, r3
 80025b0:	2190      	movs	r1, #144	@ 0x90
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff77 	bl	80024a6 <read_register16>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d047      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	330a      	adds	r3, #10
 80025c2:	461a      	mov	r2, r3
 80025c4:	2192      	movs	r1, #146	@ 0x92
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ff6d 	bl	80024a6 <read_register16>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03d      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	330c      	adds	r3, #12
 80025d6:	461a      	mov	r2, r3
 80025d8:	2194      	movs	r1, #148	@ 0x94
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff63 	bl	80024a6 <read_register16>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d033      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	330e      	adds	r3, #14
 80025ea:	461a      	mov	r2, r3
 80025ec:	2196      	movs	r1, #150	@ 0x96
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff59 	bl	80024a6 <read_register16>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d029      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3310      	adds	r3, #16
 80025fe:	461a      	mov	r2, r3
 8002600:	2198      	movs	r1, #152	@ 0x98
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ff4f 	bl	80024a6 <read_register16>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01f      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3312      	adds	r3, #18
 8002612:	461a      	mov	r2, r3
 8002614:	219a      	movs	r1, #154	@ 0x9a
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ff45 	bl	80024a6 <read_register16>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d015      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3314      	adds	r3, #20
 8002626:	461a      	mov	r2, r3
 8002628:	219c      	movs	r1, #156	@ 0x9c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ff3b 	bl	80024a6 <read_register16>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800263a:	461a      	mov	r2, r3
 800263c:	219e      	movs	r1, #158	@ 0x9e
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff31 	bl	80024a6 <read_register16>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <read_calibration_data+0xfa>

		return true;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <read_calibration_data+0xfc>
	}

	return false;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0218 	add.w	r2, r3, #24
 8002666:	2301      	movs	r3, #1
 8002668:	21a1      	movs	r1, #161	@ 0xa1
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff4a 	bl	8002504 <read_data>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d14b      	bne.n	800270e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	331a      	adds	r3, #26
 800267a:	461a      	mov	r2, r3
 800267c:	21e1      	movs	r1, #225	@ 0xe1
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ff11 	bl	80024a6 <read_register16>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d041      	beq.n	800270e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f103 021c 	add.w	r2, r3, #28
 8002690:	2301      	movs	r3, #1
 8002692:	21e3      	movs	r1, #227	@ 0xe3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff ff35 	bl	8002504 <read_data>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d136      	bne.n	800270e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80026a0:	f107 030e 	add.w	r3, r7, #14
 80026a4:	461a      	mov	r2, r3
 80026a6:	21e4      	movs	r1, #228	@ 0xe4
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fefc 	bl	80024a6 <read_register16>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d02c      	beq.n	800270e <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	461a      	mov	r2, r3
 80026ba:	21e5      	movs	r1, #229	@ 0xe5
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fef2 	bl	80024a6 <read_register16>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d022      	beq.n	800270e <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80026ce:	2301      	movs	r3, #1
 80026d0:	21e7      	movs	r1, #231	@ 0xe7
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff16 	bl	8002504 <read_data>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d117      	bne.n	800270e <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	121b      	asrs	r3, r3, #8
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b21a      	sxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80026fe:	89bb      	ldrh	r3, [r7, #12]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	b29b      	uxth	r3, r3
 8002704:	b21a      	sxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	841a      	strh	r2, [r3, #32]

		return true;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <read_hum_calibration_data+0xb8>
	}

	return false;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af04      	add	r7, sp, #16
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	70fb      	strb	r3, [r7, #3]
 8002724:	4613      	mov	r3, r2
 8002726:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	b29a      	uxth	r2, r3
 8002738:	89f9      	ldrh	r1, [r7, #14]
 800273a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800273e:	9302      	str	r3, [sp, #8]
 8002740:	2301      	movs	r3, #1
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	1cbb      	adds	r3, r7, #2
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2301      	movs	r3, #1
 800274a:	f001 ff41 	bl	80045d0 <HAL_I2C_Mem_Write>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <write_register8+0x40>
		return false;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <write_register8+0x42>
	else
		return true;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002770:	2b76      	cmp	r3, #118	@ 0x76
 8002772:	d005      	beq.n	8002780 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002778:	2b77      	cmp	r3, #119	@ 0x77
 800277a:	d001      	beq.n	8002780 <bmp280_init+0x1e>

		return false;
 800277c:	2300      	movs	r3, #0
 800277e:	e099      	b.n	80028b4 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002786:	2301      	movs	r3, #1
 8002788:	21d0      	movs	r1, #208	@ 0xd0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff feba 	bl	8002504 <read_data>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <bmp280_init+0x38>
		return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e08c      	b.n	80028b4 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80027a0:	2b58      	cmp	r3, #88	@ 0x58
 80027a2:	d006      	beq.n	80027b2 <bmp280_init+0x50>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80027aa:	2b60      	cmp	r3, #96	@ 0x60
 80027ac:	d001      	beq.n	80027b2 <bmp280_init+0x50>

		return false;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e080      	b.n	80028b4 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80027b2:	22b6      	movs	r2, #182	@ 0xb6
 80027b4:	21e0      	movs	r1, #224	@ 0xe0
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffae 	bl	8002718 <write_register8>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <bmp280_init+0x64>
		return false;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e076      	b.n	80028b4 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80027c6:	f107 020c 	add.w	r2, r7, #12
 80027ca:	2301      	movs	r3, #1
 80027cc:	21f3      	movs	r1, #243	@ 0xf3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fe98 	bl	8002504 <read_data>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f5      	bne.n	80027c6 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80027da:	7b3b      	ldrb	r3, [r7, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff feb5 	bl	8002554 <read_calibration_data>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f083 0301 	eor.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d100      	bne.n	80027f8 <bmp280_init+0x96>
 80027f6:	e001      	b.n	80027fc <bmp280_init+0x9a>
		return false;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e05b      	b.n	80028b4 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002802:	2b60      	cmp	r3, #96	@ 0x60
 8002804:	d10a      	bne.n	800281c <bmp280_init+0xba>
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff26 	bl	8002658 <read_hum_calibration_data>
 800280c:	4603      	mov	r3, r0
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <bmp280_init+0xba>
		return false;
 8002818:	2300      	movs	r3, #0
 800281a:	e04b      	b.n	80028b4 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	795b      	ldrb	r3, [r3, #5]
 8002820:	015b      	lsls	r3, r3, #5
 8002822:	b25a      	sxtb	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	b25b      	sxtb	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b25b      	sxtb	r3, r3
 8002830:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	461a      	mov	r2, r3
 8002836:	21f5      	movs	r1, #245	@ 0xf5
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff6d 	bl	8002718 <write_register8>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <bmp280_init+0xe6>
		return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e035      	b.n	80028b4 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800285c:	b25a      	sxtb	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	b25b      	sxtb	r3, r3
 8002866:	4313      	orrs	r3, r2
 8002868:	b25a      	sxtb	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b25b      	sxtb	r3, r3
 8002870:	4313      	orrs	r3, r2
 8002872:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8002874:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800287c:	2b60      	cmp	r3, #96	@ 0x60
 800287e:	d10d      	bne.n	800289c <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	791b      	ldrb	r3, [r3, #4]
 8002884:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8002886:	7b7b      	ldrb	r3, [r7, #13]
 8002888:	461a      	mov	r2, r3
 800288a:	21f2      	movs	r1, #242	@ 0xf2
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff43 	bl	8002718 <write_register8>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <bmp280_init+0x13a>
			return false;
 8002898:	2300      	movs	r3, #0
 800289a:	e00b      	b.n	80028b4 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800289c:	7bbb      	ldrb	r3, [r7, #14]
 800289e:	461a      	mov	r2, r3
 80028a0:	21f4      	movs	r1, #244	@ 0xf4
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ff38 	bl	8002718 <write_register8>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <bmp280_init+0x150>
		return false;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <bmp280_init+0x152>
	}

	return true;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	10da      	asrs	r2, r3, #3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80028de:	12db      	asrs	r3, r3, #11
 80028e0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	111b      	asrs	r3, r3, #4
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	1112      	asrs	r2, r2, #4
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	8809      	ldrh	r1, [r1, #0]
 80028f4:	1a52      	subs	r2, r2, r1
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002902:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002906:	139b      	asrs	r3, r3, #14
 8002908:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	441a      	add	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3380      	adds	r3, #128	@ 0x80
 8002920:	121b      	asrs	r3, r3, #8
}
 8002922:	4618      	mov	r0, r3
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <compensate_pressure>:
	return p;
}
*/

static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp){
 8002930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002934:	b09b      	sub	sp, #108	@ 0x6c
 8002936:	af00      	add	r7, sp, #0
 8002938:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800293a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800293c:	647a      	str	r2, [r7, #68]	@ 0x44
	int64_t var1, var2, p;

	var1 = ((int64_t) fine_temp/2) - 64000;
 800293e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002940:	0fd3      	lsrs	r3, r2, #31
 8002942:	4413      	add	r3, r2
 8002944:	105b      	asrs	r3, r3, #1
 8002946:	17da      	asrs	r2, r3, #31
 8002948:	461c      	mov	r4, r3
 800294a:	4615      	mov	r5, r2
 800294c:	f5b4 4a7a 	subs.w	sl, r4, #64000	@ 0xfa00
 8002950:	f145 3bff 	adc.w	fp, r5, #4294967295
 8002954:	e9c7 ab18 	strd	sl, fp, [r7, #96]	@ 0x60
	var2 = var1*var1*((double)dev->dig_P6)/32768;
 8002958:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800295a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800295c:	fb03 f102 	mul.w	r1, r3, r2
 8002960:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002962:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	18ca      	adds	r2, r1, r3
 800296a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296c:	fba3 8903 	umull	r8, r9, r3, r3
 8002970:	eb02 0309 	add.w	r3, r2, r9
 8002974:	4699      	mov	r9, r3
 8002976:	4640      	mov	r0, r8
 8002978:	4649      	mov	r1, r9
 800297a:	f7fd fe2f 	bl	80005dc <__aeabi_l2d>
 800297e:	4604      	mov	r4, r0
 8002980:	460d      	mov	r5, r1
 8002982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002984:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fdeb 	bl	8000564 <__aeabi_i2d>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4620      	mov	r0, r4
 8002994:	4629      	mov	r1, r5
 8002996:	f7fd fe4f 	bl	8000638 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	4b86      	ldr	r3, [pc, #536]	@ (8002bc0 <compensate_pressure+0x290>)
 80029a8:	f7fd ff70 	bl	800088c <__aeabi_ddiv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7fe f9f0 	bl	8000d98 <__aeabi_d2lz>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var2 = var2+var1*((double)dev->dig_P5)*2;
 80029c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80029c4:	f7fd fe0a 	bl	80005dc <__aeabi_l2d>
 80029c8:	4680      	mov	r8, r0
 80029ca:	4689      	mov	r9, r1
 80029cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80029d0:	f7fd fe04 	bl	80005dc <__aeabi_l2d>
 80029d4:	4604      	mov	r4, r0
 80029d6:	460d      	mov	r5, r1
 80029d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fdc0 	bl	8000564 <__aeabi_i2d>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4620      	mov	r0, r4
 80029ea:	4629      	mov	r1, r5
 80029ec:	f7fd fe24 	bl	8000638 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	f7fd fc66 	bl	80002cc <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4640      	mov	r0, r8
 8002a06:	4649      	mov	r1, r9
 8002a08:	f7fd fc60 	bl	80002cc <__adddf3>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f9c0 	bl	8000d98 <__aeabi_d2lz>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var2 = (var2/4)+((double)dev->dig_P4)*65536;
 8002a20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da06      	bge.n	8002a36 <compensate_pressure+0x106>
 8002a28:	1cd1      	adds	r1, r2, #3
 8002a2a:	61b9      	str	r1, [r7, #24]
 8002a2c:	f143 0300 	adc.w	r3, r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a36:	f04f 0000 	mov.w	r0, #0
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	0890      	lsrs	r0, r2, #2
 8002a40:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8002a44:	1099      	asrs	r1, r3, #2
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7fd fdc5 	bl	80005dc <__aeabi_l2d>
 8002a52:	4604      	mov	r4, r0
 8002a54:	460d      	mov	r5, r1
 8002a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a58:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fd81 	bl	8000564 <__aeabi_i2d>
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b57      	ldr	r3, [pc, #348]	@ (8002bc4 <compensate_pressure+0x294>)
 8002a68:	f7fd fde6 	bl	8000638 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4620      	mov	r0, r4
 8002a72:	4629      	mov	r1, r5
 8002a74:	f7fd fc2a 	bl	80002cc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f98a 	bl	8000d98 <__aeabi_d2lz>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	var1 = (((double)dev->dig_P3)*var1*var1/524288+((double)dev->dig_P2)*var1)/5242888;
 8002a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a8e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd66 	bl	8000564 <__aeabi_i2d>
 8002a98:	4604      	mov	r4, r0
 8002a9a:	460d      	mov	r5, r1
 8002a9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002aa0:	f7fd fd9c 	bl	80005dc <__aeabi_l2d>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	f7fd fdc4 	bl	8000638 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4614      	mov	r4, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002abc:	f7fd fd8e 	bl	80005dc <__aeabi_l2d>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	f7fd fdb6 	bl	8000638 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <compensate_pressure+0x298>)
 8002ada:	f7fd fed7 	bl	800088c <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd39 	bl	8000564 <__aeabi_i2d>
 8002af2:	4604      	mov	r4, r0
 8002af4:	460d      	mov	r5, r1
 8002af6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002afa:	f7fd fd6f 	bl	80005dc <__aeabi_l2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f7fd fd97 	bl	8000638 <__aeabi_dmul>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4640      	mov	r0, r8
 8002b10:	4649      	mov	r1, r9
 8002b12:	f7fd fbdb 	bl	80002cc <__adddf3>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	a326      	add	r3, pc, #152	@ (adr r3, 8002bb8 <compensate_pressure+0x288>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd feb2 	bl	800088c <__aeabi_ddiv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7fe f932 	bl	8000d98 <__aeabi_d2lz>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	var1 = (1 + var1/32768)*((double)dev->dig_P1);
 8002b3c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da08      	bge.n	8002b56 <compensate_pressure+0x226>
 8002b44:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002b48:	1851      	adds	r1, r2, r1
 8002b4a:	6139      	str	r1, [r7, #16]
 8002b4c:	f143 0300 	adc.w	r3, r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b56:	f04f 0000 	mov.w	r0, #0
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	0bd0      	lsrs	r0, r2, #15
 8002b60:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8002b64:	13d9      	asrs	r1, r3, #15
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	1c51      	adds	r1, r2, #1
 8002b6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b6e:	f143 0300 	adc.w	r3, r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b78:	f7fd fd30 	bl	80005dc <__aeabi_l2d>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b82:	88db      	ldrh	r3, [r3, #6]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fcdd 	bl	8000544 <__aeabi_ui2d>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4620      	mov	r0, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	f7fd fd51 	bl	8000638 <__aeabi_dmul>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fe f8fb 	bl	8000d98 <__aeabi_d2lz>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	if (var1 == 0){
 8002baa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	d10c      	bne.n	8002bcc <compensate_pressure+0x29c>
		return 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e0f9      	b.n	8002daa <compensate_pressure+0x47a>
 8002bb6:	bf00      	nop
 8002bb8:	00000000 	.word	0x00000000
 8002bbc:	41540002 	.word	0x41540002
 8002bc0:	40e00000 	.word	0x40e00000
 8002bc4:	40f00000 	.word	0x40f00000
 8002bc8:	41200000 	.word	0x41200000
	}

	p = 1048576 - (double)adc_press;
 8002bcc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002bce:	f7fd fcc9 	bl	8000564 <__aeabi_i2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	f04f 0000 	mov.w	r0, #0
 8002bda:	4976      	ldr	r1, [pc, #472]	@ (8002db4 <compensate_pressure+0x484>)
 8002bdc:	f7fd fb74 	bl	80002c8 <__aeabi_dsub>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	f7fe f8d6 	bl	8000d98 <__aeabi_d2lz>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	p = (p-(var2/4096))*6250/var1;
 8002bf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	2900      	cmp	r1, #0
 8002bfe:	da08      	bge.n	8002c12 <compensate_pressure+0x2e2>
 8002c00:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002c04:	18c3      	adds	r3, r0, r3
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	f141 0300 	adc.w	r3, r1, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	0b02      	lsrs	r2, r0, #12
 8002c1c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002c20:	130b      	asrs	r3, r1, #12
 8002c22:	2100      	movs	r1, #0
 8002c24:	4250      	negs	r0, r2
 8002c26:	6038      	str	r0, [r7, #0]
 8002c28:	eb61 0303 	sbc.w	r3, r1, r3
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c32:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c36:	1884      	adds	r4, r0, r2
 8002c38:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002c3a:	eb41 0303 	adc.w	r3, r1, r3
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c40:	f641 036a 	movw	r3, #6250	@ 0x186a
 8002c44:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002c48:	462a      	mov	r2, r5
 8002c4a:	fb03 f202 	mul.w	r2, r3, r2
 8002c4e:	2300      	movs	r3, #0
 8002c50:	4621      	mov	r1, r4
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	f641 026a 	movw	r2, #6250	@ 0x186a
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	fba1 1202 	umull	r1, r2, r1, r2
 8002c62:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c64:	460a      	mov	r2, r1
 8002c66:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c6a:	4413      	add	r3, r2
 8002c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c6e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002c72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002c76:	f7fe f827 	bl	8000cc8 <__aeabi_ldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	var1 = ((double)dev->dig_P9)*p*p/2147483648;
 8002c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c84:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc6b 	bl	8000564 <__aeabi_i2d>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
 8002c92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002c96:	f7fd fca1 	bl	80005dc <__aeabi_l2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd fcc9 	bl	8000638 <__aeabi_dmul>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4614      	mov	r4, r2
 8002cac:	461d      	mov	r5, r3
 8002cae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002cb2:	f7fd fc93 	bl	80005dc <__aeabi_l2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	f7fd fcbb 	bl	8000638 <__aeabi_dmul>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <compensate_pressure+0x488>)
 8002cd0:	f7fd fddc 	bl	800088c <__aeabi_ddiv>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fe f85c 	bl	8000d98 <__aeabi_d2lz>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	var2 = p*((double)dev->dig_P8)/32768;
 8002ce8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002cec:	f7fd fc76 	bl	80005dc <__aeabi_l2d>
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	460d      	mov	r5, r1
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fc32 	bl	8000564 <__aeabi_i2d>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7fd fc96 	bl	8000638 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	4b28      	ldr	r3, [pc, #160]	@ (8002dbc <compensate_pressure+0x48c>)
 8002d1a:	f7fd fdb7 	bl	800088c <__aeabi_ddiv>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	f7fe f837 	bl	8000d98 <__aeabi_d2lz>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	p = p + (var1 + var2 + ((double)dev->dig_P7))/16;
 8002d32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002d36:	f7fd fc51 	bl	80005dc <__aeabi_l2d>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d46:	1886      	adds	r6, r0, r2
 8002d48:	623e      	str	r6, [r7, #32]
 8002d4a:	eb41 0303 	adc.w	r3, r1, r3
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d54:	f7fd fc42 	bl	80005dc <__aeabi_l2d>
 8002d58:	4680      	mov	r8, r0
 8002d5a:	4689      	mov	r9, r1
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fbfe 	bl	8000564 <__aeabi_i2d>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4640      	mov	r0, r8
 8002d6e:	4649      	mov	r1, r9
 8002d70:	f7fd faac 	bl	80002cc <__adddf3>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <compensate_pressure+0x490>)
 8002d82:	f7fd fd83 	bl	800088c <__aeabi_ddiv>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7fd fa9d 	bl	80002cc <__adddf3>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f7fd fffd 	bl	8000d98 <__aeabi_d2lz>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	return p*256;
 8002da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002da8:	021b      	lsls	r3, r3, #8
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	376c      	adds	r7, #108	@ 0x6c
 8002dae:	46bd      	mov	sp, r7
 8002db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db4:	41300000 	.word	0x41300000
 8002db8:	41e00000 	.word	0x41e00000
 8002dbc:	40e00000 	.word	0x40e00000
 8002dc0:	40300000 	.word	0x40300000

08002dc4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002dd6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	039a      	lsls	r2, r3, #14
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002de2:	051b      	lsls	r3, r3, #20
 8002de4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002dec:	4619      	mov	r1, r3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002dfa:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8002e02:	4611      	mov	r1, r2
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	fb01 f202 	mul.w	r2, r1, r2
 8002e0a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	7f09      	ldrb	r1, [r1, #28]
 8002e10:	4608      	mov	r0, r1
 8002e12:	6979      	ldr	r1, [r7, #20]
 8002e14:	fb00 f101 	mul.w	r1, r0, r1
 8002e18:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002e1a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002e1e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002e22:	1292      	asrs	r2, r2, #10
 8002e24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002e2e:	fb01 f202 	mul.w	r2, r1, r2
 8002e32:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002e36:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	13db      	asrs	r3, r3, #15
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	13d2      	asrs	r2, r2, #15
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	7e12      	ldrb	r2, [r2, #24]
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002e62:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002e6a:	bfa8      	it	ge
 8002e6c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002e70:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	131b      	asrs	r3, r3, #12
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b08c      	sub	sp, #48	@ 0x30
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002e96:	2b60      	cmp	r3, #96	@ 0x60
 8002e98:	d007      	beq.n	8002eaa <bmp280_read_fixed+0x28>
		if (humidity)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <bmp280_read_fixed+0x32>
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	e000      	b.n	8002eb6 <bmp280_read_fixed+0x34>
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f107 0218 	add.w	r2, r7, #24
 8002ec0:	21f7      	movs	r1, #247	@ 0xf7
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fb1e 	bl	8002504 <read_data>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <bmp280_read_fixed+0x50>
		return false;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e038      	b.n	8002f44 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002ed2:	7e3b      	ldrb	r3, [r7, #24]
 8002ed4:	031a      	lsls	r2, r3, #12
 8002ed6:	7e7b      	ldrb	r3, [r7, #25]
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	4313      	orrs	r3, r2
 8002edc:	7eba      	ldrb	r2, [r7, #26]
 8002ede:	0912      	lsrs	r2, r2, #4
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002ee6:	7efb      	ldrb	r3, [r7, #27]
 8002ee8:	031a      	lsls	r2, r3, #12
 8002eea:	7f3b      	ldrb	r3, [r7, #28]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	7f7a      	ldrb	r2, [r7, #29]
 8002ef2:	0912      	lsrs	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fcda 	bl	80028bc <compensate_temperature>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	461a      	mov	r2, r3
 8002f12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fd0b 	bl	8002930 <compensate_pressure>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002f26:	7fbb      	ldrb	r3, [r7, #30]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	7ffa      	ldrb	r2, [r7, #31]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	461a      	mov	r2, r3
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff44 	bl	8002dc4 <compensate_humidity>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002f42:	2301      	movs	r3, #1
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	@ 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <bmp280_read_float+0x1a>
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	e000      	b.n	8002f68 <bmp280_read_float+0x1c>
 8002f66:	2300      	movs	r3, #0
 8002f68:	f107 0218 	add.w	r2, r7, #24
 8002f6c:	f107 011c 	add.w	r1, r7, #28
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff ff86 	bl	8002e82 <bmp280_read_fixed>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d028      	beq.n	8002fce <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f86:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002fd8 <bmp280_read_float+0x8c>
 8002f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f9e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002fdc <bmp280_read_float+0x90>
 8002fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fbc:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002fe0 <bmp280_read_float+0x94>
 8002fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <bmp280_read_float+0x84>
	}

	return false;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	42c80000 	.word	0x42c80000
 8002fdc:	43800000 	.word	0x43800000
 8002fe0:	44800000 	.word	0x44800000

08002fe4 <PlayTone>:
{
	__HAL_TIM_SET_PRESCALER(&htim3, 0);
}

void PlayTone (uint32_t *tone, uint32_t *duration, int *pause, int size)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
//	__HAL_TIM_SET_PRESCALER(&htim3, 300);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002ff2:	2108      	movs	r1, #8
 8002ff4:	4807      	ldr	r0, [pc, #28]	@ (8003014 <PlayTone+0x30>)
 8002ff6:	f003 ff79 	bl	8006eec <HAL_TIM_PWM_Start>
	HAL_Delay(2000); // Atraso para a duração do tom
 8002ffa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ffe:	f000 fb49 	bl	8003694 <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8003002:	2108      	movs	r1, #8
 8003004:	4803      	ldr	r0, [pc, #12]	@ (8003014 <PlayTone+0x30>)
 8003006:	f004 f839 	bl	800707c <HAL_TIM_PWM_Stop>
//    __HAL_TIM_SET_PRESCALER(&htim3, 0xffff - 1);
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200003e8 	.word	0x200003e8

08003018 <HCSR04_Read>:

#include "hcsr04.h"


void HCSR04_Read(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGER_GPIO_Port, TRIGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800301c:	2201      	movs	r2, #1
 800301e:	2140      	movs	r1, #64	@ 0x40
 8003020:	480a      	ldr	r0, [pc, #40]	@ (800304c <HCSR04_Read+0x34>)
 8003022:	f001 f945 	bl	80042b0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8003026:	200a      	movs	r0, #10
 8003028:	f000 f814 	bl	8003054 <delay>
	HAL_GPIO_WritePin(TRIGER_GPIO_Port, TRIGER_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800302c:	2200      	movs	r2, #0
 800302e:	2140      	movs	r1, #64	@ 0x40
 8003030:	4806      	ldr	r0, [pc, #24]	@ (800304c <HCSR04_Read+0x34>)
 8003032:	f001 f93d 	bl	80042b0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HCSR04_Read+0x38>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <HCSR04_Read+0x38>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	60da      	str	r2, [r3, #12]
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40020000 	.word	0x40020000
 8003050:	200003e8 	.word	0x200003e8

08003054 <delay>:


void delay(uint16_t time)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <delay+0x30>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 8003066:	bf00      	nop
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <delay+0x30>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3f9      	bcc.n	8003068 <delay+0x14>
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	200003e8 	.word	0x200003e8

08003088 <ComportaOnOff>:
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 750); // Equivalente a 90 graus
//  HAL_Delay(DELAY_PADRAO);
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1250); // Equivalente a 180 graus
//  HAL_Delay(DELAY_PADRAO);

void ComportaOnOff(void){
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
//	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 250); // Euivalente a zero graus
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <ComportaOnOff+0x2c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	22fa      	movs	r2, #250	@ 0xfa
 8003092:	635a      	str	r2, [r3, #52]	@ 0x34
//	  HAL_Delay(DELAY_PADRAO);
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1250); // Equivalente a 90 graus
 8003094:	4b07      	ldr	r3, [pc, #28]	@ (80030b4 <ComportaOnOff+0x2c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(DELAY_PADRAO);
 800309e:	f241 3088 	movw	r0, #5000	@ 0x1388
 80030a2:	f000 faf7 	bl	8003694 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 250); // Equivalente a 180 graus
 80030a6:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <ComportaOnOff+0x2c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	22fa      	movs	r2, #250	@ 0xfa
 80030ac:	635a      	str	r2, [r3, #52]	@ 0x34
//	  HAL_Delay(DELAY_PADRAO);
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000358 	.word	0x20000358

080030b8 <ssd1306_Reset>:
#include <string.h>  // For memcpy
#include <stdio.h>

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af04      	add	r7, sp, #16
 80030ce:	4603      	mov	r3, r0
 80030d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295
 80030d6:	9302      	str	r3, [sp, #8]
 80030d8:	2301      	movs	r3, #1
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2301      	movs	r3, #1
 80030e2:	2200      	movs	r2, #0
 80030e4:	2178      	movs	r1, #120	@ 0x78
 80030e6:	4803      	ldr	r0, [pc, #12]	@ (80030f4 <ssd1306_WriteCommand+0x2c>)
 80030e8:	f001 fa72 	bl	80045d0 <HAL_I2C_Mem_Write>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000288 	.word	0x20000288

080030f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f04f 32ff 	mov.w	r2, #4294967295
 800310a:	9202      	str	r2, [sp, #8]
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2301      	movs	r3, #1
 8003114:	2240      	movs	r2, #64	@ 0x40
 8003116:	2178      	movs	r1, #120	@ 0x78
 8003118:	4803      	ldr	r0, [pc, #12]	@ (8003128 <ssd1306_WriteData+0x30>)
 800311a:	f001 fa59 	bl	80045d0 <HAL_I2C_Mem_Write>
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000288 	.word	0x20000288

0800312c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003130:	f7ff ffc2 	bl	80030b8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003134:	2064      	movs	r0, #100	@ 0x64
 8003136:	f000 faad 	bl	8003694 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800313a:	2000      	movs	r0, #0
 800313c:	f000 f9d6 	bl	80034ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003140:	2020      	movs	r0, #32
 8003142:	f7ff ffc1 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003146:	2000      	movs	r0, #0
 8003148:	f7ff ffbe 	bl	80030c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800314c:	20b0      	movs	r0, #176	@ 0xb0
 800314e:	f7ff ffbb 	bl	80030c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003152:	20c8      	movs	r0, #200	@ 0xc8
 8003154:	f7ff ffb8 	bl	80030c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003158:	2000      	movs	r0, #0
 800315a:	f7ff ffb5 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800315e:	2010      	movs	r0, #16
 8003160:	f7ff ffb2 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003164:	2040      	movs	r0, #64	@ 0x40
 8003166:	f7ff ffaf 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800316a:	20ff      	movs	r0, #255	@ 0xff
 800316c:	f000 f9aa 	bl	80034c4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003170:	20a1      	movs	r0, #161	@ 0xa1
 8003172:	f7ff ffa9 	bl	80030c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003176:	20a6      	movs	r0, #166	@ 0xa6
 8003178:	f7ff ffa6 	bl	80030c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800317c:	20a8      	movs	r0, #168	@ 0xa8
 800317e:	f7ff ffa3 	bl	80030c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003182:	203f      	movs	r0, #63	@ 0x3f
 8003184:	f7ff ffa0 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003188:	20a4      	movs	r0, #164	@ 0xa4
 800318a:	f7ff ff9d 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800318e:	20d3      	movs	r0, #211	@ 0xd3
 8003190:	f7ff ff9a 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003194:	2000      	movs	r0, #0
 8003196:	f7ff ff97 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800319a:	20d5      	movs	r0, #213	@ 0xd5
 800319c:	f7ff ff94 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80031a0:	20f0      	movs	r0, #240	@ 0xf0
 80031a2:	f7ff ff91 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80031a6:	20d9      	movs	r0, #217	@ 0xd9
 80031a8:	f7ff ff8e 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80031ac:	2022      	movs	r0, #34	@ 0x22
 80031ae:	f7ff ff8b 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80031b2:	20da      	movs	r0, #218	@ 0xda
 80031b4:	f7ff ff88 	bl	80030c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80031b8:	2012      	movs	r0, #18
 80031ba:	f7ff ff85 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80031be:	20db      	movs	r0, #219	@ 0xdb
 80031c0:	f7ff ff82 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80031c4:	2020      	movs	r0, #32
 80031c6:	f7ff ff7f 	bl	80030c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80031ca:	208d      	movs	r0, #141	@ 0x8d
 80031cc:	f7ff ff7c 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80031d0:	2014      	movs	r0, #20
 80031d2:	f7ff ff79 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80031d6:	2001      	movs	r0, #1
 80031d8:	f000 f988 	bl	80034ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80031dc:	2000      	movs	r0, #0
 80031de:	f000 f80f 	bl	8003200 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80031e2:	f000 f825 	bl	8003230 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <ssd1306_Init+0xd0>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80031ec:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <ssd1306_Init+0xd0>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80031f2:	4b02      	ldr	r3, [pc, #8]	@ (80031fc <ssd1306_Init+0xd0>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	711a      	strb	r2, [r3, #4]
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000830 	.word	0x20000830

08003200 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <ssd1306_Fill+0x14>
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <ssd1306_Fill+0x16>
 8003214:	23ff      	movs	r3, #255	@ 0xff
 8003216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800321a:	4619      	mov	r1, r3
 800321c:	4803      	ldr	r0, [pc, #12]	@ (800322c <ssd1306_Fill+0x2c>)
 800321e:	f006 f9a8 	bl	8009572 <memset>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000430 	.word	0x20000430

08003230 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003236:	2300      	movs	r3, #0
 8003238:	71fb      	strb	r3, [r7, #7]
 800323a:	e016      	b.n	800326a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	3b50      	subs	r3, #80	@ 0x50
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ff40 	bl	80030c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003248:	2000      	movs	r0, #0
 800324a:	f7ff ff3d 	bl	80030c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800324e:	2010      	movs	r0, #16
 8003250:	f7ff ff3a 	bl	80030c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	01db      	lsls	r3, r3, #7
 8003258:	4a08      	ldr	r2, [pc, #32]	@ (800327c <ssd1306_UpdateScreen+0x4c>)
 800325a:	4413      	add	r3, r2
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ff4a 	bl	80030f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	3301      	adds	r3, #1
 8003268:	71fb      	strb	r3, [r7, #7]
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b07      	cmp	r3, #7
 800326e:	d9e5      	bls.n	800323c <ssd1306_UpdateScreen+0xc>
    }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000430 	.word	0x20000430

08003280 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
 800328a:	460b      	mov	r3, r1
 800328c:	71bb      	strb	r3, [r7, #6]
 800328e:	4613      	mov	r3, r2
 8003290:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	db3d      	blt.n	8003316 <ssd1306_DrawPixel+0x96>
 800329a:	79bb      	ldrb	r3, [r7, #6]
 800329c:	2b3f      	cmp	r3, #63	@ 0x3f
 800329e:	d83a      	bhi.n	8003316 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80032a0:	797b      	ldrb	r3, [r7, #5]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d11a      	bne.n	80032dc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80032a6:	79fa      	ldrb	r2, [r7, #7]
 80032a8:	79bb      	ldrb	r3, [r7, #6]
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	b2d8      	uxtb	r0, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	01db      	lsls	r3, r3, #7
 80032b2:	4413      	add	r3, r2
 80032b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003324 <ssd1306_DrawPixel+0xa4>)
 80032b6:	5cd3      	ldrb	r3, [r2, r3]
 80032b8:	b25a      	sxtb	r2, r3
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	4313      	orrs	r3, r2
 80032ca:	b259      	sxtb	r1, r3
 80032cc:	79fa      	ldrb	r2, [r7, #7]
 80032ce:	4603      	mov	r3, r0
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	4413      	add	r3, r2
 80032d4:	b2c9      	uxtb	r1, r1
 80032d6:	4a13      	ldr	r2, [pc, #76]	@ (8003324 <ssd1306_DrawPixel+0xa4>)
 80032d8:	54d1      	strb	r1, [r2, r3]
 80032da:	e01d      	b.n	8003318 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80032dc:	79fa      	ldrb	r2, [r7, #7]
 80032de:	79bb      	ldrb	r3, [r7, #6]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	b2d8      	uxtb	r0, r3
 80032e4:	4603      	mov	r3, r0
 80032e6:	01db      	lsls	r3, r3, #7
 80032e8:	4413      	add	r3, r2
 80032ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003324 <ssd1306_DrawPixel+0xa4>)
 80032ec:	5cd3      	ldrb	r3, [r2, r3]
 80032ee:	b25a      	sxtb	r2, r3
 80032f0:	79bb      	ldrb	r3, [r7, #6]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	2101      	movs	r1, #1
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	b25b      	sxtb	r3, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	b25b      	sxtb	r3, r3
 8003302:	4013      	ands	r3, r2
 8003304:	b259      	sxtb	r1, r3
 8003306:	79fa      	ldrb	r2, [r7, #7]
 8003308:	4603      	mov	r3, r0
 800330a:	01db      	lsls	r3, r3, #7
 800330c:	4413      	add	r3, r2
 800330e:	b2c9      	uxtb	r1, r1
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <ssd1306_DrawPixel+0xa4>)
 8003312:	54d1      	strb	r1, [r2, r3]
 8003314:	e000      	b.n	8003318 <ssd1306_DrawPixel+0x98>
        return;
 8003316:	bf00      	nop
    }
}
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000430 	.word	0x20000430

08003328 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	@ 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	4604      	mov	r4, r0
 8003330:	4638      	mov	r0, r7
 8003332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003336:	4623      	mov	r3, r4
 8003338:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b1f      	cmp	r3, #31
 800333e:	d902      	bls.n	8003346 <ssd1306_WriteChar+0x1e>
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b7e      	cmp	r3, #126	@ 0x7e
 8003344:	d901      	bls.n	800334a <ssd1306_WriteChar+0x22>
        return 0;
 8003346:	2300      	movs	r3, #0
 8003348:	e077      	b.n	800343a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800334a:	4b3e      	ldr	r3, [pc, #248]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	783b      	ldrb	r3, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	2b80      	cmp	r3, #128	@ 0x80
 8003356:	dc06      	bgt.n	8003366 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003358:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 800335a:	885b      	ldrh	r3, [r3, #2]
 800335c:	461a      	mov	r2, r3
 800335e:	787b      	ldrb	r3, [r7, #1]
 8003360:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003362:	2b40      	cmp	r3, #64	@ 0x40
 8003364:	dd01      	ble.n	800336a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003366:	2300      	movs	r3, #0
 8003368:	e067      	b.n	800343a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e04e      	b.n	800340e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	3b20      	subs	r3, #32
 8003376:	7879      	ldrb	r1, [r7, #1]
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4619      	mov	r1, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	440b      	add	r3, r1
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e036      	b.n	80033fe <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80033a0:	4b28      	ldr	r3, [pc, #160]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	4413      	add	r3, r2
 80033ac:	b2d8      	uxtb	r0, r3
 80033ae:	4b25      	ldr	r3, [pc, #148]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 80033b0:	885b      	ldrh	r3, [r3, #2]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7ff ff5d 	bl	8003280 <ssd1306_DrawPixel>
 80033c6:	e017      	b.n	80033f8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80033c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	4413      	add	r3, r2
 80033d4:	b2d8      	uxtb	r0, r3
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 80033d8:	885b      	ldrh	r3, [r3, #2]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	b2d9      	uxtb	r1, r3
 80033e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff ff44 	bl	8003280 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	3301      	adds	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	783b      	ldrb	r3, [r7, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4293      	cmp	r3, r2
 8003406:	d3c3      	bcc.n	8003390 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3301      	adds	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	787b      	ldrb	r3, [r7, #1]
 8003410:	461a      	mov	r2, r3
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4293      	cmp	r3, r2
 8003416:	d3ab      	bcc.n	8003370 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003418:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	2a00      	cmp	r2, #0
 8003420:	d005      	beq.n	800342e <ssd1306_WriteChar+0x106>
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	3a20      	subs	r2, #32
 8003428:	440a      	add	r2, r1
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	e000      	b.n	8003430 <ssd1306_WriteChar+0x108>
 800342e:	783a      	ldrb	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	b29a      	uxth	r2, r3
 8003434:	4b03      	ldr	r3, [pc, #12]	@ (8003444 <ssd1306_WriteChar+0x11c>)
 8003436:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	bf00      	nop
 8003444:	20000830 	.word	0x20000830

08003448 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	4638      	mov	r0, r7
 8003452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003456:	e013      	b.n	8003480 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	7818      	ldrb	r0, [r3, #0]
 800345c:	7e3b      	ldrb	r3, [r7, #24]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	463b      	mov	r3, r7
 8003462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003464:	f7ff ff60 	bl	8003328 <ssd1306_WriteChar>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d002      	beq.n	800347a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	e008      	b.n	800348c <ssd1306_WriteString+0x44>
        }
        str++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3301      	adds	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e7      	bne.n	8003458 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	781b      	ldrb	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	460a      	mov	r2, r1
 800349e:	71fb      	strb	r3, [r7, #7]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <ssd1306_SetCursor+0x2c>)
 80034aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80034ac:	79bb      	ldrb	r3, [r7, #6]
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	4b03      	ldr	r3, [pc, #12]	@ (80034c0 <ssd1306_SetCursor+0x2c>)
 80034b2:	805a      	strh	r2, [r3, #2]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000830 	.word	0x20000830

080034c4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80034ce:	2381      	movs	r3, #129	@ 0x81
 80034d0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fdf7 	bl	80030c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fdf3 	bl	80030c8 <ssd1306_WriteCommand>
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80034fc:	23af      	movs	r3, #175	@ 0xaf
 80034fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003500:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <ssd1306_SetDisplayOn+0x38>)
 8003502:	2201      	movs	r2, #1
 8003504:	715a      	strb	r2, [r3, #5]
 8003506:	e004      	b.n	8003512 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003508:	23ae      	movs	r3, #174	@ 0xae
 800350a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800350c:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <ssd1306_SetDisplayOn+0x38>)
 800350e:	2200      	movs	r2, #0
 8003510:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fdd7 	bl	80030c8 <ssd1306_WriteCommand>
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000830 	.word	0x20000830

08003528 <clean>:

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}

void clean() {
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af02      	add	r7, sp, #8
	ssd1306_WriteString(" ", Font_11x18, Black);
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <clean+0x20>)
 8003530:	2200      	movs	r2, #0
 8003532:	9200      	str	r2, [sp, #0]
 8003534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003536:	4805      	ldr	r0, [pc, #20]	@ (800354c <clean+0x24>)
 8003538:	f7ff ff86 	bl	8003448 <ssd1306_WriteString>
	ssd1306_Fill(Black);
 800353c:	2000      	movs	r0, #0
 800353e:	f7ff fe5f 	bl	8003200 <ssd1306_Fill>

}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	0800e228 	.word	0x0800e228
 800354c:	0800cd38 	.word	0x0800cd38

08003550 <oled_print>:

void oled_print(uint32_t val, char* format, uint8_t x, uint8_t y){
 8003550:	b580      	push	{r7, lr}
 8003552:	b094      	sub	sp, #80	@ 0x50
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	460b      	mov	r3, r1
 8003560:	71fb      	strb	r3, [r7, #7]
 8003562:	4613      	mov	r3, r2
 8003564:	71bb      	strb	r3, [r7, #6]
  	char buffer[50];
  	memset(buffer, 0, sizeof(buffer)); // Limpa o buffer antes de usá-lo=
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	2232      	movs	r2, #50	@ 0x32
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f005 ffff 	bl	8009572 <memset>

  	snprintf(buffer, sizeof(buffer), format, val);
 8003574:	f107 0014 	add.w	r0, r7, #20
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	2132      	movs	r1, #50	@ 0x32
 800357e:	f005 ff47 	bl	8009410 <sniprintf>

  	ssd1306_SetCursor(x, y);
 8003582:	79ba      	ldrb	r2, [r7, #6]
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff83 	bl	8003494 <ssd1306_SetCursor>
  	ssd1306_WriteString(buffer, Font_7x10, White);
 800358e:	4b07      	ldr	r3, [pc, #28]	@ (80035ac <oled_print+0x5c>)
 8003590:	f107 0014 	add.w	r0, r7, #20
 8003594:	2201      	movs	r2, #1
 8003596:	9200      	str	r2, [sp, #0]
 8003598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800359a:	f7ff ff55 	bl	8003448 <ssd1306_WriteString>
  	ssd1306_UpdateScreen();
 800359e:	f7ff fe47 	bl	8003230 <ssd1306_UpdateScreen>
}
 80035a2:	bf00      	nop
 80035a4:	3748      	adds	r7, #72	@ 0x48
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	0800e21c 	.word	0x0800e21c

080035b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <HAL_Init+0x40>)
 80035ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <HAL_Init+0x40>)
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_Init+0x40>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a07      	ldr	r2, [pc, #28]	@ (80035f0 <HAL_Init+0x40>)
 80035d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035d8:	2003      	movs	r0, #3
 80035da:	f000 fc93 	bl	8003f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035de:	2000      	movs	r0, #0
 80035e0:	f000 f808 	bl	80035f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035e4:	f7fe fb04 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00

080035f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035fc:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <HAL_InitTick+0x54>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <HAL_InitTick+0x58>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	4619      	mov	r1, r3
 8003606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360a:	fbb3 f3f1 	udiv	r3, r3, r1
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fcab 	bl	8003f6e <HAL_SYSTICK_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00e      	b.n	8003640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d80a      	bhi.n	800363e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003628:	2200      	movs	r2, #0
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f000 fc73 	bl	8003f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003634:	4a06      	ldr	r2, [pc, #24]	@ (8003650 <HAL_InitTick+0x5c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000050 	.word	0x20000050
 800364c:	20000058 	.word	0x20000058
 8003650:	20000054 	.word	0x20000054

08003654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003658:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <HAL_IncTick+0x20>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_IncTick+0x24>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4413      	add	r3, r2
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <HAL_IncTick+0x24>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000058 	.word	0x20000058
 8003678:	20000838 	.word	0x20000838

0800367c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return uwTick;
 8003680:	4b03      	ldr	r3, [pc, #12]	@ (8003690 <HAL_GetTick+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000838 	.word	0x20000838

08003694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff ffee 	bl	800367c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d005      	beq.n	80036ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <HAL_Delay+0x44>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ba:	bf00      	nop
 80036bc:	f7ff ffde 	bl	800367c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d8f7      	bhi.n	80036bc <HAL_Delay+0x28>
  {
  }
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000058 	.word	0x20000058

080036dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e033      	b.n	800375a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fd34 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003722:	f023 0302 	bic.w	r3, r3, #2
 8003726:	f043 0202 	orr.w	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa1c 	bl	8003b6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
 800374a:	e001      	b.n	8003750 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003758:	7bfb      	ldrb	r3, [r7, #15]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_ADC_Start+0x1a>
 800377a:	2302      	movs	r3, #2
 800377c:	e0b2      	b.n	80038e4 <HAL_ADC_Start+0x180>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d018      	beq.n	80037c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037a4:	4b52      	ldr	r3, [pc, #328]	@ (80038f0 <HAL_ADC_Start+0x18c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a52      	ldr	r2, [pc, #328]	@ (80038f4 <HAL_ADC_Start+0x190>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0c9a      	lsrs	r2, r3, #18
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80037b8:	e002      	b.n	80037c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f9      	bne.n	80037ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d17a      	bne.n	80038ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003812:	d106      	bne.n	8003822 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	f023 0206 	bic.w	r2, r3, #6
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003820:	e002      	b.n	8003828 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003830:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_ADC_Start+0x194>)
 8003832:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800383c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2b00      	cmp	r3, #0
 8003848:	d12a      	bne.n	80038a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2b      	ldr	r2, [pc, #172]	@ (80038fc <HAL_ADC_Start+0x198>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d015      	beq.n	8003880 <HAL_ADC_Start+0x11c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a29      	ldr	r2, [pc, #164]	@ (8003900 <HAL_ADC_Start+0x19c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d105      	bne.n	800386a <HAL_ADC_Start+0x106>
 800385e:	4b26      	ldr	r3, [pc, #152]	@ (80038f8 <HAL_ADC_Start+0x194>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a25      	ldr	r2, [pc, #148]	@ (8003904 <HAL_ADC_Start+0x1a0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d136      	bne.n	80038e2 <HAL_ADC_Start+0x17e>
 8003874:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <HAL_ADC_Start+0x194>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d130      	bne.n	80038e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d129      	bne.n	80038e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	e020      	b.n	80038e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a15      	ldr	r2, [pc, #84]	@ (80038fc <HAL_ADC_Start+0x198>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d11b      	bne.n	80038e2 <HAL_ADC_Start+0x17e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d114      	bne.n	80038e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	e00b      	b.n	80038e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	f043 0210 	orr.w	r2, r3, #16
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	20000050 	.word	0x20000050
 80038f4:	431bde83 	.word	0x431bde83
 80038f8:	40012300 	.word	0x40012300
 80038fc:	40012000 	.word	0x40012000
 8003900:	40012100 	.word	0x40012100
 8003904:	40012200 	.word	0x40012200

08003908 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1c>
 8003920:	2302      	movs	r3, #2
 8003922:	e113      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x244>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b09      	cmp	r3, #9
 8003932:	d925      	bls.n	8003980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68d9      	ldr	r1, [r3, #12]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	3b1e      	subs	r3, #30
 800394a:	2207      	movs	r2, #7
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43da      	mvns	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	400a      	ands	r2, r1
 8003958:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68d9      	ldr	r1, [r3, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	4618      	mov	r0, r3
 800396c:	4603      	mov	r3, r0
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4403      	add	r3, r0
 8003972:	3b1e      	subs	r3, #30
 8003974:	409a      	lsls	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	e022      	b.n	80039c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6919      	ldr	r1, [r3, #16]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	2207      	movs	r2, #7
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6919      	ldr	r1, [r3, #16]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4618      	mov	r0, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4403      	add	r3, r0
 80039bc:	409a      	lsls	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d824      	bhi.n	8003a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	3b05      	subs	r3, #5
 80039e0:	221f      	movs	r2, #31
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	3b05      	subs	r3, #5
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a16:	e04c      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d824      	bhi.n	8003a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b23      	subs	r3, #35	@ 0x23
 8003a32:	221f      	movs	r2, #31
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	400a      	ands	r2, r1
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	3b23      	subs	r3, #35	@ 0x23
 8003a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a68:	e023      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b41      	subs	r3, #65	@ 0x41
 8003a7c:	221f      	movs	r2, #31
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	400a      	ands	r2, r1
 8003a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3b41      	subs	r3, #65	@ 0x41
 8003aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab2:	4b29      	ldr	r3, [pc, #164]	@ (8003b58 <HAL_ADC_ConfigChannel+0x250>)
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a28      	ldr	r2, [pc, #160]	@ (8003b5c <HAL_ADC_ConfigChannel+0x254>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d10f      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1d8>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b5c <HAL_ADC_ConfigChannel+0x254>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d12b      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x23a>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_ADC_ConfigChannel+0x258>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <HAL_ADC_ConfigChannel+0x1f4>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b11      	cmp	r3, #17
 8003afa:	d122      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a11      	ldr	r2, [pc, #68]	@ (8003b60 <HAL_ADC_ConfigChannel+0x258>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d111      	bne.n	8003b42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b1e:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_ADC_ConfigChannel+0x25c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <HAL_ADC_ConfigChannel+0x260>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0c9a      	lsrs	r2, r3, #18
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b34:	e002      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f9      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	40012000 	.word	0x40012000
 8003b60:	10000012 	.word	0x10000012
 8003b64:	20000050 	.word	0x20000050
 8003b68:	431bde83 	.word	0x431bde83

08003b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b74:	4b79      	ldr	r3, [pc, #484]	@ (8003d5c <ADC_Init+0x1f0>)
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	4a58      	ldr	r2, [pc, #352]	@ (8003d60 <ADC_Init+0x1f4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	e00f      	b.n	8003c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0202 	bic.w	r2, r2, #2
 8003c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7e1b      	ldrb	r3, [r3, #24]
 8003c84:	005a      	lsls	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01b      	beq.n	8003cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	035a      	lsls	r2, r3, #13
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	e007      	b.n	8003ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cde:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	051a      	lsls	r2, r3, #20
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d22:	025a      	lsls	r2, r3, #9
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	029a      	lsls	r2, r3, #10
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40012300 	.word	0x40012300
 8003d60:	0f000001 	.word	0x0f000001

08003d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d74:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d80:	4013      	ands	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d96:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	60d3      	str	r3, [r2, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db0:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	f003 0307 	and.w	r3, r3, #7
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	db0b      	blt.n	8003df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4907      	ldr	r1, [pc, #28]	@ (8003e00 <__NVIC_EnableIRQ+0x38>)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2001      	movs	r0, #1
 8003dea:	fa00 f202 	lsl.w	r2, r0, r2
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db0a      	blt.n	8003e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	490c      	ldr	r1, [pc, #48]	@ (8003e50 <__NVIC_SetPriority+0x4c>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	440b      	add	r3, r1
 8003e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e2c:	e00a      	b.n	8003e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4908      	ldr	r1, [pc, #32]	@ (8003e54 <__NVIC_SetPriority+0x50>)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3b04      	subs	r3, #4
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	761a      	strb	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	@ 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf28      	it	cs
 8003e76:	2304      	movcs	r3, #4
 8003e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d902      	bls.n	8003e88 <NVIC_EncodePriority+0x30>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	e000      	b.n	8003e8a <NVIC_EncodePriority+0x32>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43d9      	mvns	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	4313      	orrs	r3, r2
         );
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	@ 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed0:	d301      	bcc.n	8003ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00f      	b.n	8003ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <SysTick_Config+0x40>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ede:	210f      	movs	r1, #15
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f7ff ff8e 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee8:	4b05      	ldr	r3, [pc, #20]	@ (8003f00 <SysTick_Config+0x40>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eee:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <SysTick_Config+0x40>)
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	e000e010 	.word	0xe000e010

08003f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff29 	bl	8003d64 <__NVIC_SetPriorityGrouping>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff3e 	bl	8003dac <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff8e 	bl	8003e58 <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5d 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff31 	bl	8003dc8 <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa2 	bl	8003ec0 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	@ 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e165      	b.n	8004270 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	f040 8154 	bne.w	800426a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d005      	beq.n	8003fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d130      	bne.n	800403c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 0201 	and.w	r2, r3, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d017      	beq.n	8004078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d123      	bne.n	80040cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	08da      	lsrs	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3208      	adds	r2, #8
 800408c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	08da      	lsrs	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3208      	adds	r2, #8
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0203 	and.w	r2, r3, #3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80ae 	beq.w	800426a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	4b5d      	ldr	r3, [pc, #372]	@ (8004288 <HAL_GPIO_Init+0x300>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	4a5c      	ldr	r2, [pc, #368]	@ (8004288 <HAL_GPIO_Init+0x300>)
 8004118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800411c:	6453      	str	r3, [r2, #68]	@ 0x44
 800411e:	4b5a      	ldr	r3, [pc, #360]	@ (8004288 <HAL_GPIO_Init+0x300>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412a:	4a58      	ldr	r2, [pc, #352]	@ (800428c <HAL_GPIO_Init+0x304>)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3302      	adds	r3, #2
 8004132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4f      	ldr	r2, [pc, #316]	@ (8004290 <HAL_GPIO_Init+0x308>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d025      	beq.n	80041a2 <HAL_GPIO_Init+0x21a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4e      	ldr	r2, [pc, #312]	@ (8004294 <HAL_GPIO_Init+0x30c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01f      	beq.n	800419e <HAL_GPIO_Init+0x216>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4d      	ldr	r2, [pc, #308]	@ (8004298 <HAL_GPIO_Init+0x310>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d019      	beq.n	800419a <HAL_GPIO_Init+0x212>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4c      	ldr	r2, [pc, #304]	@ (800429c <HAL_GPIO_Init+0x314>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_GPIO_Init+0x20e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4b      	ldr	r2, [pc, #300]	@ (80042a0 <HAL_GPIO_Init+0x318>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00d      	beq.n	8004192 <HAL_GPIO_Init+0x20a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4a      	ldr	r2, [pc, #296]	@ (80042a4 <HAL_GPIO_Init+0x31c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <HAL_GPIO_Init+0x206>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a49      	ldr	r2, [pc, #292]	@ (80042a8 <HAL_GPIO_Init+0x320>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d101      	bne.n	800418a <HAL_GPIO_Init+0x202>
 8004186:	2306      	movs	r3, #6
 8004188:	e00c      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 800418a:	2307      	movs	r3, #7
 800418c:	e00a      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 800418e:	2305      	movs	r3, #5
 8004190:	e008      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 8004192:	2304      	movs	r3, #4
 8004194:	e006      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 8004196:	2303      	movs	r3, #3
 8004198:	e004      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 800419a:	2302      	movs	r3, #2
 800419c:	e002      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_GPIO_Init+0x21c>
 80041a2:	2300      	movs	r3, #0
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	f002 0203 	and.w	r2, r2, #3
 80041aa:	0092      	lsls	r2, r2, #2
 80041ac:	4093      	lsls	r3, r2
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041b4:	4935      	ldr	r1, [pc, #212]	@ (800428c <HAL_GPIO_Init+0x304>)
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	3302      	adds	r3, #2
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041c2:	4b3a      	ldr	r3, [pc, #232]	@ (80042ac <HAL_GPIO_Init+0x324>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4013      	ands	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041e6:	4a31      	ldr	r2, [pc, #196]	@ (80042ac <HAL_GPIO_Init+0x324>)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041ec:	4b2f      	ldr	r3, [pc, #188]	@ (80042ac <HAL_GPIO_Init+0x324>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004210:	4a26      	ldr	r2, [pc, #152]	@ (80042ac <HAL_GPIO_Init+0x324>)
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004216:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_GPIO_Init+0x324>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_GPIO_Init+0x324>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004240:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <HAL_GPIO_Init+0x324>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004264:	4a11      	ldr	r2, [pc, #68]	@ (80042ac <HAL_GPIO_Init+0x324>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	2b0f      	cmp	r3, #15
 8004274:	f67f ae96 	bls.w	8003fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	3724      	adds	r7, #36	@ 0x24
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	40013800 	.word	0x40013800
 8004290:	40020000 	.word	0x40020000
 8004294:	40020400 	.word	0x40020400
 8004298:	40020800 	.word	0x40020800
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40021400 	.word	0x40021400
 80042a8:	40021800 	.word	0x40021800
 80042ac:	40013c00 	.word	0x40013c00

080042b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	807b      	strh	r3, [r7, #2]
 80042bc:	4613      	mov	r3, r2
 80042be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042cc:	e003      	b.n	80042d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	041a      	lsls	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	619a      	str	r2, [r3, #24]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	460b      	mov	r3, r1
 80042ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042f4:	887a      	ldrh	r2, [r7, #2]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4013      	ands	r3, r2
 80042fa:	041a      	lsls	r2, r3, #16
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	43d9      	mvns	r1, r3
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	400b      	ands	r3, r1
 8004304:	431a      	orrs	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	619a      	str	r2, [r3, #24]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004322:	4b08      	ldr	r3, [pc, #32]	@ (8004344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	88fb      	ldrh	r3, [r7, #6]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800432e:	4a05      	ldr	r2, [pc, #20]	@ (8004344 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fa20 	bl	800177c <HAL_GPIO_EXTI_Callback>
  }
}
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40013c00 	.word	0x40013c00

08004348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e12b      	b.n	80045b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc ffe8 	bl	8001344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	@ 0x24
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800439a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043ac:	f001 f8e2 	bl	8005574 <HAL_RCC_GetPCLK1Freq>
 80043b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a81      	ldr	r2, [pc, #516]	@ (80045bc <HAL_I2C_Init+0x274>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d807      	bhi.n	80043cc <HAL_I2C_Init+0x84>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a80      	ldr	r2, [pc, #512]	@ (80045c0 <HAL_I2C_Init+0x278>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf94      	ite	ls
 80043c4:	2301      	movls	r3, #1
 80043c6:	2300      	movhi	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e006      	b.n	80043da <HAL_I2C_Init+0x92>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a7d      	ldr	r2, [pc, #500]	@ (80045c4 <HAL_I2C_Init+0x27c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bf94      	ite	ls
 80043d4:	2301      	movls	r3, #1
 80043d6:	2300      	movhi	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0e7      	b.n	80045b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a78      	ldr	r2, [pc, #480]	@ (80045c8 <HAL_I2C_Init+0x280>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0c9b      	lsrs	r3, r3, #18
 80043ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a6a      	ldr	r2, [pc, #424]	@ (80045bc <HAL_I2C_Init+0x274>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d802      	bhi.n	800441c <HAL_I2C_Init+0xd4>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3301      	adds	r3, #1
 800441a:	e009      	b.n	8004430 <HAL_I2C_Init+0xe8>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	4a69      	ldr	r2, [pc, #420]	@ (80045cc <HAL_I2C_Init+0x284>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	3301      	adds	r3, #1
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004442:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	495c      	ldr	r1, [pc, #368]	@ (80045bc <HAL_I2C_Init+0x274>)
 800444c:	428b      	cmp	r3, r1
 800444e:	d819      	bhi.n	8004484 <HAL_I2C_Init+0x13c>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e59      	subs	r1, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fbb1 f3f3 	udiv	r3, r1, r3
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004464:	400b      	ands	r3, r1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_I2C_Init+0x138>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1e59      	subs	r1, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fbb1 f3f3 	udiv	r3, r1, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	e051      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004480:	2304      	movs	r3, #4
 8004482:	e04f      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d111      	bne.n	80044b0 <HAL_I2C_Init+0x168>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e012      	b.n	80044d6 <HAL_I2C_Init+0x18e>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1e58      	subs	r0, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	0099      	lsls	r1, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Init+0x196>
 80044da:	2301      	movs	r3, #1
 80044dc:	e022      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10e      	bne.n	8004504 <HAL_I2C_Init+0x1bc>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e58      	subs	r0, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	440b      	add	r3, r1
 80044f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004502:	e00f      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	6809      	ldr	r1, [r1, #0]
 8004528:	4313      	orrs	r3, r2
 800452a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004552:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6911      	ldr	r1, [r2, #16]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	430b      	orrs	r3, r1
 8004566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	000186a0 	.word	0x000186a0
 80045c0:	001e847f 	.word	0x001e847f
 80045c4:	003d08ff 	.word	0x003d08ff
 80045c8:	431bde83 	.word	0x431bde83
 80045cc:	10624dd3 	.word	0x10624dd3

080045d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ea:	f7ff f847 	bl	800367c <HAL_GetTick>
 80045ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	f040 80d9 	bne.w	80047b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2319      	movs	r3, #25
 8004604:	2201      	movs	r2, #1
 8004606:	496d      	ldr	r1, [pc, #436]	@ (80047bc <HAL_I2C_Mem_Write+0x1ec>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fc8b 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
 8004616:	e0cc      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_I2C_Mem_Write+0x56>
 8004622:	2302      	movs	r3, #2
 8004624:	e0c5      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2221      	movs	r2, #33	@ 0x21
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2240      	movs	r2, #64	@ 0x40
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a4d      	ldr	r2, [pc, #308]	@ (80047c0 <HAL_I2C_Mem_Write+0x1f0>)
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468e:	88f8      	ldrh	r0, [r7, #6]
 8004690:	893a      	ldrh	r2, [r7, #8]
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4603      	mov	r3, r0
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fac2 	bl	8004c28 <I2C_RequestMemoryWrite>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d052      	beq.n	8004750 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e081      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fd50 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d107      	bne.n	80046d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06b      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	781a      	ldrb	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d11b      	bne.n	8004750 <HAL_I2C_Mem_Write+0x180>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	d017      	beq.n	8004750 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	781a      	ldrb	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1aa      	bne.n	80046ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fd43 	bl	80051e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	2b04      	cmp	r3, #4
 800476e:	d107      	bne.n	8004780 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800477e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e016      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	00100002 	.word	0x00100002
 80047c0:	ffff0000 	.word	0xffff0000

080047c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	@ 0x30
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	460b      	mov	r3, r1
 80047d8:	813b      	strh	r3, [r7, #8]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047de:	f7fe ff4d 	bl	800367c <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	f040 8214 	bne.w	8004c1a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	2319      	movs	r3, #25
 80047f8:	2201      	movs	r2, #1
 80047fa:	497b      	ldr	r1, [pc, #492]	@ (80049e8 <HAL_I2C_Mem_Read+0x224>)
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 fb91 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
 800480a:	e207      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_I2C_Mem_Read+0x56>
 8004816:	2302      	movs	r3, #2
 8004818:	e200      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d007      	beq.n	8004840 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2222      	movs	r2, #34	@ 0x22
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2240      	movs	r2, #64	@ 0x40
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004870:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a5b      	ldr	r2, [pc, #364]	@ (80049ec <HAL_I2C_Mem_Read+0x228>)
 8004880:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004882:	88f8      	ldrh	r0, [r7, #6]
 8004884:	893a      	ldrh	r2, [r7, #8]
 8004886:	8979      	ldrh	r1, [r7, #10]
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4603      	mov	r3, r0
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa5e 	bl	8004d54 <I2C_RequestMemoryRead>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1bc      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d113      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	623b      	str	r3, [r7, #32]
 80048be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	e190      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d11b      	bne.n	8004912 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e170      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004916:	2b02      	cmp	r3, #2
 8004918:	d11b      	bne.n	8004952 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	e150      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004968:	e144      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800496e:	2b03      	cmp	r3, #3
 8004970:	f200 80f1 	bhi.w	8004b56 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004978:	2b01      	cmp	r3, #1
 800497a:	d123      	bne.n	80049c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800497e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fc79 	bl	8005278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e145      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049c2:	e117      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d14e      	bne.n	8004a6a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	2200      	movs	r2, #0
 80049d4:	4906      	ldr	r1, [pc, #24]	@ (80049f0 <HAL_I2C_Mem_Read+0x22c>)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 faa4 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e11a      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
 80049e6:	bf00      	nop
 80049e8:	00100002 	.word	0x00100002
 80049ec:	ffff0000 	.word	0xffff0000
 80049f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a68:	e0c4      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	496c      	ldr	r1, [pc, #432]	@ (8004c24 <HAL_I2C_Mem_Read+0x460>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fa55 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0cb      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	2200      	movs	r2, #0
 8004ace:	4955      	ldr	r1, [pc, #340]	@ (8004c24 <HAL_I2C_Mem_Read+0x460>)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fa27 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e09d      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b54:	e04e      	b.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fb8c 	bl	8005278 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e058      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d124      	bne.n	8004bf4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d107      	bne.n	8004bc2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f47f aeb6 	bne.w	800496a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	@ 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	00010004 	.word	0x00010004

08004c28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	461a      	mov	r2, r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	817b      	strh	r3, [r7, #10]
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	813b      	strh	r3, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f960 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c78:	d103      	bne.n	8004c82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e05f      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c86:	897b      	ldrh	r3, [r7, #10]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	492d      	ldr	r1, [pc, #180]	@ (8004d50 <I2C_RequestMemoryWrite+0x128>)
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f9bb 	bl	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e04c      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	6a39      	ldr	r1, [r7, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fa46 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d107      	bne.n	8004cea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e02b      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf4:	893b      	ldrh	r3, [r7, #8]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	611a      	str	r2, [r3, #16]
 8004cfe:	e021      	b.n	8004d44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d10:	6a39      	ldr	r1, [r7, #32]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa20 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00d      	beq.n	8004d3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d107      	bne.n	8004d36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e005      	b.n	8004d46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d3a:	893b      	ldrh	r3, [r7, #8]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	00010002 	.word	0x00010002

08004d54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	461a      	mov	r2, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	817b      	strh	r3, [r7, #10]
 8004d66:	460b      	mov	r3, r1
 8004d68:	813b      	strh	r3, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8c2 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004db4:	d103      	bne.n	8004dbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0aa      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dc2:	897b      	ldrh	r3, [r7, #10]
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004dd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	4952      	ldr	r1, [pc, #328]	@ (8004f20 <I2C_RequestMemoryRead+0x1cc>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f91d 	bl	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e097      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f9a8 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00d      	beq.n	8004e2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d107      	bne.n	8004e26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e076      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d105      	bne.n	8004e3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e30:	893b      	ldrh	r3, [r7, #8]
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	611a      	str	r2, [r3, #16]
 8004e3a:	e021      	b.n	8004e80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4c:	6a39      	ldr	r1, [r7, #32]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f982 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d107      	bne.n	8004e72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e050      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e76:	893b      	ldrh	r3, [r7, #8]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e82:	6a39      	ldr	r1, [r7, #32]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f967 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d107      	bne.n	8004ea8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ea6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e035      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f82b 	bl	8004f24 <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ee2:	d103      	bne.n	8004eec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e013      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ef0:	897b      	ldrh	r3, [r7, #10]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	4906      	ldr	r1, [pc, #24]	@ (8004f20 <I2C_RequestMemoryRead+0x1cc>)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f886 	bl	8005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00010002 	.word	0x00010002

08004f24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f34:	e048      	b.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d044      	beq.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3e:	f7fe fb9d 	bl	800367c <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d139      	bne.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	43da      	mvns	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	e00c      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d116      	bne.n	8004fc8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e023      	b.n	8005010 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10d      	bne.n	8004fee <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	43da      	mvns	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	e00c      	b.n	8005008 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	43da      	mvns	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	429a      	cmp	r2, r3
 800500c:	d093      	beq.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005026:	e071      	b.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005036:	d123      	bne.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005046:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	f043 0204 	orr.w	r2, r3, #4
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e067      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d041      	beq.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005088:	f7fe faf8 	bl	800367c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d136      	bne.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10c      	bne.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	43da      	mvns	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e00b      	b.n	80050da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	43da      	mvns	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e021      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d10c      	bne.n	8005130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	43da      	mvns	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4013      	ands	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e00b      	b.n	8005148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	f47f af6d 	bne.w	8005028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005164:	e034      	b.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f8e3 	bl	8005332 <I2C_IsAcknowledgeFailed>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e034      	b.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d028      	beq.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fe fa7d 	bl	800367c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11d      	bne.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519e:	2b80      	cmp	r3, #128	@ 0x80
 80051a0:	d016      	beq.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	f043 0220 	orr.w	r2, r3, #32
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e007      	b.n	80051e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b80      	cmp	r3, #128	@ 0x80
 80051dc:	d1c3      	bne.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f4:	e034      	b.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f89b 	bl	8005332 <I2C_IsAcknowledgeFailed>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e034      	b.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d028      	beq.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fe fa35 	bl	800367c <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11d      	bne.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d016      	beq.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e007      	b.n	8005270 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b04      	cmp	r3, #4
 800526c:	d1c3      	bne.n	80051f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005284:	e049      	b.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d119      	bne.n	80052c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0210 	mvn.w	r2, #16
 800529c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e030      	b.n	800532a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c8:	f7fe f9d8 	bl	800367c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d302      	bcc.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11d      	bne.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b40      	cmp	r3, #64	@ 0x40
 80052ea:	d016      	beq.n	800531a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e007      	b.n	800532a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d1ae      	bne.n	8005286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005348:	d11b      	bne.n	8005382 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005352:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f043 0204 	orr.w	r2, r3, #4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0cc      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b68      	ldr	r3, [pc, #416]	@ (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d90c      	bls.n	80053cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b65      	ldr	r3, [pc, #404]	@ (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ba:	4b63      	ldr	r3, [pc, #396]	@ (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0b8      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d020      	beq.n	800541a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053e4:	4b59      	ldr	r3, [pc, #356]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a58      	ldr	r2, [pc, #352]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053fc:	4b53      	ldr	r3, [pc, #332]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a52      	ldr	r2, [pc, #328]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005408:	4b50      	ldr	r3, [pc, #320]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	494d      	ldr	r1, [pc, #308]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d044      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d107      	bne.n	800543e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	4b47      	ldr	r3, [pc, #284]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d119      	bne.n	800546e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e07f      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d003      	beq.n	800544e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800544a:	2b03      	cmp	r3, #3
 800544c:	d107      	bne.n	800545e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544e:	4b3f      	ldr	r3, [pc, #252]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e06f      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545e:	4b3b      	ldr	r3, [pc, #236]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e067      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800546e:	4b37      	ldr	r3, [pc, #220]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f023 0203 	bic.w	r2, r3, #3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4934      	ldr	r1, [pc, #208]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005480:	f7fe f8fc 	bl	800367c <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	e00a      	b.n	800549e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005488:	f7fe f8f8 	bl	800367c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e04f      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	4b2b      	ldr	r3, [pc, #172]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 020c 	and.w	r2, r3, #12
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d1eb      	bne.n	8005488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d20c      	bcs.n	80054d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b22      	ldr	r3, [pc, #136]	@ (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b20      	ldr	r3, [pc, #128]	@ (8005548 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e032      	b.n	800553e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054e4:	4b19      	ldr	r3, [pc, #100]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4916      	ldr	r1, [pc, #88]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005502:	4b12      	ldr	r3, [pc, #72]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	490e      	ldr	r1, [pc, #56]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005516:	f000 fb6b 	bl	8005bf0 <HAL_RCC_GetSysClockFreq>
 800551a:	4602      	mov	r2, r0
 800551c:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	490a      	ldr	r1, [pc, #40]	@ (8005550 <HAL_RCC_ClockConfig+0x1c0>)
 8005528:	5ccb      	ldrb	r3, [r1, r3]
 800552a:	fa22 f303 	lsr.w	r3, r2, r3
 800552e:	4a09      	ldr	r2, [pc, #36]	@ (8005554 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005532:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <HAL_RCC_ClockConfig+0x1c8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe f85c 	bl	80035f4 <HAL_InitTick>

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40023c00 	.word	0x40023c00
 800554c:	40023800 	.word	0x40023800
 8005550:	0800cd3c 	.word	0x0800cd3c
 8005554:	20000050 	.word	0x20000050
 8005558:	20000054 	.word	0x20000054

0800555c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005560:	4b03      	ldr	r3, [pc, #12]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x14>)
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000050 	.word	0x20000050

08005574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005578:	f7ff fff0 	bl	800555c <HAL_RCC_GetHCLKFreq>
 800557c:	4602      	mov	r2, r0
 800557e:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	0a9b      	lsrs	r3, r3, #10
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	4903      	ldr	r1, [pc, #12]	@ (8005598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	bd80      	pop	{r7, pc}
 8005594:	40023800 	.word	0x40023800
 8005598:	0800cd4c 	.word	0x0800cd4c

0800559c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	@ 0x30
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80055d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055da:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	496c      	ldr	r1, [pc, #432]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80055f2:	2301      	movs	r3, #1
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005602:	4b64      	ldr	r3, [pc, #400]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005608:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	4960      	ldr	r1, [pc, #384]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d017      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005630:	4b58      	ldr	r3, [pc, #352]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005632:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563e:	4955      	ldr	r1, [pc, #340]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800564e:	d101      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8005650:	2301      	movs	r3, #1
 8005652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800565c:	2301      	movs	r3, #1
 800565e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	d017      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800566c:	4b49      	ldr	r3, [pc, #292]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800566e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005672:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567a:	4946      	ldr	r1, [pc, #280]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800568a:	d101      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800568c:	2301      	movs	r3, #1
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8005698:	2301      	movs	r3, #1
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 808a 	beq.w	80057be <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	4a38      	ldr	r2, [pc, #224]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ba:	4b36      	ldr	r3, [pc, #216]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056c6:	4b34      	ldr	r3, [pc, #208]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a33      	ldr	r2, [pc, #204]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80056cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056d2:	f7fd ffd3 	bl	800367c <HAL_GetTick>
 80056d6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056da:	f7fd ffcf 	bl	800367c <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e278      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005798 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0f0      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f8:	4b26      	ldr	r3, [pc, #152]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005700:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02f      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005710:	6a3a      	ldr	r2, [r7, #32]
 8005712:	429a      	cmp	r2, r3
 8005714:	d028      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005716:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800571a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005720:	4b1e      	ldr	r3, [pc, #120]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005726:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800572c:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005732:	4b18      	ldr	r3, [pc, #96]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b01      	cmp	r3, #1
 800573c:	d114      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800573e:	f7fd ff9d 	bl	800367c <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	e00a      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fd ff99 	bl	800367c <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e240      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575c:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ee      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005774:	d114      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005776:	4b07      	ldr	r3, [pc, #28]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578a:	4902      	ldr	r1, [pc, #8]	@ (8005794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]
 8005790:	e00c      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800
 8005798:	40007000 	.word	0x40007000
 800579c:	42470e40 	.word	0x42470e40
 80057a0:	4b4a      	ldr	r3, [pc, #296]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a49      	ldr	r2, [pc, #292]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057aa:	6093      	str	r3, [r2, #8]
 80057ac:	4b47      	ldr	r3, [pc, #284]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b8:	4944      	ldr	r1, [pc, #272]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d004      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80057d0:	4b3f      	ldr	r3, [pc, #252]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80057d2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80057e0:	4b3a      	ldr	r3, [pc, #232]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ee:	4937      	ldr	r1, [pc, #220]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005802:	4b32      	ldr	r3, [pc, #200]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005808:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005810:	492e      	ldr	r1, [pc, #184]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005820:	2b00      	cmp	r3, #0
 8005822:	d011      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005824:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800582a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	4926      	ldr	r1, [pc, #152]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005842:	d101      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8005844:	2301      	movs	r3, #1
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005854:	4b1d      	ldr	r3, [pc, #116]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800585a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005862:	491a      	ldr	r1, [pc, #104]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005872:	2b00      	cmp	r3, #0
 8005874:	d011      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8005876:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800587c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005884:	4911      	ldr	r1, [pc, #68]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005894:	d101      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8005896:	2301      	movs	r3, #1
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	2b01      	cmp	r3, #1
 800589e:	d005      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x310>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a8:	f040 80ff 	bne.w	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058ac:	4b09      	ldr	r3, [pc, #36]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058b2:	f7fd fee3 	bl	800367c <HAL_GetTick>
 80058b6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b8:	e00e      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ba:	f7fd fedf 	bl	800367c <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d907      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e188      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x642>
 80058cc:	40023800 	.word	0x40023800
 80058d0:	424711e0 	.word	0x424711e0
 80058d4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ea      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d009      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005900:	2b00      	cmp	r3, #0
 8005902:	d028      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d124      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800590c:	4b71      	ldr	r3, [pc, #452]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800590e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	3301      	adds	r3, #1
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005924:	0e1b      	lsrs	r3, r3, #24
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	431a      	orrs	r2, r3
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	3b01      	subs	r3, #1
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	071b      	lsls	r3, r3, #28
 800594e:	4961      	ldr	r1, [pc, #388]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005974:	2b00      	cmp	r3, #0
 8005976:	d035      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005980:	d130      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8005982:	4b54      	ldr	r3, [pc, #336]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	3301      	adds	r3, #1
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005994:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800599a:	0f1b      	lsrs	r3, r3, #28
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	019b      	lsls	r3, r3, #6
 80059ac:	431a      	orrs	r2, r3
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	3b01      	subs	r3, #1
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	431a      	orrs	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	071b      	lsls	r3, r3, #28
 80059c4:	4943      	ldr	r1, [pc, #268]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059cc:	4b41      	ldr	r3, [pc, #260]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059d2:	f023 021f 	bic.w	r2, r3, #31
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059da:	3b01      	subs	r3, #1
 80059dc:	493d      	ldr	r1, [pc, #244]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d029      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f8:	d124      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80059fa:	4b36      	ldr	r3, [pc, #216]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80059fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	3301      	adds	r3, #1
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a0c:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a12:	0f1b      	lsrs	r3, r3, #28
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	019b      	lsls	r3, r3, #6
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	041b      	lsls	r3, r3, #16
 8005a30:	431a      	orrs	r2, r3
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	061b      	lsls	r3, r3, #24
 8005a36:	431a      	orrs	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	071b      	lsls	r3, r3, #28
 8005a3c:	4925      	ldr	r1, [pc, #148]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	019b      	lsls	r3, r3, #6
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	3b01      	subs	r3, #1
 8005a64:	041b      	lsls	r3, r3, #16
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	061b      	lsls	r3, r3, #24
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4917      	ldr	r1, [pc, #92]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a7e:	4b16      	ldr	r3, [pc, #88]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005a80:	2201      	movs	r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a84:	f7fd fdfa 	bl	800367c <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a8c:	f7fd fdf6 	bl	800367c <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e09f      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8005aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 8095 	bne.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab8:	f7fd fde0 	bl	800367c <HAL_GetTick>
 8005abc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005abe:	e00f      	b.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ac0:	f7fd fddc 	bl	800367c <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d908      	bls.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e085      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x642>
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	42470068 	.word	0x42470068
 8005adc:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ae0:	4b41      	ldr	r3, [pc, #260]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aec:	d0e8      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d02b      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d127      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005b16:	4b34      	ldr	r3, [pc, #208]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	3301      	adds	r3, #1
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	431a      	orrs	r2, r3
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	085b      	lsrs	r3, r3, #1
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	041b      	lsls	r3, r3, #16
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b42:	061b      	lsls	r3, r3, #24
 8005b44:	4928      	ldr	r1, [pc, #160]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b4c:	4b26      	ldr	r3, [pc, #152]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b52:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	4922      	ldr	r1, [pc, #136]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01d      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b7a:	d118      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b82:	0e1b      	lsrs	r3, r3, #24
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	019b      	lsls	r3, r3, #6
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	041b      	lsls	r3, r3, #16
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	4910      	ldr	r1, [pc, #64]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bae:	4b0f      	ldr	r3, [pc, #60]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb4:	f7fd fd62 	bl	800367c <HAL_GetTick>
 8005bb8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bbc:	f7fd fd5e 	bl	800367c <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e007      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bce:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bda:	d1ef      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3730      	adds	r7, #48	@ 0x30
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800
 8005bec:	42470070 	.word	0x42470070

08005bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b0ae      	sub	sp, #184	@ 0xb8
 8005bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c16:	4bcb      	ldr	r3, [pc, #812]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	f200 8206 	bhi.w	8006030 <HAL_RCC_GetSysClockFreq+0x440>
 8005c24:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c61 	.word	0x08005c61
 8005c30:	08006031 	.word	0x08006031
 8005c34:	08006031 	.word	0x08006031
 8005c38:	08006031 	.word	0x08006031
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	08006031 	.word	0x08006031
 8005c44:	08006031 	.word	0x08006031
 8005c48:	08006031 	.word	0x08006031
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08006031 	.word	0x08006031
 8005c54:	08006031 	.word	0x08006031
 8005c58:	08006031 	.word	0x08006031
 8005c5c:	08005e61 	.word	0x08005e61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c60:	4bb9      	ldr	r3, [pc, #740]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x358>)
 8005c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c66:	e1e7      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c68:	4bb8      	ldr	r3, [pc, #736]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c6e:	e1e3      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c70:	4bb4      	ldr	r3, [pc, #720]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c7c:	4bb1      	ldr	r3, [pc, #708]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d071      	beq.n	8005d6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c88:	4bae      	ldr	r3, [pc, #696]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	099b      	lsrs	r3, r3, #6
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c94:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005caa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cae:	4622      	mov	r2, r4
 8005cb0:	462b      	mov	r3, r5
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	0159      	lsls	r1, r3, #5
 8005cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cc0:	0150      	lsls	r0, r2, #5
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	1a51      	subs	r1, r2, r1
 8005cca:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ccc:	4629      	mov	r1, r5
 8005cce:	eb63 0301 	sbc.w	r3, r3, r1
 8005cd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd4:	f04f 0200 	mov.w	r2, #0
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	018b      	lsls	r3, r1, #6
 8005ce4:	4641      	mov	r1, r8
 8005ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cea:	4641      	mov	r1, r8
 8005cec:	018a      	lsls	r2, r1, #6
 8005cee:	4641      	mov	r1, r8
 8005cf0:	1a51      	subs	r1, r2, r1
 8005cf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005d08:	4649      	mov	r1, r9
 8005d0a:	00cb      	lsls	r3, r1, #3
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d12:	4641      	mov	r1, r8
 8005d14:	00ca      	lsls	r2, r1, #3
 8005d16:	4610      	mov	r0, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	189b      	adds	r3, r3, r2
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d22:	462b      	mov	r3, r5
 8005d24:	460a      	mov	r2, r1
 8005d26:	eb42 0303 	adc.w	r3, r2, r3
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d38:	4629      	mov	r1, r5
 8005d3a:	024b      	lsls	r3, r1, #9
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d42:	4621      	mov	r1, r4
 8005d44:	024a      	lsls	r2, r1, #9
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005d5c:	f7fb f804 	bl	8000d68 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4613      	mov	r3, r2
 8005d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d6a:	e067      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6c:	4b75      	ldr	r3, [pc, #468]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	099b      	lsrs	r3, r3, #6
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d78:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d86:	2300      	movs	r3, #0
 8005d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	f04f 0000 	mov.w	r0, #0
 8005d96:	f04f 0100 	mov.w	r1, #0
 8005d9a:	0159      	lsls	r1, r3, #5
 8005d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005da0:	0150      	lsls	r0, r2, #5
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4621      	mov	r1, r4
 8005da8:	1a51      	subs	r1, r2, r1
 8005daa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005dac:	4629      	mov	r1, r5
 8005dae:	eb63 0301 	sbc.w	r3, r3, r1
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	018b      	lsls	r3, r1, #6
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dca:	4641      	mov	r1, r8
 8005dcc:	018a      	lsls	r2, r1, #6
 8005dce:	4641      	mov	r1, r8
 8005dd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005de6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dee:	4692      	mov	sl, r2
 8005df0:	469b      	mov	fp, r3
 8005df2:	4623      	mov	r3, r4
 8005df4:	eb1a 0303 	adds.w	r3, sl, r3
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005e0e:	4629      	mov	r1, r5
 8005e10:	028b      	lsls	r3, r1, #10
 8005e12:	4621      	mov	r1, r4
 8005e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e18:	4621      	mov	r1, r4
 8005e1a:	028a      	lsls	r2, r1, #10
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e24:	2200      	movs	r2, #0
 8005e26:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e28:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005e2e:	f7fa ff9b 	bl	8000d68 <__aeabi_uldivmod>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4613      	mov	r3, r2
 8005e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e3c:	4b41      	ldr	r3, [pc, #260]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	3301      	adds	r3, #1
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e5e:	e0eb      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e60:	4b38      	ldr	r3, [pc, #224]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e6c:	4b35      	ldr	r3, [pc, #212]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d06b      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e78:	4b32      	ldr	r3, [pc, #200]	@ (8005f44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	099b      	lsrs	r3, r3, #6
 8005e7e:	2200      	movs	r2, #0
 8005e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005e94:	4622      	mov	r2, r4
 8005e96:	462b      	mov	r3, r5
 8005e98:	f04f 0000 	mov.w	r0, #0
 8005e9c:	f04f 0100 	mov.w	r1, #0
 8005ea0:	0159      	lsls	r1, r3, #5
 8005ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ea6:	0150      	lsls	r0, r2, #5
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4621      	mov	r1, r4
 8005eae:	1a51      	subs	r1, r2, r1
 8005eb0:	61b9      	str	r1, [r7, #24]
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	eb63 0301 	sbc.w	r3, r3, r1
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ec6:	4659      	mov	r1, fp
 8005ec8:	018b      	lsls	r3, r1, #6
 8005eca:	4651      	mov	r1, sl
 8005ecc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ed0:	4651      	mov	r1, sl
 8005ed2:	018a      	lsls	r2, r1, #6
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	ebb2 0801 	subs.w	r8, r2, r1
 8005eda:	4659      	mov	r1, fp
 8005edc:	eb63 0901 	sbc.w	r9, r3, r1
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ef0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ef4:	4690      	mov	r8, r2
 8005ef6:	4699      	mov	r9, r3
 8005ef8:	4623      	mov	r3, r4
 8005efa:	eb18 0303 	adds.w	r3, r8, r3
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	462b      	mov	r3, r5
 8005f02:	eb49 0303 	adc.w	r3, r9, r3
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005f14:	4629      	mov	r1, r5
 8005f16:	024b      	lsls	r3, r1, #9
 8005f18:	4621      	mov	r1, r4
 8005f1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f1e:	4621      	mov	r1, r4
 8005f20:	024a      	lsls	r2, r1, #9
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f2e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005f30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f34:	f7fa ff18 	bl	8000d68 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f42:	e065      	b.n	8006010 <HAL_RCC_GetSysClockFreq+0x420>
 8005f44:	40023800 	.word	0x40023800
 8005f48:	00f42400 	.word	0x00f42400
 8005f4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f50:	4b3d      	ldr	r3, [pc, #244]	@ (8006048 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	099b      	lsrs	r3, r3, #6
 8005f56:	2200      	movs	r2, #0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f60:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f62:	2300      	movs	r3, #0
 8005f64:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f7c:	0150      	lsls	r0, r2, #5
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4641      	mov	r1, r8
 8005f84:	1a51      	subs	r1, r2, r1
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	4649      	mov	r1, r9
 8005f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	018b      	lsls	r3, r1, #6
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	018a      	lsls	r2, r1, #6
 8005faa:	4651      	mov	r1, sl
 8005fac:	1a54      	subs	r4, r2, r1
 8005fae:	4659      	mov	r1, fp
 8005fb0:	eb63 0501 	sbc.w	r5, r3, r1
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb45 0303 	adc.w	r3, r5, r3
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	028b      	lsls	r3, r1, #10
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fec:	4621      	mov	r1, r4
 8005fee:	028a      	lsls	r2, r1, #10
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005ffe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006002:	f7fa feb1 	bl	8000d68 <__aeabi_uldivmod>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4613      	mov	r3, r2
 800600c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006010:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <HAL_RCC_GetSysClockFreq+0x458>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	0f1b      	lsrs	r3, r3, #28
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800601e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006022:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800602e:	e003      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006030:	4b06      	ldr	r3, [pc, #24]	@ (800604c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006032:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006036:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006038:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800603c:	4618      	mov	r0, r3
 800603e:	37b8      	adds	r7, #184	@ 0xb8
 8006040:	46bd      	mov	sp, r7
 8006042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006046:	bf00      	nop
 8006048:	40023800 	.word	0x40023800
 800604c:	00f42400 	.word	0x00f42400

08006050 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e28d      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8083 	beq.w	8006176 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006070:	4b94      	ldr	r3, [pc, #592]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b04      	cmp	r3, #4
 800607a:	d019      	beq.n	80060b0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800607c:	4b91      	ldr	r3, [pc, #580]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 030c 	and.w	r3, r3, #12
        || \
 8006084:	2b08      	cmp	r3, #8
 8006086:	d106      	bne.n	8006096 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006088:	4b8e      	ldr	r3, [pc, #568]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006090:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006094:	d00c      	beq.n	80060b0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006096:	4b8b      	ldr	r3, [pc, #556]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800609e:	2b0c      	cmp	r3, #12
 80060a0:	d112      	bne.n	80060c8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060a2:	4b88      	ldr	r3, [pc, #544]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060ae:	d10b      	bne.n	80060c8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b0:	4b84      	ldr	r3, [pc, #528]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d05b      	beq.n	8006174 <HAL_RCC_OscConfig+0x124>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d157      	bne.n	8006174 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e25a      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d0:	d106      	bne.n	80060e0 <HAL_RCC_OscConfig+0x90>
 80060d2:	4b7c      	ldr	r3, [pc, #496]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a7b      	ldr	r2, [pc, #492]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0xcc>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0xb4>
 80060ea:	4b76      	ldr	r3, [pc, #472]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a75      	ldr	r2, [pc, #468]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b73      	ldr	r3, [pc, #460]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a72      	ldr	r2, [pc, #456]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0xcc>
 8006104:	4b6f      	ldr	r3, [pc, #444]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6e      	ldr	r2, [pc, #440]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6b      	ldr	r2, [pc, #428]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800611a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fd faaa 	bl	800367c <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800612c:	f7fd faa6 	bl	800367c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	@ 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e21f      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b61      	ldr	r3, [pc, #388]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0xdc>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fd fa96 	bl	800367c <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fd fa92 	bl	800367c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	@ 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e20b      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	4b57      	ldr	r3, [pc, #348]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x104>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d06f      	beq.n	8006262 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006182:	4b50      	ldr	r3, [pc, #320]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b00      	cmp	r3, #0
 800618c:	d017      	beq.n	80061be <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800618e:	4b4d      	ldr	r3, [pc, #308]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
        || \
 8006196:	2b08      	cmp	r3, #8
 8006198:	d105      	bne.n	80061a6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800619a:	4b4a      	ldr	r3, [pc, #296]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a6:	4b47      	ldr	r3, [pc, #284]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80061ae:	2b0c      	cmp	r3, #12
 80061b0:	d11c      	bne.n	80061ec <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061b2:	4b44      	ldr	r3, [pc, #272]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d116      	bne.n	80061ec <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061be:	4b41      	ldr	r3, [pc, #260]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <HAL_RCC_OscConfig+0x186>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d001      	beq.n	80061d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e1d3      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d6:	4b3b      	ldr	r3, [pc, #236]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4937      	ldr	r1, [pc, #220]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ea:	e03a      	b.n	8006262 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d020      	beq.n	8006236 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f4:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <HAL_RCC_OscConfig+0x278>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fa:	f7fd fa3f 	bl	800367c <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006202:	f7fd fa3b 	bl	800367c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e1b4      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006214:	4b2b      	ldr	r3, [pc, #172]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006220:	4b28      	ldr	r3, [pc, #160]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4925      	ldr	r1, [pc, #148]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006230:	4313      	orrs	r3, r2
 8006232:	600b      	str	r3, [r1, #0]
 8006234:	e015      	b.n	8006262 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006236:	4b24      	ldr	r3, [pc, #144]	@ (80062c8 <HAL_RCC_OscConfig+0x278>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623c:	f7fd fa1e 	bl	800367c <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006244:	f7fd fa1a 	bl	800367c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e193      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	4b1b      	ldr	r3, [pc, #108]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f0      	bne.n	8006244 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b00      	cmp	r3, #0
 800626c:	d036      	beq.n	80062dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006276:	4b15      	ldr	r3, [pc, #84]	@ (80062cc <HAL_RCC_OscConfig+0x27c>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627c:	f7fd f9fe 	bl	800367c <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006284:	f7fd f9fa 	bl	800367c <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e173      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006296:	4b0b      	ldr	r3, [pc, #44]	@ (80062c4 <HAL_RCC_OscConfig+0x274>)
 8006298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0x234>
 80062a2:	e01b      	b.n	80062dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a4:	4b09      	ldr	r3, [pc, #36]	@ (80062cc <HAL_RCC_OscConfig+0x27c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062aa:	f7fd f9e7 	bl	800367c <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b0:	e00e      	b.n	80062d0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b2:	f7fd f9e3 	bl	800367c <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d907      	bls.n	80062d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e15c      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
 80062c4:	40023800 	.word	0x40023800
 80062c8:	42470000 	.word	0x42470000
 80062cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062d0:	4b8a      	ldr	r3, [pc, #552]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80062d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1ea      	bne.n	80062b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8097 	beq.w	8006418 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062ea:	2300      	movs	r3, #0
 80062ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ee:	4b83      	ldr	r3, [pc, #524]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10f      	bne.n	800631a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	4b7f      	ldr	r3, [pc, #508]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	4a7e      	ldr	r2, [pc, #504]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006308:	6413      	str	r3, [r2, #64]	@ 0x40
 800630a:	4b7c      	ldr	r3, [pc, #496]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006312:	60bb      	str	r3, [r7, #8]
 8006314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006316:	2301      	movs	r3, #1
 8006318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631a:	4b79      	ldr	r3, [pc, #484]	@ (8006500 <HAL_RCC_OscConfig+0x4b0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006322:	2b00      	cmp	r3, #0
 8006324:	d118      	bne.n	8006358 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006326:	4b76      	ldr	r3, [pc, #472]	@ (8006500 <HAL_RCC_OscConfig+0x4b0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a75      	ldr	r2, [pc, #468]	@ (8006500 <HAL_RCC_OscConfig+0x4b0>)
 800632c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006332:	f7fd f9a3 	bl	800367c <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800633a:	f7fd f99f 	bl	800367c <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e118      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634c:	4b6c      	ldr	r3, [pc, #432]	@ (8006500 <HAL_RCC_OscConfig+0x4b0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <HAL_RCC_OscConfig+0x31e>
 8006360:	4b66      	ldr	r3, [pc, #408]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006364:	4a65      	ldr	r2, [pc, #404]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	6713      	str	r3, [r2, #112]	@ 0x70
 800636c:	e01c      	b.n	80063a8 <HAL_RCC_OscConfig+0x358>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b05      	cmp	r3, #5
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0x340>
 8006376:	4b61      	ldr	r3, [pc, #388]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637a:	4a60      	ldr	r2, [pc, #384]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 800637c:	f043 0304 	orr.w	r3, r3, #4
 8006380:	6713      	str	r3, [r2, #112]	@ 0x70
 8006382:	4b5e      	ldr	r3, [pc, #376]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	4a5d      	ldr	r2, [pc, #372]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	6713      	str	r3, [r2, #112]	@ 0x70
 800638e:	e00b      	b.n	80063a8 <HAL_RCC_OscConfig+0x358>
 8006390:	4b5a      	ldr	r3, [pc, #360]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006394:	4a59      	ldr	r2, [pc, #356]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	6713      	str	r3, [r2, #112]	@ 0x70
 800639c:	4b57      	ldr	r3, [pc, #348]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 800639e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a0:	4a56      	ldr	r2, [pc, #344]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80063a2:	f023 0304 	bic.w	r3, r3, #4
 80063a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d015      	beq.n	80063dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b0:	f7fd f964 	bl	800367c <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b6:	e00a      	b.n	80063ce <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b8:	f7fd f960 	bl	800367c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e0d7      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ce:	4b4b      	ldr	r3, [pc, #300]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0ee      	beq.n	80063b8 <HAL_RCC_OscConfig+0x368>
 80063da:	e014      	b.n	8006406 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fd f94e 	bl	800367c <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e2:	e00a      	b.n	80063fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e4:	f7fd f94a 	bl	800367c <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e0c1      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063fa:	4b40      	ldr	r3, [pc, #256]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1ee      	bne.n	80063e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006406:	7dfb      	ldrb	r3, [r7, #23]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d105      	bne.n	8006418 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800640c:	4b3b      	ldr	r3, [pc, #236]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 800640e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006410:	4a3a      	ldr	r2, [pc, #232]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006416:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80ad 	beq.w	800657c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006422:	4b36      	ldr	r3, [pc, #216]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b08      	cmp	r3, #8
 800642c:	d060      	beq.n	80064f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d145      	bne.n	80064c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006436:	4b33      	ldr	r3, [pc, #204]	@ (8006504 <HAL_RCC_OscConfig+0x4b4>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fd f91e 	bl	800367c <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006444:	f7fd f91a 	bl	800367c <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e093      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006456:	4b29      	ldr	r3, [pc, #164]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69da      	ldr	r2, [r3, #28]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	431a      	orrs	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006470:	019b      	lsls	r3, r3, #6
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	3b01      	subs	r3, #1
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	061b      	lsls	r3, r3, #24
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	491b      	ldr	r1, [pc, #108]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 8006490:	4313      	orrs	r3, r2
 8006492:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006494:	4b1b      	ldr	r3, [pc, #108]	@ (8006504 <HAL_RCC_OscConfig+0x4b4>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800649a:	f7fd f8ef 	bl	800367c <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a2:	f7fd f8eb 	bl	800367c <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e064      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b4:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0f0      	beq.n	80064a2 <HAL_RCC_OscConfig+0x452>
 80064c0:	e05c      	b.n	800657c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c2:	4b10      	ldr	r3, [pc, #64]	@ (8006504 <HAL_RCC_OscConfig+0x4b4>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f7fd f8d8 	bl	800367c <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064d0:	f7fd f8d4 	bl	800367c <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e04d      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e2:	4b06      	ldr	r3, [pc, #24]	@ (80064fc <HAL_RCC_OscConfig+0x4ac>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x480>
 80064ee:	e045      	b.n	800657c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d107      	bne.n	8006508 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e040      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
 80064fc:	40023800 	.word	0x40023800
 8006500:	40007000 	.word	0x40007000
 8006504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006508:	4b1f      	ldr	r3, [pc, #124]	@ (8006588 <HAL_RCC_OscConfig+0x538>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d030      	beq.n	8006578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006520:	429a      	cmp	r2, r3
 8006522:	d129      	bne.n	8006578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800652e:	429a      	cmp	r2, r3
 8006530:	d122      	bne.n	8006578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006538:	4013      	ands	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800653e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006540:	4293      	cmp	r3, r2
 8006542:	d119      	bne.n	8006578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	3b01      	subs	r3, #1
 8006552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006554:	429a      	cmp	r2, r3
 8006556:	d10f      	bne.n	8006578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006564:	429a      	cmp	r2, r3
 8006566:	d107      	bne.n	8006578 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006572:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023800 	.word	0x40023800

0800658c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e073      	b.n	800668a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	7f5b      	ldrb	r3, [r3, #29]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d105      	bne.n	80065b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fb fa4a 	bl	8001a4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d055      	beq.n	8006678 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	22ca      	movs	r2, #202	@ 0xca
 80065d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2253      	movs	r2, #83	@ 0x53
 80065da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb27 	bl	8006c30 <RTC_EnterInitMode>
 80065e2:	4603      	mov	r3, r0
 80065e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d12c      	bne.n	8006646 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68d2      	ldr	r2, [r2, #12]
 8006626:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6919      	ldr	r1, [r3, #16]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	041a      	lsls	r2, r3, #16
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb2e 	bl	8006c9e <RTC_ExitInitMode>
 8006642:	4603      	mov	r3, r0
 8006644:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d110      	bne.n	800666e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800665a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	22ff      	movs	r2, #255	@ 0xff
 8006674:	625a      	str	r2, [r3, #36]	@ 0x24
 8006676:	e001      	b.n	800667c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006692:	b590      	push	{r4, r7, lr}
 8006694:	b087      	sub	sp, #28
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	7f1b      	ldrb	r3, [r3, #28]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_RTC_SetTime+0x1c>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e087      	b.n	80067be <HAL_RTC_SetTime+0x12c>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2202      	movs	r2, #2
 80066b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d126      	bne.n	800670e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2200      	movs	r2, #0
 80066d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fb05 	bl	8006ce8 <RTC_ByteToBcd2>
 80066de:	4603      	mov	r3, r0
 80066e0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fafe 	bl	8006ce8 <RTC_ByteToBcd2>
 80066ec:	4603      	mov	r3, r0
 80066ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066f0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	789b      	ldrb	r3, [r3, #2]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 faf6 	bl	8006ce8 <RTC_ByteToBcd2>
 80066fc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	78db      	ldrb	r3, [r3, #3]
 8006706:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e018      	b.n	8006740 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800672e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006734:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	78db      	ldrb	r3, [r3, #3]
 800673a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	22ca      	movs	r2, #202	@ 0xca
 8006746:	625a      	str	r2, [r3, #36]	@ 0x24
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2253      	movs	r2, #83	@ 0x53
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fa6d 	bl	8006c30 <RTC_EnterInitMode>
 8006756:	4603      	mov	r3, r0
 8006758:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d120      	bne.n	80067a2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800676a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800676e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689a      	ldr	r2, [r3, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800677e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6899      	ldr	r1, [r3, #8]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	431a      	orrs	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa80 	bl	8006c9e <RTC_ExitInitMode>
 800679e:	4603      	mov	r3, r0
 80067a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067a2:	7cfb      	ldrb	r3, [r7, #19]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	22ff      	movs	r2, #255	@ 0xff
 80067b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	771a      	strb	r2, [r3, #28]

  return status;
 80067bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd90      	pop	{r4, r7, pc}

080067c6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067c6:	b590      	push	{r4, r7, lr}
 80067c8:	b087      	sub	sp, #28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	7f1b      	ldrb	r3, [r3, #28]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d101      	bne.n	80067e2 <HAL_RTC_SetDate+0x1c>
 80067de:	2302      	movs	r3, #2
 80067e0:	e071      	b.n	80068c6 <HAL_RTC_SetDate+0x100>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2202      	movs	r2, #2
 80067ec:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10e      	bne.n	8006812 <HAL_RTC_SetDate+0x4c>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	f003 0310 	and.w	r3, r3, #16
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	f023 0310 	bic.w	r3, r3, #16
 8006808:	b2db      	uxtb	r3, r3
 800680a:	330a      	adds	r3, #10
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d11c      	bne.n	8006852 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	78db      	ldrb	r3, [r3, #3]
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fa63 	bl	8006ce8 <RTC_ByteToBcd2>
 8006822:	4603      	mov	r3, r0
 8006824:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fa5c 	bl	8006ce8 <RTC_ByteToBcd2>
 8006830:	4603      	mov	r3, r0
 8006832:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006834:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	789b      	ldrb	r3, [r3, #2]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fa54 	bl	8006ce8 <RTC_ByteToBcd2>
 8006840:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006842:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e00e      	b.n	8006870 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	78db      	ldrb	r3, [r3, #3]
 8006856:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800685e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006864:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	22ca      	movs	r2, #202	@ 0xca
 8006876:	625a      	str	r2, [r3, #36]	@ 0x24
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2253      	movs	r2, #83	@ 0x53
 800687e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f9d5 	bl	8006c30 <RTC_EnterInitMode>
 8006886:	4603      	mov	r3, r0
 8006888:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800688a:	7cfb      	ldrb	r3, [r7, #19]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10c      	bne.n	80068aa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800689a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800689e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f9fc 	bl	8006c9e <RTC_ExitInitMode>
 80068a6:	4603      	mov	r3, r0
 80068a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80068aa:	7cfb      	ldrb	r3, [r7, #19]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d102      	bne.n	80068b6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	22ff      	movs	r2, #255	@ 0xff
 80068bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	771a      	strb	r2, [r3, #28]

  return status;
 80068c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd90      	pop	{r4, r7, pc}
	...

080068d0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b089      	sub	sp, #36	@ 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80068dc:	4b9b      	ldr	r3, [pc, #620]	@ (8006b4c <HAL_RTC_SetAlarm_IT+0x27c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a9b      	ldr	r2, [pc, #620]	@ (8006b50 <HAL_RTC_SetAlarm_IT+0x280>)
 80068e2:	fba2 2303 	umull	r2, r3, r2, r3
 80068e6:	0adb      	lsrs	r3, r3, #11
 80068e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	7f1b      	ldrb	r3, [r3, #28]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d101      	bne.n	8006906 <HAL_RTC_SetAlarm_IT+0x36>
 8006902:	2302      	movs	r3, #2
 8006904:	e11e      	b.n	8006b44 <HAL_RTC_SetAlarm_IT+0x274>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2202      	movs	r2, #2
 8006910:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d137      	bne.n	8006988 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d102      	bne.n	800692c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 f9d9 	bl	8006ce8 <RTC_ByteToBcd2>
 8006936:	4603      	mov	r3, r0
 8006938:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	785b      	ldrb	r3, [r3, #1]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f9d2 	bl	8006ce8 <RTC_ByteToBcd2>
 8006944:	4603      	mov	r3, r0
 8006946:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006948:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	789b      	ldrb	r3, [r3, #2]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f9ca 	bl	8006ce8 <RTC_ByteToBcd2>
 8006954:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006956:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	78db      	ldrb	r3, [r3, #3]
 800695e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006960:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f9bc 	bl	8006ce8 <RTC_ByteToBcd2>
 8006970:	4603      	mov	r3, r0
 8006972:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006974:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800697c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006982:	4313      	orrs	r3, r2
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	e023      	b.n	80069d0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d102      	bne.n	800699c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2200      	movs	r2, #0
 800699a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80069a8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80069ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	78db      	ldrb	r3, [r3, #3]
 80069b4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80069b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80069c0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80069c6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80069cc:	4313      	orrs	r3, r2
 80069ce:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80069d8:	4313      	orrs	r3, r2
 80069da:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	22ca      	movs	r2, #202	@ 0xca
 80069e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2253      	movs	r2, #83	@ 0x53
 80069ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069f4:	d142      	bne.n	8006a7c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a04:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006a16:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	22ff      	movs	r2, #255	@ 0xff
 8006a2a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2203      	movs	r2, #3
 8006a30:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e083      	b.n	8006b44 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0e6      	beq.n	8006a18 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a68:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a78:	609a      	str	r2, [r3, #8]
 8006a7a:	e04c      	b.n	8006b16 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a8a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006a9c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006b4c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8006b50 <HAL_RTC_SetAlarm_IT+0x280>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	0adb      	lsrs	r3, r3, #11
 8006aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	22ff      	movs	r2, #255	@ 0xff
 8006ac6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2203      	movs	r2, #3
 8006acc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e035      	b.n	8006b44 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0e6      	beq.n	8006ab4 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b04:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b14:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006b16:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <HAL_RTC_SetAlarm_IT+0x284>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8006b54 <HAL_RTC_SetAlarm_IT+0x284>)
 8006b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b20:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <HAL_RTC_SetAlarm_IT+0x284>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	4a0b      	ldr	r2, [pc, #44]	@ (8006b54 <HAL_RTC_SetAlarm_IT+0x284>)
 8006b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b2c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	22ff      	movs	r2, #255	@ 0xff
 8006b34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3724      	adds	r7, #36	@ 0x24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd90      	pop	{r4, r7, pc}
 8006b4c:	20000050 	.word	0x20000050
 8006b50:	10624dd3 	.word	0x10624dd3
 8006b54:	40013c00 	.word	0x40013c00

08006b58 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006b60:	4b1f      	ldr	r3, [pc, #124]	@ (8006be0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006b62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006b66:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d012      	beq.n	8006b9c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006b94:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fa fe16 	bl	80017c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d012      	beq.n	8006bd0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006bc8:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8dc 	bl	8006d88 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	775a      	strb	r2, [r3, #29]
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40013c00 	.word	0x40013c00

08006be4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8006c2c <HAL_RTC_WaitForSynchro+0x48>)
 8006bf6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bf8:	f7fc fd40 	bl	800367c <HAL_GetTick>
 8006bfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bfe:	e009      	b.n	8006c14 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c00:	f7fc fd3c 	bl	800367c <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c0e:	d901      	bls.n	8006c14 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e007      	b.n	8006c24 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ee      	beq.n	8006c00 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	00017f5f 	.word	0x00017f5f

08006c30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d122      	bne.n	8006c94 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c5e:	f7fc fd0d 	bl	800367c <HAL_GetTick>
 8006c62:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c64:	e00c      	b.n	8006c80 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c66:	f7fc fd09 	bl	800367c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c74:	d904      	bls.n	8006c80 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <RTC_EnterInitMode+0x64>
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d1e8      	bne.n	8006c66 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cb8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ff8b 	bl	8006be4 <HAL_RTC_WaitForSynchro>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006cf6:	e005      	b.n	8006d04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	3b0a      	subs	r3, #10
 8006d02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d8f6      	bhi.n	8006cf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b2db      	uxtb	r3, r3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3350      	adds	r3, #80	@ 0x50
 8006d3a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	601a      	str	r2, [r3, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3350      	adds	r3, #80	@ 0x50
 8006d6c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e041      	b.n	8006e32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fb fa20 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f000 fec2 	bl	8007b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e041      	b.n	8006ed0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d106      	bne.n	8006e66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f839 	bl	8006ed8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f000 fe73 	bl	8007b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d109      	bne.n	8006f10 <HAL_TIM_PWM_Start+0x24>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	e022      	b.n	8006f56 <HAL_TIM_PWM_Start+0x6a>
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d109      	bne.n	8006f2a <HAL_TIM_PWM_Start+0x3e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	bf14      	ite	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	2300      	moveq	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	e015      	b.n	8006f56 <HAL_TIM_PWM_Start+0x6a>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	d109      	bne.n	8006f44 <HAL_TIM_PWM_Start+0x58>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	bf14      	ite	ne
 8006f3c:	2301      	movne	r3, #1
 8006f3e:	2300      	moveq	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	e008      	b.n	8006f56 <HAL_TIM_PWM_Start+0x6a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e07c      	b.n	8007058 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <HAL_TIM_PWM_Start+0x82>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f6c:	e013      	b.n	8006f96 <HAL_TIM_PWM_Start+0xaa>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x92>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f7c:	e00b      	b.n	8006f96 <HAL_TIM_PWM_Start+0xaa>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_PWM_Start+0xa2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f8c:	e003      	b.n	8006f96 <HAL_TIM_PWM_Start+0xaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2202      	movs	r2, #2
 8006f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 fa00 	bl	80083a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8007060 <HAL_TIM_PWM_Start+0x174>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIM_PWM_Start+0xcc>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8007064 <HAL_TIM_PWM_Start+0x178>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIM_PWM_Start+0xd0>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_TIM_PWM_Start+0xd2>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d007      	beq.n	8006fd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a22      	ldr	r2, [pc, #136]	@ (8007060 <HAL_TIM_PWM_Start+0x174>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe4:	d01d      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1f      	ldr	r2, [pc, #124]	@ (8007068 <HAL_TIM_PWM_Start+0x17c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800706c <HAL_TIM_PWM_Start+0x180>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8007070 <HAL_TIM_PWM_Start+0x184>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a16      	ldr	r2, [pc, #88]	@ (8007064 <HAL_TIM_PWM_Start+0x178>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a18      	ldr	r2, [pc, #96]	@ (8007074 <HAL_TIM_PWM_Start+0x188>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_TIM_PWM_Start+0x136>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a16      	ldr	r2, [pc, #88]	@ (8007078 <HAL_TIM_PWM_Start+0x18c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d111      	bne.n	8007046 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0307 	and.w	r3, r3, #7
 800702c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b06      	cmp	r3, #6
 8007032:	d010      	beq.n	8007056 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007044:	e007      	b.n	8007056 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40010000 	.word	0x40010000
 8007064:	40010400 	.word	0x40010400
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40014000 	.word	0x40014000
 8007078:	40001800 	.word	0x40001800

0800707c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2200      	movs	r2, #0
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f001 f988 	bl	80083a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2e      	ldr	r2, [pc, #184]	@ (8007154 <HAL_TIM_PWM_Stop+0xd8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d004      	beq.n	80070a8 <HAL_TIM_PWM_Stop+0x2c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007158 <HAL_TIM_PWM_Stop+0xdc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d101      	bne.n	80070ac <HAL_TIM_PWM_Stop+0x30>
 80070a8:	2301      	movs	r3, #1
 80070aa:	e000      	b.n	80070ae <HAL_TIM_PWM_Stop+0x32>
 80070ac:	2300      	movs	r3, #0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d017      	beq.n	80070e2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6a1a      	ldr	r2, [r3, #32]
 80070b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10f      	bne.n	80070e2 <HAL_TIM_PWM_Stop+0x66>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6a1a      	ldr	r2, [r3, #32]
 80070c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d107      	bne.n	80070e2 <HAL_TIM_PWM_Stop+0x66>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a1a      	ldr	r2, [r3, #32]
 80070e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10f      	bne.n	8007112 <HAL_TIM_PWM_Stop+0x96>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a1a      	ldr	r2, [r3, #32]
 80070f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d107      	bne.n	8007112 <HAL_TIM_PWM_Stop+0x96>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0201 	bic.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <HAL_TIM_PWM_Stop+0xa6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007120:	e013      	b.n	800714a <HAL_TIM_PWM_Stop+0xce>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b04      	cmp	r3, #4
 8007126:	d104      	bne.n	8007132 <HAL_TIM_PWM_Stop+0xb6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007130:	e00b      	b.n	800714a <HAL_TIM_PWM_Stop+0xce>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d104      	bne.n	8007142 <HAL_TIM_PWM_Stop+0xc6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007140:	e003      	b.n	800714a <HAL_TIM_PWM_Stop+0xce>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400

0800715c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e041      	b.n	80071f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d106      	bne.n	8007188 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f839 	bl	80071fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	4619      	mov	r1, r3
 800719a:	4610      	mov	r0, r2
 800719c:	f000 fce2 	bl	8007b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d104      	bne.n	800722e <HAL_TIM_IC_Start_IT+0x1e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e013      	b.n	8007256 <HAL_TIM_IC_Start_IT+0x46>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b04      	cmp	r3, #4
 8007232:	d104      	bne.n	800723e <HAL_TIM_IC_Start_IT+0x2e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800723a:	b2db      	uxtb	r3, r3
 800723c:	e00b      	b.n	8007256 <HAL_TIM_IC_Start_IT+0x46>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d104      	bne.n	800724e <HAL_TIM_IC_Start_IT+0x3e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800724a:	b2db      	uxtb	r3, r3
 800724c:	e003      	b.n	8007256 <HAL_TIM_IC_Start_IT+0x46>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007254:	b2db      	uxtb	r3, r3
 8007256:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d104      	bne.n	8007268 <HAL_TIM_IC_Start_IT+0x58>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007264:	b2db      	uxtb	r3, r3
 8007266:	e013      	b.n	8007290 <HAL_TIM_IC_Start_IT+0x80>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b04      	cmp	r3, #4
 800726c:	d104      	bne.n	8007278 <HAL_TIM_IC_Start_IT+0x68>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e00b      	b.n	8007290 <HAL_TIM_IC_Start_IT+0x80>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b08      	cmp	r3, #8
 800727c:	d104      	bne.n	8007288 <HAL_TIM_IC_Start_IT+0x78>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007284:	b2db      	uxtb	r3, r3
 8007286:	e003      	b.n	8007290 <HAL_TIM_IC_Start_IT+0x80>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800728e:	b2db      	uxtb	r3, r3
 8007290:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d102      	bne.n	800729e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007298:	7b7b      	ldrb	r3, [r7, #13]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d001      	beq.n	80072a2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e0cc      	b.n	800743c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_IC_Start_IT+0xa2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072b0:	e013      	b.n	80072da <HAL_TIM_IC_Start_IT+0xca>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_IC_Start_IT+0xb2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072c0:	e00b      	b.n	80072da <HAL_TIM_IC_Start_IT+0xca>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_IC_Start_IT+0xc2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2202      	movs	r2, #2
 80072cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072d0:	e003      	b.n	80072da <HAL_TIM_IC_Start_IT+0xca>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2202      	movs	r2, #2
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d104      	bne.n	80072ea <HAL_TIM_IC_Start_IT+0xda>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072e8:	e013      	b.n	8007312 <HAL_TIM_IC_Start_IT+0x102>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b04      	cmp	r3, #4
 80072ee:	d104      	bne.n	80072fa <HAL_TIM_IC_Start_IT+0xea>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072f8:	e00b      	b.n	8007312 <HAL_TIM_IC_Start_IT+0x102>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d104      	bne.n	800730a <HAL_TIM_IC_Start_IT+0xfa>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007308:	e003      	b.n	8007312 <HAL_TIM_IC_Start_IT+0x102>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2202      	movs	r2, #2
 800730e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b0c      	cmp	r3, #12
 8007316:	d841      	bhi.n	800739c <HAL_TIM_IC_Start_IT+0x18c>
 8007318:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <HAL_TIM_IC_Start_IT+0x110>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007355 	.word	0x08007355
 8007324:	0800739d 	.word	0x0800739d
 8007328:	0800739d 	.word	0x0800739d
 800732c:	0800739d 	.word	0x0800739d
 8007330:	08007367 	.word	0x08007367
 8007334:	0800739d 	.word	0x0800739d
 8007338:	0800739d 	.word	0x0800739d
 800733c:	0800739d 	.word	0x0800739d
 8007340:	08007379 	.word	0x08007379
 8007344:	0800739d 	.word	0x0800739d
 8007348:	0800739d 	.word	0x0800739d
 800734c:	0800739d 	.word	0x0800739d
 8007350:	0800738b 	.word	0x0800738b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0202 	orr.w	r2, r2, #2
 8007362:	60da      	str	r2, [r3, #12]
      break;
 8007364:	e01d      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0204 	orr.w	r2, r2, #4
 8007374:	60da      	str	r2, [r3, #12]
      break;
 8007376:	e014      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0208 	orr.w	r2, r2, #8
 8007386:	60da      	str	r2, [r3, #12]
      break;
 8007388:	e00b      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0210 	orr.w	r2, r2, #16
 8007398:	60da      	str	r2, [r3, #12]
      break;
 800739a:	e002      	b.n	80073a2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	73fb      	strb	r3, [r7, #15]
      break;
 80073a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d148      	bne.n	800743a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	6839      	ldr	r1, [r7, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fff7 	bl	80083a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a22      	ldr	r2, [pc, #136]	@ (8007444 <HAL_TIM_IC_Start_IT+0x234>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d022      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c8:	d01d      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007448 <HAL_TIM_IC_Start_IT+0x238>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d018      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1c      	ldr	r2, [pc, #112]	@ (800744c <HAL_TIM_IC_Start_IT+0x23c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007450 <HAL_TIM_IC_Start_IT+0x240>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a19      	ldr	r2, [pc, #100]	@ (8007454 <HAL_TIM_IC_Start_IT+0x244>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a18      	ldr	r2, [pc, #96]	@ (8007458 <HAL_TIM_IC_Start_IT+0x248>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIM_IC_Start_IT+0x1f6>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a16      	ldr	r2, [pc, #88]	@ (800745c <HAL_TIM_IC_Start_IT+0x24c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d111      	bne.n	800742a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b06      	cmp	r3, #6
 8007416:	d010      	beq.n	800743a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	e007      	b.n	800743a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f042 0201 	orr.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40010000 	.word	0x40010000
 8007448:	40000400 	.word	0x40000400
 800744c:	40000800 	.word	0x40000800
 8007450:	40000c00 	.word	0x40000c00
 8007454:	40010400 	.word	0x40010400
 8007458:	40014000 	.word	0x40014000
 800745c:	40001800 	.word	0x40001800

08007460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d020      	beq.n	80074c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0202 	mvn.w	r2, #2
 8007494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fa f99c 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fb38 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fb3f 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d020      	beq.n	8007510 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01b      	beq.n	8007510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0204 	mvn.w	r2, #4
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2202      	movs	r2, #2
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa f976 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fb12 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb19 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b00      	cmp	r3, #0
 8007518:	d020      	beq.n	800755c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01b      	beq.n	800755c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0208 	mvn.w	r2, #8
 800752c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2204      	movs	r2, #4
 8007532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fa f950 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 8007548:	e005      	b.n	8007556 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 faec 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 faf3 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f003 0310 	and.w	r3, r3, #16
 8007562:	2b00      	cmp	r3, #0
 8007564:	d020      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01b      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f06f 0210 	mvn.w	r2, #16
 8007578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2208      	movs	r2, #8
 800757e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fa f92a 	bl	80017e8 <HAL_TIM_IC_CaptureCallback>
 8007594:	e005      	b.n	80075a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fac6 	bl	8007b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 facd 	bl	8007b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00c      	beq.n	80075cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f06f 0201 	mvn.w	r2, #1
 80075c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 faa4 	bl	8007b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00c      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 ffd8 	bl	80085a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00c      	beq.n	8007614 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800760c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fa9e 	bl	8007b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00c      	beq.n	8007638 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0220 	mvn.w	r2, #32
 8007630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 ffaa 	bl	800858c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_TIM_IC_ConfigChannel+0x1e>
 800765a:	2302      	movs	r3, #2
 800765c:	e088      	b.n	8007770 <HAL_TIM_IC_ConfigChannel+0x130>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d11b      	bne.n	80076a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800767c:	f000 fcce 	bl	800801c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 020c 	bic.w	r2, r2, #12
 800768e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6999      	ldr	r1, [r3, #24]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	619a      	str	r2, [r3, #24]
 80076a2:	e060      	b.n	8007766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d11c      	bne.n	80076e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80076ba:	f000 fd52 	bl	8008162 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699a      	ldr	r2, [r3, #24]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80076cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6999      	ldr	r1, [r3, #24]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	021a      	lsls	r2, r3, #8
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	619a      	str	r2, [r3, #24]
 80076e2:	e040      	b.n	8007766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d11b      	bne.n	8007722 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076fa:	f000 fd9f 	bl	800823c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 020c 	bic.w	r2, r2, #12
 800770c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69d9      	ldr	r1, [r3, #28]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	61da      	str	r2, [r3, #28]
 8007720:	e021      	b.n	8007766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b0c      	cmp	r3, #12
 8007726:	d11c      	bne.n	8007762 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007738:	f000 fdbc 	bl	80082b4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800774a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69d9      	ldr	r1, [r3, #28]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	021a      	lsls	r2, r3, #8
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	61da      	str	r2, [r3, #28]
 8007760:	e001      	b.n	8007766 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007792:	2302      	movs	r3, #2
 8007794:	e0ae      	b.n	80078f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	f200 809f 	bhi.w	80078e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077a6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077e1 	.word	0x080077e1
 80077b0:	080078e5 	.word	0x080078e5
 80077b4:	080078e5 	.word	0x080078e5
 80077b8:	080078e5 	.word	0x080078e5
 80077bc:	08007821 	.word	0x08007821
 80077c0:	080078e5 	.word	0x080078e5
 80077c4:	080078e5 	.word	0x080078e5
 80077c8:	080078e5 	.word	0x080078e5
 80077cc:	08007863 	.word	0x08007863
 80077d0:	080078e5 	.word	0x080078e5
 80077d4:	080078e5 	.word	0x080078e5
 80077d8:	080078e5 	.word	0x080078e5
 80077dc:	080078a3 	.word	0x080078a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68b9      	ldr	r1, [r7, #8]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fa68 	bl	8007cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0208 	orr.w	r2, r2, #8
 80077fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0204 	bic.w	r2, r2, #4
 800780a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6999      	ldr	r1, [r3, #24]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	691a      	ldr	r2, [r3, #16]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	619a      	str	r2, [r3, #24]
      break;
 800781e:	e064      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fab8 	bl	8007d9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800783a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800784a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6999      	ldr	r1, [r3, #24]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	021a      	lsls	r2, r3, #8
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	619a      	str	r2, [r3, #24]
      break;
 8007860:	e043      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68b9      	ldr	r1, [r7, #8]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fb0d 	bl	8007e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f042 0208 	orr.w	r2, r2, #8
 800787c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69da      	ldr	r2, [r3, #28]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0204 	bic.w	r2, r2, #4
 800788c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69d9      	ldr	r1, [r3, #28]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	61da      	str	r2, [r3, #28]
      break;
 80078a0:	e023      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fb61 	bl	8007f70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	69d9      	ldr	r1, [r3, #28]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	021a      	lsls	r2, r3, #8
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	61da      	str	r2, [r3, #28]
      break;
 80078e2:	e002      	b.n	80078ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIM_ConfigClockSource+0x1c>
 8007914:	2302      	movs	r3, #2
 8007916:	e0b4      	b.n	8007a82 <HAL_TIM_ConfigClockSource+0x186>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800793e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007950:	d03e      	beq.n	80079d0 <HAL_TIM_ConfigClockSource+0xd4>
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007956:	f200 8087 	bhi.w	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800795e:	f000 8086 	beq.w	8007a6e <HAL_TIM_ConfigClockSource+0x172>
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007966:	d87f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b70      	cmp	r3, #112	@ 0x70
 800796a:	d01a      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0xa6>
 800796c:	2b70      	cmp	r3, #112	@ 0x70
 800796e:	d87b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b60      	cmp	r3, #96	@ 0x60
 8007972:	d050      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x11a>
 8007974:	2b60      	cmp	r3, #96	@ 0x60
 8007976:	d877      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b50      	cmp	r3, #80	@ 0x50
 800797a:	d03c      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0xfa>
 800797c:	2b50      	cmp	r3, #80	@ 0x50
 800797e:	d873      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b40      	cmp	r3, #64	@ 0x40
 8007982:	d058      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x13a>
 8007984:	2b40      	cmp	r3, #64	@ 0x40
 8007986:	d86f      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b30      	cmp	r3, #48	@ 0x30
 800798a:	d064      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b30      	cmp	r3, #48	@ 0x30
 800798e:	d86b      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b20      	cmp	r3, #32
 8007992:	d060      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d867      	bhi.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
 8007998:	2b00      	cmp	r3, #0
 800799a:	d05c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 800799c:	2b10      	cmp	r3, #16
 800799e:	d05a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x15a>
 80079a0:	e062      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079b2:	f000 fcd7 	bl	8008364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	609a      	str	r2, [r3, #8]
      break;
 80079ce:	e04f      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079e0:	f000 fcc0 	bl	8008364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079f2:	609a      	str	r2, [r3, #8]
      break;
 80079f4:	e03c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 fb7e 	bl	8008104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2150      	movs	r1, #80	@ 0x50
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc8d 	bl	800832e <TIM_ITRx_SetConfig>
      break;
 8007a14:	e02c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fbda 	bl	80081dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2160      	movs	r1, #96	@ 0x60
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fc7d 	bl	800832e <TIM_ITRx_SetConfig>
      break;
 8007a34:	e01c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 fb5e 	bl	8008104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	@ 0x40
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fc6d 	bl	800832e <TIM_ITRx_SetConfig>
      break;
 8007a54:	e00c      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f000 fc64 	bl	800832e <TIM_ITRx_SetConfig>
      break;
 8007a66:	e003      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a6c:	e000      	b.n	8007a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b0c      	cmp	r3, #12
 8007a9e:	d831      	bhi.n	8007b04 <HAL_TIM_ReadCapturedValue+0x78>
 8007aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa6:	bf00      	nop
 8007aa8:	08007add 	.word	0x08007add
 8007aac:	08007b05 	.word	0x08007b05
 8007ab0:	08007b05 	.word	0x08007b05
 8007ab4:	08007b05 	.word	0x08007b05
 8007ab8:	08007ae7 	.word	0x08007ae7
 8007abc:	08007b05 	.word	0x08007b05
 8007ac0:	08007b05 	.word	0x08007b05
 8007ac4:	08007b05 	.word	0x08007b05
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007b05 	.word	0x08007b05
 8007ad0:	08007b05 	.word	0x08007b05
 8007ad4:	08007b05 	.word	0x08007b05
 8007ad8:	08007afb 	.word	0x08007afb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae2:	60fb      	str	r3, [r7, #12]

      break;
 8007ae4:	e00f      	b.n	8007b06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aec:	60fb      	str	r3, [r7, #12]

      break;
 8007aee:	e00a      	b.n	8007b06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af6:	60fb      	str	r3, [r7, #12]

      break;
 8007af8:	e005      	b.n	8007b06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b00:	60fb      	str	r3, [r7, #12]

      break;
 8007b02:	e000      	b.n	8007b06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007b04:	bf00      	nop
  }

  return tmpreg;
 8007b06:	68fb      	ldr	r3, [r7, #12]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a46      	ldr	r2, [pc, #280]	@ (8007c90 <TIM_Base_SetConfig+0x12c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a43      	ldr	r2, [pc, #268]	@ (8007c94 <TIM_Base_SetConfig+0x130>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a42      	ldr	r2, [pc, #264]	@ (8007c98 <TIM_Base_SetConfig+0x134>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a41      	ldr	r2, [pc, #260]	@ (8007c9c <TIM_Base_SetConfig+0x138>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a40      	ldr	r2, [pc, #256]	@ (8007ca0 <TIM_Base_SetConfig+0x13c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d108      	bne.n	8007bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a35      	ldr	r2, [pc, #212]	@ (8007c90 <TIM_Base_SetConfig+0x12c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d02b      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc4:	d027      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a32      	ldr	r2, [pc, #200]	@ (8007c94 <TIM_Base_SetConfig+0x130>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d023      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a31      	ldr	r2, [pc, #196]	@ (8007c98 <TIM_Base_SetConfig+0x134>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d01f      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a30      	ldr	r2, [pc, #192]	@ (8007c9c <TIM_Base_SetConfig+0x138>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d01b      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2f      	ldr	r2, [pc, #188]	@ (8007ca0 <TIM_Base_SetConfig+0x13c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d017      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a2e      	ldr	r2, [pc, #184]	@ (8007ca4 <TIM_Base_SetConfig+0x140>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d013      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8007ca8 <TIM_Base_SetConfig+0x144>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00f      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8007cac <TIM_Base_SetConfig+0x148>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00b      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2b      	ldr	r2, [pc, #172]	@ (8007cb0 <TIM_Base_SetConfig+0x14c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d007      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb4 <TIM_Base_SetConfig+0x150>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a29      	ldr	r2, [pc, #164]	@ (8007cb8 <TIM_Base_SetConfig+0x154>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d108      	bne.n	8007c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a10      	ldr	r2, [pc, #64]	@ (8007c90 <TIM_Base_SetConfig+0x12c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_Base_SetConfig+0xf8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a12      	ldr	r2, [pc, #72]	@ (8007ca0 <TIM_Base_SetConfig+0x13c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d103      	bne.n	8007c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f023 0201 	bic.w	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	611a      	str	r2, [r3, #16]
  }
}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800
 8007c9c:	40000c00 	.word	0x40000c00
 8007ca0:	40010400 	.word	0x40010400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800
 8007cb0:	40001800 	.word	0x40001800
 8007cb4:	40001c00 	.word	0x40001c00
 8007cb8:	40002000 	.word	0x40002000

08007cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a1b      	ldr	r3, [r3, #32]
 8007cd0:	f023 0201 	bic.w	r2, r3, #1
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f023 0302 	bic.w	r3, r3, #2
 8007d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a20      	ldr	r2, [pc, #128]	@ (8007d94 <TIM_OC1_SetConfig+0xd8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC1_SetConfig+0x64>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d98 <TIM_OC1_SetConfig+0xdc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10c      	bne.n	8007d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0308 	bic.w	r3, r3, #8
 8007d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 0304 	bic.w	r3, r3, #4
 8007d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a15      	ldr	r2, [pc, #84]	@ (8007d94 <TIM_OC1_SetConfig+0xd8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d003      	beq.n	8007d4a <TIM_OC1_SetConfig+0x8e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a14      	ldr	r2, [pc, #80]	@ (8007d98 <TIM_OC1_SetConfig+0xdc>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d111      	bne.n	8007d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	621a      	str	r2, [r3, #32]
}
 8007d88:	bf00      	nop
 8007d8a:	371c      	adds	r7, #28
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40010400 	.word	0x40010400

08007d9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	f023 0210 	bic.w	r2, r3, #16
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0320 	bic.w	r3, r3, #32
 8007de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a22      	ldr	r2, [pc, #136]	@ (8007e80 <TIM_OC2_SetConfig+0xe4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d003      	beq.n	8007e04 <TIM_OC2_SetConfig+0x68>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a21      	ldr	r2, [pc, #132]	@ (8007e84 <TIM_OC2_SetConfig+0xe8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d10d      	bne.n	8007e20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a17      	ldr	r2, [pc, #92]	@ (8007e80 <TIM_OC2_SetConfig+0xe4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC2_SetConfig+0x94>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a16      	ldr	r2, [pc, #88]	@ (8007e84 <TIM_OC2_SetConfig+0xe8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d113      	bne.n	8007e58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40010400 	.word	0x40010400

08007e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a21      	ldr	r2, [pc, #132]	@ (8007f68 <TIM_OC3_SetConfig+0xe0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_OC3_SetConfig+0x66>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a20      	ldr	r2, [pc, #128]	@ (8007f6c <TIM_OC3_SetConfig+0xe4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d10d      	bne.n	8007f0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a16      	ldr	r2, [pc, #88]	@ (8007f68 <TIM_OC3_SetConfig+0xe0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d003      	beq.n	8007f1a <TIM_OC3_SetConfig+0x92>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a15      	ldr	r2, [pc, #84]	@ (8007f6c <TIM_OC3_SetConfig+0xe4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d113      	bne.n	8007f42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40010000 	.word	0x40010000
 8007f6c:	40010400 	.word	0x40010400

08007f70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	031b      	lsls	r3, r3, #12
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a12      	ldr	r2, [pc, #72]	@ (8008014 <TIM_OC4_SetConfig+0xa4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_OC4_SetConfig+0x68>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a11      	ldr	r2, [pc, #68]	@ (8008018 <TIM_OC4_SetConfig+0xa8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d109      	bne.n	8007fec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	019b      	lsls	r3, r3, #6
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40010400 	.word	0x40010400

0800801c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	f023 0201 	bic.w	r2, r3, #1
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4a28      	ldr	r2, [pc, #160]	@ (80080e8 <TIM_TI1_SetConfig+0xcc>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01b      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008050:	d017      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a25      	ldr	r2, [pc, #148]	@ (80080ec <TIM_TI1_SetConfig+0xd0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	4a24      	ldr	r2, [pc, #144]	@ (80080f0 <TIM_TI1_SetConfig+0xd4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00f      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4a23      	ldr	r2, [pc, #140]	@ (80080f4 <TIM_TI1_SetConfig+0xd8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00b      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4a22      	ldr	r2, [pc, #136]	@ (80080f8 <TIM_TI1_SetConfig+0xdc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d007      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4a21      	ldr	r2, [pc, #132]	@ (80080fc <TIM_TI1_SetConfig+0xe0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d003      	beq.n	8008082 <TIM_TI1_SetConfig+0x66>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a20      	ldr	r2, [pc, #128]	@ (8008100 <TIM_TI1_SetConfig+0xe4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d101      	bne.n	8008086 <TIM_TI1_SetConfig+0x6a>
 8008082:	2301      	movs	r3, #1
 8008084:	e000      	b.n	8008088 <TIM_TI1_SetConfig+0x6c>
 8008086:	2300      	movs	r3, #0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d008      	beq.n	800809e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f023 0303 	bic.w	r3, r3, #3
 8008092:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	e003      	b.n	80080a6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f023 030a 	bic.w	r3, r3, #10
 80080c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 030a 	and.w	r3, r3, #10
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	621a      	str	r2, [r3, #32]
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40010000 	.word	0x40010000
 80080ec:	40000400 	.word	0x40000400
 80080f0:	40000800 	.word	0x40000800
 80080f4:	40000c00 	.word	0x40000c00
 80080f8:	40010400 	.word	0x40010400
 80080fc:	40014000 	.word	0x40014000
 8008100:	40001800 	.word	0x40001800

08008104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	f023 0201 	bic.w	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800812e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	f023 030a 	bic.w	r3, r3, #10
 8008140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008162:	b480      	push	{r7}
 8008164:	b087      	sub	sp, #28
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	607a      	str	r2, [r7, #4]
 800816e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f023 0210 	bic.w	r2, r3, #16
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800818e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	031b      	lsls	r3, r3, #12
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	621a      	str	r2, [r3, #32]
}
 80081d0:	bf00      	nop
 80081d2:	371c      	adds	r7, #28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	f023 0210 	bic.w	r2, r3, #16
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	031b      	lsls	r3, r3, #12
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008218:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4313      	orrs	r3, r2
 8008222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	697a      	ldr	r2, [r7, #20]
 800822e:	621a      	str	r2, [r3, #32]
}
 8008230:	bf00      	nop
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f023 0303 	bic.w	r3, r3, #3
 8008268:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008278:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	011b      	lsls	r3, r3, #4
 800827e:	b2db      	uxtb	r3, r3
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800828c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	621a      	str	r2, [r3, #32]
}
 80082a8:	bf00      	nop
 80082aa:	371c      	adds	r7, #28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082f2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	031b      	lsls	r3, r3, #12
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008306:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	031b      	lsls	r3, r3, #12
 800830c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	f043 0307 	orr.w	r3, r3, #7
 8008350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	609a      	str	r2, [r3, #8]
}
 8008358:	bf00      	nop
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800837e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	021a      	lsls	r2, r3, #8
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	431a      	orrs	r2, r3
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4313      	orrs	r3, r2
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	609a      	str	r2, [r3, #8]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b087      	sub	sp, #28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f003 031f 	and.w	r3, r3, #31
 80083b6:	2201      	movs	r2, #1
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1a      	ldr	r2, [r3, #32]
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	43db      	mvns	r3, r3
 80083c6:	401a      	ands	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	f003 031f 	and.w	r3, r3, #31
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	fa01 f303 	lsl.w	r3, r1, r3
 80083dc:	431a      	orrs	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	621a      	str	r2, [r3, #32]
}
 80083e2:	bf00      	nop
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
	...

080083f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008404:	2302      	movs	r3, #2
 8008406:	e05a      	b.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a21      	ldr	r2, [pc, #132]	@ (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d022      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008454:	d01d      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d018      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a1b      	ldr	r2, [pc, #108]	@ (80084d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d013      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a1a      	ldr	r2, [pc, #104]	@ (80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00e      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a18      	ldr	r2, [pc, #96]	@ (80084dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d009      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a17      	ldr	r2, [pc, #92]	@ (80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d004      	beq.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a15      	ldr	r2, [pc, #84]	@ (80084e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d10c      	bne.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800
 80084d8:	40000c00 	.word	0x40000c00
 80084dc:	40010400 	.word	0x40010400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40001800 	.word	0x40001800

080084e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008500:	2302      	movs	r3, #2
 8008502:	e03d      	b.n	8008580 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4313      	orrs	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <__cvt>:
 80085b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	ec57 6b10 	vmov	r6, r7, d0
 80085bc:	2f00      	cmp	r7, #0
 80085be:	460c      	mov	r4, r1
 80085c0:	4619      	mov	r1, r3
 80085c2:	463b      	mov	r3, r7
 80085c4:	bfbb      	ittet	lt
 80085c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80085ca:	461f      	movlt	r7, r3
 80085cc:	2300      	movge	r3, #0
 80085ce:	232d      	movlt	r3, #45	@ 0x2d
 80085d0:	700b      	strb	r3, [r1, #0]
 80085d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80085d8:	4691      	mov	r9, r2
 80085da:	f023 0820 	bic.w	r8, r3, #32
 80085de:	bfbc      	itt	lt
 80085e0:	4632      	movlt	r2, r6
 80085e2:	4616      	movlt	r6, r2
 80085e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085e8:	d005      	beq.n	80085f6 <__cvt+0x42>
 80085ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80085ee:	d100      	bne.n	80085f2 <__cvt+0x3e>
 80085f0:	3401      	adds	r4, #1
 80085f2:	2102      	movs	r1, #2
 80085f4:	e000      	b.n	80085f8 <__cvt+0x44>
 80085f6:	2103      	movs	r1, #3
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	ab02      	add	r3, sp, #8
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	ec47 6b10 	vmov	d0, r6, r7
 8008604:	4653      	mov	r3, sl
 8008606:	4622      	mov	r2, r4
 8008608:	f001 f8d2 	bl	80097b0 <_dtoa_r>
 800860c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008610:	4605      	mov	r5, r0
 8008612:	d119      	bne.n	8008648 <__cvt+0x94>
 8008614:	f019 0f01 	tst.w	r9, #1
 8008618:	d00e      	beq.n	8008638 <__cvt+0x84>
 800861a:	eb00 0904 	add.w	r9, r0, r4
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f8 fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 800862a:	b108      	cbz	r0, 8008630 <__cvt+0x7c>
 800862c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008630:	2230      	movs	r2, #48	@ 0x30
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	454b      	cmp	r3, r9
 8008636:	d31e      	bcc.n	8008676 <__cvt+0xc2>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800863c:	1b5b      	subs	r3, r3, r5
 800863e:	4628      	mov	r0, r5
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	b004      	add	sp, #16
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008648:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800864c:	eb00 0904 	add.w	r9, r0, r4
 8008650:	d1e5      	bne.n	800861e <__cvt+0x6a>
 8008652:	7803      	ldrb	r3, [r0, #0]
 8008654:	2b30      	cmp	r3, #48	@ 0x30
 8008656:	d10a      	bne.n	800866e <__cvt+0xba>
 8008658:	2200      	movs	r2, #0
 800865a:	2300      	movs	r3, #0
 800865c:	4630      	mov	r0, r6
 800865e:	4639      	mov	r1, r7
 8008660:	f7f8 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 8008664:	b918      	cbnz	r0, 800866e <__cvt+0xba>
 8008666:	f1c4 0401 	rsb	r4, r4, #1
 800866a:	f8ca 4000 	str.w	r4, [sl]
 800866e:	f8da 3000 	ldr.w	r3, [sl]
 8008672:	4499      	add	r9, r3
 8008674:	e7d3      	b.n	800861e <__cvt+0x6a>
 8008676:	1c59      	adds	r1, r3, #1
 8008678:	9103      	str	r1, [sp, #12]
 800867a:	701a      	strb	r2, [r3, #0]
 800867c:	e7d9      	b.n	8008632 <__cvt+0x7e>

0800867e <__exponent>:
 800867e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008680:	2900      	cmp	r1, #0
 8008682:	bfba      	itte	lt
 8008684:	4249      	neglt	r1, r1
 8008686:	232d      	movlt	r3, #45	@ 0x2d
 8008688:	232b      	movge	r3, #43	@ 0x2b
 800868a:	2909      	cmp	r1, #9
 800868c:	7002      	strb	r2, [r0, #0]
 800868e:	7043      	strb	r3, [r0, #1]
 8008690:	dd29      	ble.n	80086e6 <__exponent+0x68>
 8008692:	f10d 0307 	add.w	r3, sp, #7
 8008696:	461d      	mov	r5, r3
 8008698:	270a      	movs	r7, #10
 800869a:	461a      	mov	r2, r3
 800869c:	fbb1 f6f7 	udiv	r6, r1, r7
 80086a0:	fb07 1416 	mls	r4, r7, r6, r1
 80086a4:	3430      	adds	r4, #48	@ 0x30
 80086a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086aa:	460c      	mov	r4, r1
 80086ac:	2c63      	cmp	r4, #99	@ 0x63
 80086ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80086b2:	4631      	mov	r1, r6
 80086b4:	dcf1      	bgt.n	800869a <__exponent+0x1c>
 80086b6:	3130      	adds	r1, #48	@ 0x30
 80086b8:	1e94      	subs	r4, r2, #2
 80086ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086be:	1c41      	adds	r1, r0, #1
 80086c0:	4623      	mov	r3, r4
 80086c2:	42ab      	cmp	r3, r5
 80086c4:	d30a      	bcc.n	80086dc <__exponent+0x5e>
 80086c6:	f10d 0309 	add.w	r3, sp, #9
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	42ac      	cmp	r4, r5
 80086ce:	bf88      	it	hi
 80086d0:	2300      	movhi	r3, #0
 80086d2:	3302      	adds	r3, #2
 80086d4:	4403      	add	r3, r0
 80086d6:	1a18      	subs	r0, r3, r0
 80086d8:	b003      	add	sp, #12
 80086da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80086e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80086e4:	e7ed      	b.n	80086c2 <__exponent+0x44>
 80086e6:	2330      	movs	r3, #48	@ 0x30
 80086e8:	3130      	adds	r1, #48	@ 0x30
 80086ea:	7083      	strb	r3, [r0, #2]
 80086ec:	70c1      	strb	r1, [r0, #3]
 80086ee:	1d03      	adds	r3, r0, #4
 80086f0:	e7f1      	b.n	80086d6 <__exponent+0x58>
	...

080086f4 <_printf_float>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	b08d      	sub	sp, #52	@ 0x34
 80086fa:	460c      	mov	r4, r1
 80086fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008700:	4616      	mov	r6, r2
 8008702:	461f      	mov	r7, r3
 8008704:	4605      	mov	r5, r0
 8008706:	f000 ff3d 	bl	8009584 <_localeconv_r>
 800870a:	6803      	ldr	r3, [r0, #0]
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	4618      	mov	r0, r3
 8008710:	f7f7 fdce 	bl	80002b0 <strlen>
 8008714:	2300      	movs	r3, #0
 8008716:	930a      	str	r3, [sp, #40]	@ 0x28
 8008718:	f8d8 3000 	ldr.w	r3, [r8]
 800871c:	9005      	str	r0, [sp, #20]
 800871e:	3307      	adds	r3, #7
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	f103 0208 	add.w	r2, r3, #8
 8008728:	f894 a018 	ldrb.w	sl, [r4, #24]
 800872c:	f8d4 b000 	ldr.w	fp, [r4]
 8008730:	f8c8 2000 	str.w	r2, [r8]
 8008734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008738:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800873c:	9307      	str	r3, [sp, #28]
 800873e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008742:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800874a:	4b9c      	ldr	r3, [pc, #624]	@ (80089bc <_printf_float+0x2c8>)
 800874c:	f04f 32ff 	mov.w	r2, #4294967295
 8008750:	f7f8 fa0c 	bl	8000b6c <__aeabi_dcmpun>
 8008754:	bb70      	cbnz	r0, 80087b4 <_printf_float+0xc0>
 8008756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800875a:	4b98      	ldr	r3, [pc, #608]	@ (80089bc <_printf_float+0x2c8>)
 800875c:	f04f 32ff 	mov.w	r2, #4294967295
 8008760:	f7f8 f9e6 	bl	8000b30 <__aeabi_dcmple>
 8008764:	bb30      	cbnz	r0, 80087b4 <_printf_float+0xc0>
 8008766:	2200      	movs	r2, #0
 8008768:	2300      	movs	r3, #0
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f8 f9d5 	bl	8000b1c <__aeabi_dcmplt>
 8008772:	b110      	cbz	r0, 800877a <_printf_float+0x86>
 8008774:	232d      	movs	r3, #45	@ 0x2d
 8008776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800877a:	4a91      	ldr	r2, [pc, #580]	@ (80089c0 <_printf_float+0x2cc>)
 800877c:	4b91      	ldr	r3, [pc, #580]	@ (80089c4 <_printf_float+0x2d0>)
 800877e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008782:	bf94      	ite	ls
 8008784:	4690      	movls	r8, r2
 8008786:	4698      	movhi	r8, r3
 8008788:	2303      	movs	r3, #3
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	f02b 0304 	bic.w	r3, fp, #4
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	9700      	str	r7, [sp, #0]
 8008798:	4633      	mov	r3, r6
 800879a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f9d2 	bl	8008b48 <_printf_common>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f040 808d 	bne.w	80088c4 <_printf_float+0x1d0>
 80087aa:	f04f 30ff 	mov.w	r0, #4294967295
 80087ae:	b00d      	add	sp, #52	@ 0x34
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	4640      	mov	r0, r8
 80087ba:	4649      	mov	r1, r9
 80087bc:	f7f8 f9d6 	bl	8000b6c <__aeabi_dcmpun>
 80087c0:	b140      	cbz	r0, 80087d4 <_printf_float+0xe0>
 80087c2:	464b      	mov	r3, r9
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	bfbc      	itt	lt
 80087c8:	232d      	movlt	r3, #45	@ 0x2d
 80087ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80087ce:	4a7e      	ldr	r2, [pc, #504]	@ (80089c8 <_printf_float+0x2d4>)
 80087d0:	4b7e      	ldr	r3, [pc, #504]	@ (80089cc <_printf_float+0x2d8>)
 80087d2:	e7d4      	b.n	800877e <_printf_float+0x8a>
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80087da:	9206      	str	r2, [sp, #24]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	d13b      	bne.n	8008858 <_printf_float+0x164>
 80087e0:	2306      	movs	r3, #6
 80087e2:	6063      	str	r3, [r4, #4]
 80087e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80087e8:	2300      	movs	r3, #0
 80087ea:	6022      	str	r2, [r4, #0]
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80087f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80087f4:	ab09      	add	r3, sp, #36	@ 0x24
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	6861      	ldr	r1, [r4, #4]
 80087fa:	ec49 8b10 	vmov	d0, r8, r9
 80087fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008802:	4628      	mov	r0, r5
 8008804:	f7ff fed6 	bl	80085b4 <__cvt>
 8008808:	9b06      	ldr	r3, [sp, #24]
 800880a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800880c:	2b47      	cmp	r3, #71	@ 0x47
 800880e:	4680      	mov	r8, r0
 8008810:	d129      	bne.n	8008866 <_printf_float+0x172>
 8008812:	1cc8      	adds	r0, r1, #3
 8008814:	db02      	blt.n	800881c <_printf_float+0x128>
 8008816:	6863      	ldr	r3, [r4, #4]
 8008818:	4299      	cmp	r1, r3
 800881a:	dd41      	ble.n	80088a0 <_printf_float+0x1ac>
 800881c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008820:	fa5f fa8a 	uxtb.w	sl, sl
 8008824:	3901      	subs	r1, #1
 8008826:	4652      	mov	r2, sl
 8008828:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800882c:	9109      	str	r1, [sp, #36]	@ 0x24
 800882e:	f7ff ff26 	bl	800867e <__exponent>
 8008832:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008834:	1813      	adds	r3, r2, r0
 8008836:	2a01      	cmp	r2, #1
 8008838:	4681      	mov	r9, r0
 800883a:	6123      	str	r3, [r4, #16]
 800883c:	dc02      	bgt.n	8008844 <_printf_float+0x150>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	07d2      	lsls	r2, r2, #31
 8008842:	d501      	bpl.n	8008848 <_printf_float+0x154>
 8008844:	3301      	adds	r3, #1
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0a2      	beq.n	8008796 <_printf_float+0xa2>
 8008850:	232d      	movs	r3, #45	@ 0x2d
 8008852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008856:	e79e      	b.n	8008796 <_printf_float+0xa2>
 8008858:	9a06      	ldr	r2, [sp, #24]
 800885a:	2a47      	cmp	r2, #71	@ 0x47
 800885c:	d1c2      	bne.n	80087e4 <_printf_float+0xf0>
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1c0      	bne.n	80087e4 <_printf_float+0xf0>
 8008862:	2301      	movs	r3, #1
 8008864:	e7bd      	b.n	80087e2 <_printf_float+0xee>
 8008866:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800886a:	d9db      	bls.n	8008824 <_printf_float+0x130>
 800886c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008870:	d118      	bne.n	80088a4 <_printf_float+0x1b0>
 8008872:	2900      	cmp	r1, #0
 8008874:	6863      	ldr	r3, [r4, #4]
 8008876:	dd0b      	ble.n	8008890 <_printf_float+0x19c>
 8008878:	6121      	str	r1, [r4, #16]
 800887a:	b913      	cbnz	r3, 8008882 <_printf_float+0x18e>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	07d0      	lsls	r0, r2, #31
 8008880:	d502      	bpl.n	8008888 <_printf_float+0x194>
 8008882:	3301      	adds	r3, #1
 8008884:	440b      	add	r3, r1
 8008886:	6123      	str	r3, [r4, #16]
 8008888:	65a1      	str	r1, [r4, #88]	@ 0x58
 800888a:	f04f 0900 	mov.w	r9, #0
 800888e:	e7db      	b.n	8008848 <_printf_float+0x154>
 8008890:	b913      	cbnz	r3, 8008898 <_printf_float+0x1a4>
 8008892:	6822      	ldr	r2, [r4, #0]
 8008894:	07d2      	lsls	r2, r2, #31
 8008896:	d501      	bpl.n	800889c <_printf_float+0x1a8>
 8008898:	3302      	adds	r3, #2
 800889a:	e7f4      	b.n	8008886 <_printf_float+0x192>
 800889c:	2301      	movs	r3, #1
 800889e:	e7f2      	b.n	8008886 <_printf_float+0x192>
 80088a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088a6:	4299      	cmp	r1, r3
 80088a8:	db05      	blt.n	80088b6 <_printf_float+0x1c2>
 80088aa:	6823      	ldr	r3, [r4, #0]
 80088ac:	6121      	str	r1, [r4, #16]
 80088ae:	07d8      	lsls	r0, r3, #31
 80088b0:	d5ea      	bpl.n	8008888 <_printf_float+0x194>
 80088b2:	1c4b      	adds	r3, r1, #1
 80088b4:	e7e7      	b.n	8008886 <_printf_float+0x192>
 80088b6:	2900      	cmp	r1, #0
 80088b8:	bfd4      	ite	le
 80088ba:	f1c1 0202 	rsble	r2, r1, #2
 80088be:	2201      	movgt	r2, #1
 80088c0:	4413      	add	r3, r2
 80088c2:	e7e0      	b.n	8008886 <_printf_float+0x192>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	055a      	lsls	r2, r3, #21
 80088c8:	d407      	bmi.n	80088da <_printf_float+0x1e6>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	4642      	mov	r2, r8
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	d12b      	bne.n	8008930 <_printf_float+0x23c>
 80088d8:	e767      	b.n	80087aa <_printf_float+0xb6>
 80088da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088de:	f240 80dd 	bls.w	8008a9c <_printf_float+0x3a8>
 80088e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088e6:	2200      	movs	r2, #0
 80088e8:	2300      	movs	r3, #0
 80088ea:	f7f8 f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d033      	beq.n	800895a <_printf_float+0x266>
 80088f2:	4a37      	ldr	r2, [pc, #220]	@ (80089d0 <_printf_float+0x2dc>)
 80088f4:	2301      	movs	r3, #1
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	f43f af54 	beq.w	80087aa <_printf_float+0xb6>
 8008902:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008906:	4543      	cmp	r3, r8
 8008908:	db02      	blt.n	8008910 <_printf_float+0x21c>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	07d8      	lsls	r0, r3, #31
 800890e:	d50f      	bpl.n	8008930 <_printf_float+0x23c>
 8008910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	f43f af45 	beq.w	80087aa <_printf_float+0xb6>
 8008920:	f04f 0900 	mov.w	r9, #0
 8008924:	f108 38ff 	add.w	r8, r8, #4294967295
 8008928:	f104 0a1a 	add.w	sl, r4, #26
 800892c:	45c8      	cmp	r8, r9
 800892e:	dc09      	bgt.n	8008944 <_printf_float+0x250>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	079b      	lsls	r3, r3, #30
 8008934:	f100 8103 	bmi.w	8008b3e <_printf_float+0x44a>
 8008938:	68e0      	ldr	r0, [r4, #12]
 800893a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800893c:	4298      	cmp	r0, r3
 800893e:	bfb8      	it	lt
 8008940:	4618      	movlt	r0, r3
 8008942:	e734      	b.n	80087ae <_printf_float+0xba>
 8008944:	2301      	movs	r3, #1
 8008946:	4652      	mov	r2, sl
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	f43f af2b 	beq.w	80087aa <_printf_float+0xb6>
 8008954:	f109 0901 	add.w	r9, r9, #1
 8008958:	e7e8      	b.n	800892c <_printf_float+0x238>
 800895a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	dc39      	bgt.n	80089d4 <_printf_float+0x2e0>
 8008960:	4a1b      	ldr	r2, [pc, #108]	@ (80089d0 <_printf_float+0x2dc>)
 8008962:	2301      	movs	r3, #1
 8008964:	4631      	mov	r1, r6
 8008966:	4628      	mov	r0, r5
 8008968:	47b8      	blx	r7
 800896a:	3001      	adds	r0, #1
 800896c:	f43f af1d 	beq.w	80087aa <_printf_float+0xb6>
 8008970:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008974:	ea59 0303 	orrs.w	r3, r9, r3
 8008978:	d102      	bne.n	8008980 <_printf_float+0x28c>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	07d9      	lsls	r1, r3, #31
 800897e:	d5d7      	bpl.n	8008930 <_printf_float+0x23c>
 8008980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f af0d 	beq.w	80087aa <_printf_float+0xb6>
 8008990:	f04f 0a00 	mov.w	sl, #0
 8008994:	f104 0b1a 	add.w	fp, r4, #26
 8008998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800899a:	425b      	negs	r3, r3
 800899c:	4553      	cmp	r3, sl
 800899e:	dc01      	bgt.n	80089a4 <_printf_float+0x2b0>
 80089a0:	464b      	mov	r3, r9
 80089a2:	e793      	b.n	80088cc <_printf_float+0x1d8>
 80089a4:	2301      	movs	r3, #1
 80089a6:	465a      	mov	r2, fp
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	47b8      	blx	r7
 80089ae:	3001      	adds	r0, #1
 80089b0:	f43f aefb 	beq.w	80087aa <_printf_float+0xb6>
 80089b4:	f10a 0a01 	add.w	sl, sl, #1
 80089b8:	e7ee      	b.n	8008998 <_printf_float+0x2a4>
 80089ba:	bf00      	nop
 80089bc:	7fefffff 	.word	0x7fefffff
 80089c0:	0800e234 	.word	0x0800e234
 80089c4:	0800e238 	.word	0x0800e238
 80089c8:	0800e23c 	.word	0x0800e23c
 80089cc:	0800e240 	.word	0x0800e240
 80089d0:	0800e244 	.word	0x0800e244
 80089d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089da:	4553      	cmp	r3, sl
 80089dc:	bfa8      	it	ge
 80089de:	4653      	movge	r3, sl
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	4699      	mov	r9, r3
 80089e4:	dc36      	bgt.n	8008a54 <_printf_float+0x360>
 80089e6:	f04f 0b00 	mov.w	fp, #0
 80089ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089ee:	f104 021a 	add.w	r2, r4, #26
 80089f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089f4:	9306      	str	r3, [sp, #24]
 80089f6:	eba3 0309 	sub.w	r3, r3, r9
 80089fa:	455b      	cmp	r3, fp
 80089fc:	dc31      	bgt.n	8008a62 <_printf_float+0x36e>
 80089fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a00:	459a      	cmp	sl, r3
 8008a02:	dc3a      	bgt.n	8008a7a <_printf_float+0x386>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07da      	lsls	r2, r3, #31
 8008a08:	d437      	bmi.n	8008a7a <_printf_float+0x386>
 8008a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0c:	ebaa 0903 	sub.w	r9, sl, r3
 8008a10:	9b06      	ldr	r3, [sp, #24]
 8008a12:	ebaa 0303 	sub.w	r3, sl, r3
 8008a16:	4599      	cmp	r9, r3
 8008a18:	bfa8      	it	ge
 8008a1a:	4699      	movge	r9, r3
 8008a1c:	f1b9 0f00 	cmp.w	r9, #0
 8008a20:	dc33      	bgt.n	8008a8a <_printf_float+0x396>
 8008a22:	f04f 0800 	mov.w	r8, #0
 8008a26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a2a:	f104 0b1a 	add.w	fp, r4, #26
 8008a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a30:	ebaa 0303 	sub.w	r3, sl, r3
 8008a34:	eba3 0309 	sub.w	r3, r3, r9
 8008a38:	4543      	cmp	r3, r8
 8008a3a:	f77f af79 	ble.w	8008930 <_printf_float+0x23c>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	465a      	mov	r2, fp
 8008a42:	4631      	mov	r1, r6
 8008a44:	4628      	mov	r0, r5
 8008a46:	47b8      	blx	r7
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f43f aeae 	beq.w	80087aa <_printf_float+0xb6>
 8008a4e:	f108 0801 	add.w	r8, r8, #1
 8008a52:	e7ec      	b.n	8008a2e <_printf_float+0x33a>
 8008a54:	4642      	mov	r2, r8
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d1c2      	bne.n	80089e6 <_printf_float+0x2f2>
 8008a60:	e6a3      	b.n	80087aa <_printf_float+0xb6>
 8008a62:	2301      	movs	r3, #1
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	9206      	str	r2, [sp, #24]
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f ae9c 	beq.w	80087aa <_printf_float+0xb6>
 8008a72:	9a06      	ldr	r2, [sp, #24]
 8008a74:	f10b 0b01 	add.w	fp, fp, #1
 8008a78:	e7bb      	b.n	80089f2 <_printf_float+0x2fe>
 8008a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	d1c0      	bne.n	8008a0a <_printf_float+0x316>
 8008a88:	e68f      	b.n	80087aa <_printf_float+0xb6>
 8008a8a:	9a06      	ldr	r2, [sp, #24]
 8008a8c:	464b      	mov	r3, r9
 8008a8e:	4442      	add	r2, r8
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	d1c3      	bne.n	8008a22 <_printf_float+0x32e>
 8008a9a:	e686      	b.n	80087aa <_printf_float+0xb6>
 8008a9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008aa0:	f1ba 0f01 	cmp.w	sl, #1
 8008aa4:	dc01      	bgt.n	8008aaa <_printf_float+0x3b6>
 8008aa6:	07db      	lsls	r3, r3, #31
 8008aa8:	d536      	bpl.n	8008b18 <_printf_float+0x424>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4642      	mov	r2, r8
 8008aae:	4631      	mov	r1, r6
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	47b8      	blx	r7
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	f43f ae78 	beq.w	80087aa <_printf_float+0xb6>
 8008aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	47b8      	blx	r7
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	f43f ae70 	beq.w	80087aa <_printf_float+0xb6>
 8008aca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ad6:	f7f8 f817 	bl	8000b08 <__aeabi_dcmpeq>
 8008ada:	b9c0      	cbnz	r0, 8008b0e <_printf_float+0x41a>
 8008adc:	4653      	mov	r3, sl
 8008ade:	f108 0201 	add.w	r2, r8, #1
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d10c      	bne.n	8008b06 <_printf_float+0x412>
 8008aec:	e65d      	b.n	80087aa <_printf_float+0xb6>
 8008aee:	2301      	movs	r3, #1
 8008af0:	465a      	mov	r2, fp
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	f43f ae56 	beq.w	80087aa <_printf_float+0xb6>
 8008afe:	f108 0801 	add.w	r8, r8, #1
 8008b02:	45d0      	cmp	r8, sl
 8008b04:	dbf3      	blt.n	8008aee <_printf_float+0x3fa>
 8008b06:	464b      	mov	r3, r9
 8008b08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b0c:	e6df      	b.n	80088ce <_printf_float+0x1da>
 8008b0e:	f04f 0800 	mov.w	r8, #0
 8008b12:	f104 0b1a 	add.w	fp, r4, #26
 8008b16:	e7f4      	b.n	8008b02 <_printf_float+0x40e>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4642      	mov	r2, r8
 8008b1c:	e7e1      	b.n	8008ae2 <_printf_float+0x3ee>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	464a      	mov	r2, r9
 8008b22:	4631      	mov	r1, r6
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b8      	blx	r7
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f43f ae3e 	beq.w	80087aa <_printf_float+0xb6>
 8008b2e:	f108 0801 	add.w	r8, r8, #1
 8008b32:	68e3      	ldr	r3, [r4, #12]
 8008b34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b36:	1a5b      	subs	r3, r3, r1
 8008b38:	4543      	cmp	r3, r8
 8008b3a:	dcf0      	bgt.n	8008b1e <_printf_float+0x42a>
 8008b3c:	e6fc      	b.n	8008938 <_printf_float+0x244>
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	f104 0919 	add.w	r9, r4, #25
 8008b46:	e7f4      	b.n	8008b32 <_printf_float+0x43e>

08008b48 <_printf_common>:
 8008b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	4698      	mov	r8, r3
 8008b50:	688a      	ldr	r2, [r1, #8]
 8008b52:	690b      	ldr	r3, [r1, #16]
 8008b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	bfb8      	it	lt
 8008b5c:	4613      	movlt	r3, r2
 8008b5e:	6033      	str	r3, [r6, #0]
 8008b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b64:	4607      	mov	r7, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	b10a      	cbz	r2, 8008b6e <_printf_common+0x26>
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	6033      	str	r3, [r6, #0]
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	0699      	lsls	r1, r3, #26
 8008b72:	bf42      	ittt	mi
 8008b74:	6833      	ldrmi	r3, [r6, #0]
 8008b76:	3302      	addmi	r3, #2
 8008b78:	6033      	strmi	r3, [r6, #0]
 8008b7a:	6825      	ldr	r5, [r4, #0]
 8008b7c:	f015 0506 	ands.w	r5, r5, #6
 8008b80:	d106      	bne.n	8008b90 <_printf_common+0x48>
 8008b82:	f104 0a19 	add.w	sl, r4, #25
 8008b86:	68e3      	ldr	r3, [r4, #12]
 8008b88:	6832      	ldr	r2, [r6, #0]
 8008b8a:	1a9b      	subs	r3, r3, r2
 8008b8c:	42ab      	cmp	r3, r5
 8008b8e:	dc26      	bgt.n	8008bde <_printf_common+0x96>
 8008b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b94:	6822      	ldr	r2, [r4, #0]
 8008b96:	3b00      	subs	r3, #0
 8008b98:	bf18      	it	ne
 8008b9a:	2301      	movne	r3, #1
 8008b9c:	0692      	lsls	r2, r2, #26
 8008b9e:	d42b      	bmi.n	8008bf8 <_printf_common+0xb0>
 8008ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	47c8      	blx	r9
 8008baa:	3001      	adds	r0, #1
 8008bac:	d01e      	beq.n	8008bec <_printf_common+0xa4>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	f003 0306 	and.w	r3, r3, #6
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	bf02      	ittt	eq
 8008bba:	68e5      	ldreq	r5, [r4, #12]
 8008bbc:	6833      	ldreq	r3, [r6, #0]
 8008bbe:	1aed      	subeq	r5, r5, r3
 8008bc0:	68a3      	ldr	r3, [r4, #8]
 8008bc2:	bf0c      	ite	eq
 8008bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc8:	2500      	movne	r5, #0
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	bfc4      	itt	gt
 8008bce:	1a9b      	subgt	r3, r3, r2
 8008bd0:	18ed      	addgt	r5, r5, r3
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	341a      	adds	r4, #26
 8008bd6:	42b5      	cmp	r5, r6
 8008bd8:	d11a      	bne.n	8008c10 <_printf_common+0xc8>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e008      	b.n	8008bf0 <_printf_common+0xa8>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4652      	mov	r2, sl
 8008be2:	4641      	mov	r1, r8
 8008be4:	4638      	mov	r0, r7
 8008be6:	47c8      	blx	r9
 8008be8:	3001      	adds	r0, #1
 8008bea:	d103      	bne.n	8008bf4 <_printf_common+0xac>
 8008bec:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	e7c6      	b.n	8008b86 <_printf_common+0x3e>
 8008bf8:	18e1      	adds	r1, r4, r3
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	2030      	movs	r0, #48	@ 0x30
 8008bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c02:	4422      	add	r2, r4
 8008c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	e7c7      	b.n	8008ba0 <_printf_common+0x58>
 8008c10:	2301      	movs	r3, #1
 8008c12:	4622      	mov	r2, r4
 8008c14:	4641      	mov	r1, r8
 8008c16:	4638      	mov	r0, r7
 8008c18:	47c8      	blx	r9
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d0e6      	beq.n	8008bec <_printf_common+0xa4>
 8008c1e:	3601      	adds	r6, #1
 8008c20:	e7d9      	b.n	8008bd6 <_printf_common+0x8e>
	...

08008c24 <_printf_i>:
 8008c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	7e0f      	ldrb	r7, [r1, #24]
 8008c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c2c:	2f78      	cmp	r7, #120	@ 0x78
 8008c2e:	4691      	mov	r9, r2
 8008c30:	4680      	mov	r8, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	469a      	mov	sl, r3
 8008c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c3a:	d807      	bhi.n	8008c4c <_printf_i+0x28>
 8008c3c:	2f62      	cmp	r7, #98	@ 0x62
 8008c3e:	d80a      	bhi.n	8008c56 <_printf_i+0x32>
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	f000 80d2 	beq.w	8008dea <_printf_i+0x1c6>
 8008c46:	2f58      	cmp	r7, #88	@ 0x58
 8008c48:	f000 80b9 	beq.w	8008dbe <_printf_i+0x19a>
 8008c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c54:	e03a      	b.n	8008ccc <_printf_i+0xa8>
 8008c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c5a:	2b15      	cmp	r3, #21
 8008c5c:	d8f6      	bhi.n	8008c4c <_printf_i+0x28>
 8008c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c64 <_printf_i+0x40>)
 8008c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c64:	08008cbd 	.word	0x08008cbd
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008c4d 	.word	0x08008c4d
 8008c70:	08008c4d 	.word	0x08008c4d
 8008c74:	08008c4d 	.word	0x08008c4d
 8008c78:	08008c4d 	.word	0x08008c4d
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008c4d 	.word	0x08008c4d
 8008c84:	08008c4d 	.word	0x08008c4d
 8008c88:	08008c4d 	.word	0x08008c4d
 8008c8c:	08008c4d 	.word	0x08008c4d
 8008c90:	08008dd1 	.word	0x08008dd1
 8008c94:	08008cfb 	.word	0x08008cfb
 8008c98:	08008d8b 	.word	0x08008d8b
 8008c9c:	08008c4d 	.word	0x08008c4d
 8008ca0:	08008c4d 	.word	0x08008c4d
 8008ca4:	08008df3 	.word	0x08008df3
 8008ca8:	08008c4d 	.word	0x08008c4d
 8008cac:	08008cfb 	.word	0x08008cfb
 8008cb0:	08008c4d 	.word	0x08008c4d
 8008cb4:	08008c4d 	.word	0x08008c4d
 8008cb8:	08008d93 	.word	0x08008d93
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	1d1a      	adds	r2, r3, #4
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6032      	str	r2, [r6, #0]
 8008cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e09d      	b.n	8008e0c <_printf_i+0x1e8>
 8008cd0:	6833      	ldr	r3, [r6, #0]
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	6031      	str	r1, [r6, #0]
 8008cd8:	0606      	lsls	r6, r0, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xbc>
 8008cdc:	681d      	ldr	r5, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <_printf_i+0xc4>
 8008ce0:	0645      	lsls	r5, r0, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xb8>
 8008ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	da03      	bge.n	8008cf4 <_printf_i+0xd0>
 8008cec:	232d      	movs	r3, #45	@ 0x2d
 8008cee:	426d      	negs	r5, r5
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cf4:	4859      	ldr	r0, [pc, #356]	@ (8008e5c <_printf_i+0x238>)
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	e011      	b.n	8008d1e <_printf_i+0xfa>
 8008cfa:	6821      	ldr	r1, [r4, #0]
 8008cfc:	6833      	ldr	r3, [r6, #0]
 8008cfe:	0608      	lsls	r0, r1, #24
 8008d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d04:	d402      	bmi.n	8008d0c <_printf_i+0xe8>
 8008d06:	0649      	lsls	r1, r1, #25
 8008d08:	bf48      	it	mi
 8008d0a:	b2ad      	uxthmi	r5, r5
 8008d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d0e:	4853      	ldr	r0, [pc, #332]	@ (8008e5c <_printf_i+0x238>)
 8008d10:	6033      	str	r3, [r6, #0]
 8008d12:	bf14      	ite	ne
 8008d14:	230a      	movne	r3, #10
 8008d16:	2308      	moveq	r3, #8
 8008d18:	2100      	movs	r1, #0
 8008d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d1e:	6866      	ldr	r6, [r4, #4]
 8008d20:	60a6      	str	r6, [r4, #8]
 8008d22:	2e00      	cmp	r6, #0
 8008d24:	bfa2      	ittt	ge
 8008d26:	6821      	ldrge	r1, [r4, #0]
 8008d28:	f021 0104 	bicge.w	r1, r1, #4
 8008d2c:	6021      	strge	r1, [r4, #0]
 8008d2e:	b90d      	cbnz	r5, 8008d34 <_printf_i+0x110>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	d04b      	beq.n	8008dcc <_printf_i+0x1a8>
 8008d34:	4616      	mov	r6, r2
 8008d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d3e:	5dc7      	ldrb	r7, [r0, r7]
 8008d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d44:	462f      	mov	r7, r5
 8008d46:	42bb      	cmp	r3, r7
 8008d48:	460d      	mov	r5, r1
 8008d4a:	d9f4      	bls.n	8008d36 <_printf_i+0x112>
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d10b      	bne.n	8008d68 <_printf_i+0x144>
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	07df      	lsls	r7, r3, #31
 8008d54:	d508      	bpl.n	8008d68 <_printf_i+0x144>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	6861      	ldr	r1, [r4, #4]
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	bfde      	ittt	le
 8008d5e:	2330      	movle	r3, #48	@ 0x30
 8008d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d68:	1b92      	subs	r2, r2, r6
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	f8cd a000 	str.w	sl, [sp]
 8008d70:	464b      	mov	r3, r9
 8008d72:	aa03      	add	r2, sp, #12
 8008d74:	4621      	mov	r1, r4
 8008d76:	4640      	mov	r0, r8
 8008d78:	f7ff fee6 	bl	8008b48 <_printf_common>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	d14a      	bne.n	8008e16 <_printf_i+0x1f2>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b004      	add	sp, #16
 8008d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	4833      	ldr	r0, [pc, #204]	@ (8008e60 <_printf_i+0x23c>)
 8008d94:	2778      	movs	r7, #120	@ 0x78
 8008d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	6831      	ldr	r1, [r6, #0]
 8008d9e:	061f      	lsls	r7, r3, #24
 8008da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008da4:	d402      	bmi.n	8008dac <_printf_i+0x188>
 8008da6:	065f      	lsls	r7, r3, #25
 8008da8:	bf48      	it	mi
 8008daa:	b2ad      	uxthmi	r5, r5
 8008dac:	6031      	str	r1, [r6, #0]
 8008dae:	07d9      	lsls	r1, r3, #31
 8008db0:	bf44      	itt	mi
 8008db2:	f043 0320 	orrmi.w	r3, r3, #32
 8008db6:	6023      	strmi	r3, [r4, #0]
 8008db8:	b11d      	cbz	r5, 8008dc2 <_printf_i+0x19e>
 8008dba:	2310      	movs	r3, #16
 8008dbc:	e7ac      	b.n	8008d18 <_printf_i+0xf4>
 8008dbe:	4827      	ldr	r0, [pc, #156]	@ (8008e5c <_printf_i+0x238>)
 8008dc0:	e7e9      	b.n	8008d96 <_printf_i+0x172>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	f023 0320 	bic.w	r3, r3, #32
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	e7f6      	b.n	8008dba <_printf_i+0x196>
 8008dcc:	4616      	mov	r6, r2
 8008dce:	e7bd      	b.n	8008d4c <_printf_i+0x128>
 8008dd0:	6833      	ldr	r3, [r6, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	6961      	ldr	r1, [r4, #20]
 8008dd6:	1d18      	adds	r0, r3, #4
 8008dd8:	6030      	str	r0, [r6, #0]
 8008dda:	062e      	lsls	r6, r5, #24
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	d501      	bpl.n	8008de4 <_printf_i+0x1c0>
 8008de0:	6019      	str	r1, [r3, #0]
 8008de2:	e002      	b.n	8008dea <_printf_i+0x1c6>
 8008de4:	0668      	lsls	r0, r5, #25
 8008de6:	d5fb      	bpl.n	8008de0 <_printf_i+0x1bc>
 8008de8:	8019      	strh	r1, [r3, #0]
 8008dea:	2300      	movs	r3, #0
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	4616      	mov	r6, r2
 8008df0:	e7bc      	b.n	8008d6c <_printf_i+0x148>
 8008df2:	6833      	ldr	r3, [r6, #0]
 8008df4:	1d1a      	adds	r2, r3, #4
 8008df6:	6032      	str	r2, [r6, #0]
 8008df8:	681e      	ldr	r6, [r3, #0]
 8008dfa:	6862      	ldr	r2, [r4, #4]
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	4630      	mov	r0, r6
 8008e00:	f7f7 fa06 	bl	8000210 <memchr>
 8008e04:	b108      	cbz	r0, 8008e0a <_printf_i+0x1e6>
 8008e06:	1b80      	subs	r0, r0, r6
 8008e08:	6060      	str	r0, [r4, #4]
 8008e0a:	6863      	ldr	r3, [r4, #4]
 8008e0c:	6123      	str	r3, [r4, #16]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e14:	e7aa      	b.n	8008d6c <_printf_i+0x148>
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	4632      	mov	r2, r6
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	47d0      	blx	sl
 8008e20:	3001      	adds	r0, #1
 8008e22:	d0ad      	beq.n	8008d80 <_printf_i+0x15c>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	079b      	lsls	r3, r3, #30
 8008e28:	d413      	bmi.n	8008e52 <_printf_i+0x22e>
 8008e2a:	68e0      	ldr	r0, [r4, #12]
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	4298      	cmp	r0, r3
 8008e30:	bfb8      	it	lt
 8008e32:	4618      	movlt	r0, r3
 8008e34:	e7a6      	b.n	8008d84 <_printf_i+0x160>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4632      	mov	r2, r6
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	47d0      	blx	sl
 8008e40:	3001      	adds	r0, #1
 8008e42:	d09d      	beq.n	8008d80 <_printf_i+0x15c>
 8008e44:	3501      	adds	r5, #1
 8008e46:	68e3      	ldr	r3, [r4, #12]
 8008e48:	9903      	ldr	r1, [sp, #12]
 8008e4a:	1a5b      	subs	r3, r3, r1
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	dcf2      	bgt.n	8008e36 <_printf_i+0x212>
 8008e50:	e7eb      	b.n	8008e2a <_printf_i+0x206>
 8008e52:	2500      	movs	r5, #0
 8008e54:	f104 0619 	add.w	r6, r4, #25
 8008e58:	e7f5      	b.n	8008e46 <_printf_i+0x222>
 8008e5a:	bf00      	nop
 8008e5c:	0800e246 	.word	0x0800e246
 8008e60:	0800e257 	.word	0x0800e257

08008e64 <_scanf_float>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	b087      	sub	sp, #28
 8008e6a:	4617      	mov	r7, r2
 8008e6c:	9303      	str	r3, [sp, #12]
 8008e6e:	688b      	ldr	r3, [r1, #8]
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008e76:	bf81      	itttt	hi
 8008e78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008e7c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008e80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008e84:	608b      	strhi	r3, [r1, #8]
 8008e86:	680b      	ldr	r3, [r1, #0]
 8008e88:	460a      	mov	r2, r1
 8008e8a:	f04f 0500 	mov.w	r5, #0
 8008e8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008e92:	f842 3b1c 	str.w	r3, [r2], #28
 8008e96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	bf98      	it	ls
 8008ea0:	f04f 0b00 	movls.w	fp, #0
 8008ea4:	9201      	str	r2, [sp, #4]
 8008ea6:	4616      	mov	r6, r2
 8008ea8:	46aa      	mov	sl, r5
 8008eaa:	46a9      	mov	r9, r5
 8008eac:	9502      	str	r5, [sp, #8]
 8008eae:	68a2      	ldr	r2, [r4, #8]
 8008eb0:	b152      	cbz	r2, 8008ec8 <_scanf_float+0x64>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b4e      	cmp	r3, #78	@ 0x4e
 8008eb8:	d864      	bhi.n	8008f84 <_scanf_float+0x120>
 8008eba:	2b40      	cmp	r3, #64	@ 0x40
 8008ebc:	d83c      	bhi.n	8008f38 <_scanf_float+0xd4>
 8008ebe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008ec2:	b2c8      	uxtb	r0, r1
 8008ec4:	280e      	cmp	r0, #14
 8008ec6:	d93a      	bls.n	8008f3e <_scanf_float+0xda>
 8008ec8:	f1b9 0f00 	cmp.w	r9, #0
 8008ecc:	d003      	beq.n	8008ed6 <_scanf_float+0x72>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eda:	f1ba 0f01 	cmp.w	sl, #1
 8008ede:	f200 8117 	bhi.w	8009110 <_scanf_float+0x2ac>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	429e      	cmp	r6, r3
 8008ee6:	f200 8108 	bhi.w	80090fa <_scanf_float+0x296>
 8008eea:	2001      	movs	r0, #1
 8008eec:	b007      	add	sp, #28
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ef6:	2a0d      	cmp	r2, #13
 8008ef8:	d8e6      	bhi.n	8008ec8 <_scanf_float+0x64>
 8008efa:	a101      	add	r1, pc, #4	@ (adr r1, 8008f00 <_scanf_float+0x9c>)
 8008efc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008f00:	08009047 	.word	0x08009047
 8008f04:	08008ec9 	.word	0x08008ec9
 8008f08:	08008ec9 	.word	0x08008ec9
 8008f0c:	08008ec9 	.word	0x08008ec9
 8008f10:	080090a7 	.word	0x080090a7
 8008f14:	0800907f 	.word	0x0800907f
 8008f18:	08008ec9 	.word	0x08008ec9
 8008f1c:	08008ec9 	.word	0x08008ec9
 8008f20:	08009055 	.word	0x08009055
 8008f24:	08008ec9 	.word	0x08008ec9
 8008f28:	08008ec9 	.word	0x08008ec9
 8008f2c:	08008ec9 	.word	0x08008ec9
 8008f30:	08008ec9 	.word	0x08008ec9
 8008f34:	0800900d 	.word	0x0800900d
 8008f38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008f3c:	e7db      	b.n	8008ef6 <_scanf_float+0x92>
 8008f3e:	290e      	cmp	r1, #14
 8008f40:	d8c2      	bhi.n	8008ec8 <_scanf_float+0x64>
 8008f42:	a001      	add	r0, pc, #4	@ (adr r0, 8008f48 <_scanf_float+0xe4>)
 8008f44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f48:	08008ffd 	.word	0x08008ffd
 8008f4c:	08008ec9 	.word	0x08008ec9
 8008f50:	08008ffd 	.word	0x08008ffd
 8008f54:	08009093 	.word	0x08009093
 8008f58:	08008ec9 	.word	0x08008ec9
 8008f5c:	08008fa5 	.word	0x08008fa5
 8008f60:	08008fe3 	.word	0x08008fe3
 8008f64:	08008fe3 	.word	0x08008fe3
 8008f68:	08008fe3 	.word	0x08008fe3
 8008f6c:	08008fe3 	.word	0x08008fe3
 8008f70:	08008fe3 	.word	0x08008fe3
 8008f74:	08008fe3 	.word	0x08008fe3
 8008f78:	08008fe3 	.word	0x08008fe3
 8008f7c:	08008fe3 	.word	0x08008fe3
 8008f80:	08008fe3 	.word	0x08008fe3
 8008f84:	2b6e      	cmp	r3, #110	@ 0x6e
 8008f86:	d809      	bhi.n	8008f9c <_scanf_float+0x138>
 8008f88:	2b60      	cmp	r3, #96	@ 0x60
 8008f8a:	d8b2      	bhi.n	8008ef2 <_scanf_float+0x8e>
 8008f8c:	2b54      	cmp	r3, #84	@ 0x54
 8008f8e:	d07b      	beq.n	8009088 <_scanf_float+0x224>
 8008f90:	2b59      	cmp	r3, #89	@ 0x59
 8008f92:	d199      	bne.n	8008ec8 <_scanf_float+0x64>
 8008f94:	2d07      	cmp	r5, #7
 8008f96:	d197      	bne.n	8008ec8 <_scanf_float+0x64>
 8008f98:	2508      	movs	r5, #8
 8008f9a:	e02c      	b.n	8008ff6 <_scanf_float+0x192>
 8008f9c:	2b74      	cmp	r3, #116	@ 0x74
 8008f9e:	d073      	beq.n	8009088 <_scanf_float+0x224>
 8008fa0:	2b79      	cmp	r3, #121	@ 0x79
 8008fa2:	e7f6      	b.n	8008f92 <_scanf_float+0x12e>
 8008fa4:	6821      	ldr	r1, [r4, #0]
 8008fa6:	05c8      	lsls	r0, r1, #23
 8008fa8:	d51b      	bpl.n	8008fe2 <_scanf_float+0x17e>
 8008faa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008fae:	6021      	str	r1, [r4, #0]
 8008fb0:	f109 0901 	add.w	r9, r9, #1
 8008fb4:	f1bb 0f00 	cmp.w	fp, #0
 8008fb8:	d003      	beq.n	8008fc2 <_scanf_float+0x15e>
 8008fba:	3201      	adds	r2, #1
 8008fbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fc0:	60a2      	str	r2, [r4, #8]
 8008fc2:	68a3      	ldr	r3, [r4, #8]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	60a3      	str	r3, [r4, #8]
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	6123      	str	r3, [r4, #16]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	607b      	str	r3, [r7, #4]
 8008fd6:	f340 8087 	ble.w	80090e8 <_scanf_float+0x284>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	603b      	str	r3, [r7, #0]
 8008fe0:	e765      	b.n	8008eae <_scanf_float+0x4a>
 8008fe2:	eb1a 0105 	adds.w	r1, sl, r5
 8008fe6:	f47f af6f 	bne.w	8008ec8 <_scanf_float+0x64>
 8008fea:	6822      	ldr	r2, [r4, #0]
 8008fec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008ff0:	6022      	str	r2, [r4, #0]
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	468a      	mov	sl, r1
 8008ff6:	f806 3b01 	strb.w	r3, [r6], #1
 8008ffa:	e7e2      	b.n	8008fc2 <_scanf_float+0x15e>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	0610      	lsls	r0, r2, #24
 8009000:	f57f af62 	bpl.w	8008ec8 <_scanf_float+0x64>
 8009004:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009008:	6022      	str	r2, [r4, #0]
 800900a:	e7f4      	b.n	8008ff6 <_scanf_float+0x192>
 800900c:	f1ba 0f00 	cmp.w	sl, #0
 8009010:	d10e      	bne.n	8009030 <_scanf_float+0x1cc>
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	d10e      	bne.n	8009036 <_scanf_float+0x1d2>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800901e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009022:	d108      	bne.n	8009036 <_scanf_float+0x1d2>
 8009024:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009028:	6022      	str	r2, [r4, #0]
 800902a:	f04f 0a01 	mov.w	sl, #1
 800902e:	e7e2      	b.n	8008ff6 <_scanf_float+0x192>
 8009030:	f1ba 0f02 	cmp.w	sl, #2
 8009034:	d055      	beq.n	80090e2 <_scanf_float+0x27e>
 8009036:	2d01      	cmp	r5, #1
 8009038:	d002      	beq.n	8009040 <_scanf_float+0x1dc>
 800903a:	2d04      	cmp	r5, #4
 800903c:	f47f af44 	bne.w	8008ec8 <_scanf_float+0x64>
 8009040:	3501      	adds	r5, #1
 8009042:	b2ed      	uxtb	r5, r5
 8009044:	e7d7      	b.n	8008ff6 <_scanf_float+0x192>
 8009046:	f1ba 0f01 	cmp.w	sl, #1
 800904a:	f47f af3d 	bne.w	8008ec8 <_scanf_float+0x64>
 800904e:	f04f 0a02 	mov.w	sl, #2
 8009052:	e7d0      	b.n	8008ff6 <_scanf_float+0x192>
 8009054:	b97d      	cbnz	r5, 8009076 <_scanf_float+0x212>
 8009056:	f1b9 0f00 	cmp.w	r9, #0
 800905a:	f47f af38 	bne.w	8008ece <_scanf_float+0x6a>
 800905e:	6822      	ldr	r2, [r4, #0]
 8009060:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009064:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009068:	f040 8108 	bne.w	800927c <_scanf_float+0x418>
 800906c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	2501      	movs	r5, #1
 8009074:	e7bf      	b.n	8008ff6 <_scanf_float+0x192>
 8009076:	2d03      	cmp	r5, #3
 8009078:	d0e2      	beq.n	8009040 <_scanf_float+0x1dc>
 800907a:	2d05      	cmp	r5, #5
 800907c:	e7de      	b.n	800903c <_scanf_float+0x1d8>
 800907e:	2d02      	cmp	r5, #2
 8009080:	f47f af22 	bne.w	8008ec8 <_scanf_float+0x64>
 8009084:	2503      	movs	r5, #3
 8009086:	e7b6      	b.n	8008ff6 <_scanf_float+0x192>
 8009088:	2d06      	cmp	r5, #6
 800908a:	f47f af1d 	bne.w	8008ec8 <_scanf_float+0x64>
 800908e:	2507      	movs	r5, #7
 8009090:	e7b1      	b.n	8008ff6 <_scanf_float+0x192>
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	0591      	lsls	r1, r2, #22
 8009096:	f57f af17 	bpl.w	8008ec8 <_scanf_float+0x64>
 800909a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800909e:	6022      	str	r2, [r4, #0]
 80090a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80090a4:	e7a7      	b.n	8008ff6 <_scanf_float+0x192>
 80090a6:	6822      	ldr	r2, [r4, #0]
 80090a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80090ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80090b0:	d006      	beq.n	80090c0 <_scanf_float+0x25c>
 80090b2:	0550      	lsls	r0, r2, #21
 80090b4:	f57f af08 	bpl.w	8008ec8 <_scanf_float+0x64>
 80090b8:	f1b9 0f00 	cmp.w	r9, #0
 80090bc:	f000 80de 	beq.w	800927c <_scanf_float+0x418>
 80090c0:	0591      	lsls	r1, r2, #22
 80090c2:	bf58      	it	pl
 80090c4:	9902      	ldrpl	r1, [sp, #8]
 80090c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80090ca:	bf58      	it	pl
 80090cc:	eba9 0101 	subpl.w	r1, r9, r1
 80090d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80090d4:	bf58      	it	pl
 80090d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80090da:	6022      	str	r2, [r4, #0]
 80090dc:	f04f 0900 	mov.w	r9, #0
 80090e0:	e789      	b.n	8008ff6 <_scanf_float+0x192>
 80090e2:	f04f 0a03 	mov.w	sl, #3
 80090e6:	e786      	b.n	8008ff6 <_scanf_float+0x192>
 80090e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80090ec:	4639      	mov	r1, r7
 80090ee:	4640      	mov	r0, r8
 80090f0:	4798      	blx	r3
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f43f aedb 	beq.w	8008eae <_scanf_float+0x4a>
 80090f8:	e6e6      	b.n	8008ec8 <_scanf_float+0x64>
 80090fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009102:	463a      	mov	r2, r7
 8009104:	4640      	mov	r0, r8
 8009106:	4798      	blx	r3
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	3b01      	subs	r3, #1
 800910c:	6123      	str	r3, [r4, #16]
 800910e:	e6e8      	b.n	8008ee2 <_scanf_float+0x7e>
 8009110:	1e6b      	subs	r3, r5, #1
 8009112:	2b06      	cmp	r3, #6
 8009114:	d824      	bhi.n	8009160 <_scanf_float+0x2fc>
 8009116:	2d02      	cmp	r5, #2
 8009118:	d836      	bhi.n	8009188 <_scanf_float+0x324>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	429e      	cmp	r6, r3
 800911e:	f67f aee4 	bls.w	8008eea <_scanf_float+0x86>
 8009122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800912a:	463a      	mov	r2, r7
 800912c:	4640      	mov	r0, r8
 800912e:	4798      	blx	r3
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	3b01      	subs	r3, #1
 8009134:	6123      	str	r3, [r4, #16]
 8009136:	e7f0      	b.n	800911a <_scanf_float+0x2b6>
 8009138:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800913c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009140:	463a      	mov	r2, r7
 8009142:	4640      	mov	r0, r8
 8009144:	4798      	blx	r3
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	3b01      	subs	r3, #1
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009150:	fa5f fa8a 	uxtb.w	sl, sl
 8009154:	f1ba 0f02 	cmp.w	sl, #2
 8009158:	d1ee      	bne.n	8009138 <_scanf_float+0x2d4>
 800915a:	3d03      	subs	r5, #3
 800915c:	b2ed      	uxtb	r5, r5
 800915e:	1b76      	subs	r6, r6, r5
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	05da      	lsls	r2, r3, #23
 8009164:	d530      	bpl.n	80091c8 <_scanf_float+0x364>
 8009166:	055b      	lsls	r3, r3, #21
 8009168:	d511      	bpl.n	800918e <_scanf_float+0x32a>
 800916a:	9b01      	ldr	r3, [sp, #4]
 800916c:	429e      	cmp	r6, r3
 800916e:	f67f aebc 	bls.w	8008eea <_scanf_float+0x86>
 8009172:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800917a:	463a      	mov	r2, r7
 800917c:	4640      	mov	r0, r8
 800917e:	4798      	blx	r3
 8009180:	6923      	ldr	r3, [r4, #16]
 8009182:	3b01      	subs	r3, #1
 8009184:	6123      	str	r3, [r4, #16]
 8009186:	e7f0      	b.n	800916a <_scanf_float+0x306>
 8009188:	46aa      	mov	sl, r5
 800918a:	46b3      	mov	fp, r6
 800918c:	e7de      	b.n	800914c <_scanf_float+0x2e8>
 800918e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009192:	6923      	ldr	r3, [r4, #16]
 8009194:	2965      	cmp	r1, #101	@ 0x65
 8009196:	f103 33ff 	add.w	r3, r3, #4294967295
 800919a:	f106 35ff 	add.w	r5, r6, #4294967295
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	d00c      	beq.n	80091bc <_scanf_float+0x358>
 80091a2:	2945      	cmp	r1, #69	@ 0x45
 80091a4:	d00a      	beq.n	80091bc <_scanf_float+0x358>
 80091a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80091aa:	463a      	mov	r2, r7
 80091ac:	4640      	mov	r0, r8
 80091ae:	4798      	blx	r3
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	1eb5      	subs	r5, r6, #2
 80091ba:	6123      	str	r3, [r4, #16]
 80091bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80091c0:	463a      	mov	r2, r7
 80091c2:	4640      	mov	r0, r8
 80091c4:	4798      	blx	r3
 80091c6:	462e      	mov	r6, r5
 80091c8:	6822      	ldr	r2, [r4, #0]
 80091ca:	f012 0210 	ands.w	r2, r2, #16
 80091ce:	d001      	beq.n	80091d4 <_scanf_float+0x370>
 80091d0:	2000      	movs	r0, #0
 80091d2:	e68b      	b.n	8008eec <_scanf_float+0x88>
 80091d4:	7032      	strb	r2, [r6, #0]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80091dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091e0:	d11c      	bne.n	800921c <_scanf_float+0x3b8>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	454b      	cmp	r3, r9
 80091e6:	eba3 0209 	sub.w	r2, r3, r9
 80091ea:	d123      	bne.n	8009234 <_scanf_float+0x3d0>
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	4640      	mov	r0, r8
 80091f2:	f002 fc55 	bl	800baa0 <_strtod_r>
 80091f6:	9b03      	ldr	r3, [sp, #12]
 80091f8:	6821      	ldr	r1, [r4, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f011 0f02 	tst.w	r1, #2
 8009200:	ec57 6b10 	vmov	r6, r7, d0
 8009204:	f103 0204 	add.w	r2, r3, #4
 8009208:	d01f      	beq.n	800924a <_scanf_float+0x3e6>
 800920a:	9903      	ldr	r1, [sp, #12]
 800920c:	600a      	str	r2, [r1, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	e9c3 6700 	strd	r6, r7, [r3]
 8009214:	68e3      	ldr	r3, [r4, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60e3      	str	r3, [r4, #12]
 800921a:	e7d9      	b.n	80091d0 <_scanf_float+0x36c>
 800921c:	9b04      	ldr	r3, [sp, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0e4      	beq.n	80091ec <_scanf_float+0x388>
 8009222:	9905      	ldr	r1, [sp, #20]
 8009224:	230a      	movs	r3, #10
 8009226:	3101      	adds	r1, #1
 8009228:	4640      	mov	r0, r8
 800922a:	f002 fcb9 	bl	800bba0 <_strtol_r>
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	9e05      	ldr	r6, [sp, #20]
 8009232:	1ac2      	subs	r2, r0, r3
 8009234:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009238:	429e      	cmp	r6, r3
 800923a:	bf28      	it	cs
 800923c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009240:	4910      	ldr	r1, [pc, #64]	@ (8009284 <_scanf_float+0x420>)
 8009242:	4630      	mov	r0, r6
 8009244:	f000 f918 	bl	8009478 <siprintf>
 8009248:	e7d0      	b.n	80091ec <_scanf_float+0x388>
 800924a:	f011 0f04 	tst.w	r1, #4
 800924e:	9903      	ldr	r1, [sp, #12]
 8009250:	600a      	str	r2, [r1, #0]
 8009252:	d1dc      	bne.n	800920e <_scanf_float+0x3aa>
 8009254:	681d      	ldr	r5, [r3, #0]
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	4630      	mov	r0, r6
 800925c:	4639      	mov	r1, r7
 800925e:	f7f7 fc85 	bl	8000b6c <__aeabi_dcmpun>
 8009262:	b128      	cbz	r0, 8009270 <_scanf_float+0x40c>
 8009264:	4808      	ldr	r0, [pc, #32]	@ (8009288 <_scanf_float+0x424>)
 8009266:	f000 fa13 	bl	8009690 <nanf>
 800926a:	ed85 0a00 	vstr	s0, [r5]
 800926e:	e7d1      	b.n	8009214 <_scanf_float+0x3b0>
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 fcd8 	bl	8000c28 <__aeabi_d2f>
 8009278:	6028      	str	r0, [r5, #0]
 800927a:	e7cb      	b.n	8009214 <_scanf_float+0x3b0>
 800927c:	f04f 0900 	mov.w	r9, #0
 8009280:	e629      	b.n	8008ed6 <_scanf_float+0x72>
 8009282:	bf00      	nop
 8009284:	0800e268 	.word	0x0800e268
 8009288:	0800e5fd 	.word	0x0800e5fd

0800928c <std>:
 800928c:	2300      	movs	r3, #0
 800928e:	b510      	push	{r4, lr}
 8009290:	4604      	mov	r4, r0
 8009292:	e9c0 3300 	strd	r3, r3, [r0]
 8009296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800929a:	6083      	str	r3, [r0, #8]
 800929c:	8181      	strh	r1, [r0, #12]
 800929e:	6643      	str	r3, [r0, #100]	@ 0x64
 80092a0:	81c2      	strh	r2, [r0, #14]
 80092a2:	6183      	str	r3, [r0, #24]
 80092a4:	4619      	mov	r1, r3
 80092a6:	2208      	movs	r2, #8
 80092a8:	305c      	adds	r0, #92	@ 0x5c
 80092aa:	f000 f962 	bl	8009572 <memset>
 80092ae:	4b0d      	ldr	r3, [pc, #52]	@ (80092e4 <std+0x58>)
 80092b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <std+0x5c>)
 80092b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092b6:	4b0d      	ldr	r3, [pc, #52]	@ (80092ec <std+0x60>)
 80092b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092ba:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <std+0x64>)
 80092bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <std+0x68>)
 80092c0:	6224      	str	r4, [r4, #32]
 80092c2:	429c      	cmp	r4, r3
 80092c4:	d006      	beq.n	80092d4 <std+0x48>
 80092c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092ca:	4294      	cmp	r4, r2
 80092cc:	d002      	beq.n	80092d4 <std+0x48>
 80092ce:	33d0      	adds	r3, #208	@ 0xd0
 80092d0:	429c      	cmp	r4, r3
 80092d2:	d105      	bne.n	80092e0 <std+0x54>
 80092d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092dc:	f000 b9c6 	b.w	800966c <__retarget_lock_init_recursive>
 80092e0:	bd10      	pop	{r4, pc}
 80092e2:	bf00      	nop
 80092e4:	080094b9 	.word	0x080094b9
 80092e8:	080094db 	.word	0x080094db
 80092ec:	08009513 	.word	0x08009513
 80092f0:	08009537 	.word	0x08009537
 80092f4:	2000083c 	.word	0x2000083c

080092f8 <stdio_exit_handler>:
 80092f8:	4a02      	ldr	r2, [pc, #8]	@ (8009304 <stdio_exit_handler+0xc>)
 80092fa:	4903      	ldr	r1, [pc, #12]	@ (8009308 <stdio_exit_handler+0x10>)
 80092fc:	4803      	ldr	r0, [pc, #12]	@ (800930c <stdio_exit_handler+0x14>)
 80092fe:	f000 b869 	b.w	80093d4 <_fwalk_sglue>
 8009302:	bf00      	nop
 8009304:	2000005c 	.word	0x2000005c
 8009308:	0800bf5d 	.word	0x0800bf5d
 800930c:	2000006c 	.word	0x2000006c

08009310 <cleanup_stdio>:
 8009310:	6841      	ldr	r1, [r0, #4]
 8009312:	4b0c      	ldr	r3, [pc, #48]	@ (8009344 <cleanup_stdio+0x34>)
 8009314:	4299      	cmp	r1, r3
 8009316:	b510      	push	{r4, lr}
 8009318:	4604      	mov	r4, r0
 800931a:	d001      	beq.n	8009320 <cleanup_stdio+0x10>
 800931c:	f002 fe1e 	bl	800bf5c <_fflush_r>
 8009320:	68a1      	ldr	r1, [r4, #8]
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <cleanup_stdio+0x38>)
 8009324:	4299      	cmp	r1, r3
 8009326:	d002      	beq.n	800932e <cleanup_stdio+0x1e>
 8009328:	4620      	mov	r0, r4
 800932a:	f002 fe17 	bl	800bf5c <_fflush_r>
 800932e:	68e1      	ldr	r1, [r4, #12]
 8009330:	4b06      	ldr	r3, [pc, #24]	@ (800934c <cleanup_stdio+0x3c>)
 8009332:	4299      	cmp	r1, r3
 8009334:	d004      	beq.n	8009340 <cleanup_stdio+0x30>
 8009336:	4620      	mov	r0, r4
 8009338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933c:	f002 be0e 	b.w	800bf5c <_fflush_r>
 8009340:	bd10      	pop	{r4, pc}
 8009342:	bf00      	nop
 8009344:	2000083c 	.word	0x2000083c
 8009348:	200008a4 	.word	0x200008a4
 800934c:	2000090c 	.word	0x2000090c

08009350 <global_stdio_init.part.0>:
 8009350:	b510      	push	{r4, lr}
 8009352:	4b0b      	ldr	r3, [pc, #44]	@ (8009380 <global_stdio_init.part.0+0x30>)
 8009354:	4c0b      	ldr	r4, [pc, #44]	@ (8009384 <global_stdio_init.part.0+0x34>)
 8009356:	4a0c      	ldr	r2, [pc, #48]	@ (8009388 <global_stdio_init.part.0+0x38>)
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	4620      	mov	r0, r4
 800935c:	2200      	movs	r2, #0
 800935e:	2104      	movs	r1, #4
 8009360:	f7ff ff94 	bl	800928c <std>
 8009364:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009368:	2201      	movs	r2, #1
 800936a:	2109      	movs	r1, #9
 800936c:	f7ff ff8e 	bl	800928c <std>
 8009370:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009374:	2202      	movs	r2, #2
 8009376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800937a:	2112      	movs	r1, #18
 800937c:	f7ff bf86 	b.w	800928c <std>
 8009380:	20000974 	.word	0x20000974
 8009384:	2000083c 	.word	0x2000083c
 8009388:	080092f9 	.word	0x080092f9

0800938c <__sfp_lock_acquire>:
 800938c:	4801      	ldr	r0, [pc, #4]	@ (8009394 <__sfp_lock_acquire+0x8>)
 800938e:	f000 b96e 	b.w	800966e <__retarget_lock_acquire_recursive>
 8009392:	bf00      	nop
 8009394:	2000097d 	.word	0x2000097d

08009398 <__sfp_lock_release>:
 8009398:	4801      	ldr	r0, [pc, #4]	@ (80093a0 <__sfp_lock_release+0x8>)
 800939a:	f000 b969 	b.w	8009670 <__retarget_lock_release_recursive>
 800939e:	bf00      	nop
 80093a0:	2000097d 	.word	0x2000097d

080093a4 <__sinit>:
 80093a4:	b510      	push	{r4, lr}
 80093a6:	4604      	mov	r4, r0
 80093a8:	f7ff fff0 	bl	800938c <__sfp_lock_acquire>
 80093ac:	6a23      	ldr	r3, [r4, #32]
 80093ae:	b11b      	cbz	r3, 80093b8 <__sinit+0x14>
 80093b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b4:	f7ff bff0 	b.w	8009398 <__sfp_lock_release>
 80093b8:	4b04      	ldr	r3, [pc, #16]	@ (80093cc <__sinit+0x28>)
 80093ba:	6223      	str	r3, [r4, #32]
 80093bc:	4b04      	ldr	r3, [pc, #16]	@ (80093d0 <__sinit+0x2c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1f5      	bne.n	80093b0 <__sinit+0xc>
 80093c4:	f7ff ffc4 	bl	8009350 <global_stdio_init.part.0>
 80093c8:	e7f2      	b.n	80093b0 <__sinit+0xc>
 80093ca:	bf00      	nop
 80093cc:	08009311 	.word	0x08009311
 80093d0:	20000974 	.word	0x20000974

080093d4 <_fwalk_sglue>:
 80093d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d8:	4607      	mov	r7, r0
 80093da:	4688      	mov	r8, r1
 80093dc:	4614      	mov	r4, r2
 80093de:	2600      	movs	r6, #0
 80093e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093e4:	f1b9 0901 	subs.w	r9, r9, #1
 80093e8:	d505      	bpl.n	80093f6 <_fwalk_sglue+0x22>
 80093ea:	6824      	ldr	r4, [r4, #0]
 80093ec:	2c00      	cmp	r4, #0
 80093ee:	d1f7      	bne.n	80093e0 <_fwalk_sglue+0xc>
 80093f0:	4630      	mov	r0, r6
 80093f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f6:	89ab      	ldrh	r3, [r5, #12]
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d907      	bls.n	800940c <_fwalk_sglue+0x38>
 80093fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009400:	3301      	adds	r3, #1
 8009402:	d003      	beq.n	800940c <_fwalk_sglue+0x38>
 8009404:	4629      	mov	r1, r5
 8009406:	4638      	mov	r0, r7
 8009408:	47c0      	blx	r8
 800940a:	4306      	orrs	r6, r0
 800940c:	3568      	adds	r5, #104	@ 0x68
 800940e:	e7e9      	b.n	80093e4 <_fwalk_sglue+0x10>

08009410 <sniprintf>:
 8009410:	b40c      	push	{r2, r3}
 8009412:	b530      	push	{r4, r5, lr}
 8009414:	4b17      	ldr	r3, [pc, #92]	@ (8009474 <sniprintf+0x64>)
 8009416:	1e0c      	subs	r4, r1, #0
 8009418:	681d      	ldr	r5, [r3, #0]
 800941a:	b09d      	sub	sp, #116	@ 0x74
 800941c:	da08      	bge.n	8009430 <sniprintf+0x20>
 800941e:	238b      	movs	r3, #139	@ 0x8b
 8009420:	602b      	str	r3, [r5, #0]
 8009422:	f04f 30ff 	mov.w	r0, #4294967295
 8009426:	b01d      	add	sp, #116	@ 0x74
 8009428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800942c:	b002      	add	sp, #8
 800942e:	4770      	bx	lr
 8009430:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009434:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009438:	bf14      	ite	ne
 800943a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800943e:	4623      	moveq	r3, r4
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009448:	9002      	str	r0, [sp, #8]
 800944a:	9006      	str	r0, [sp, #24]
 800944c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009450:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009452:	ab21      	add	r3, sp, #132	@ 0x84
 8009454:	a902      	add	r1, sp, #8
 8009456:	4628      	mov	r0, r5
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	f002 fbff 	bl	800bc5c <_svfiprintf_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	bfbc      	itt	lt
 8009462:	238b      	movlt	r3, #139	@ 0x8b
 8009464:	602b      	strlt	r3, [r5, #0]
 8009466:	2c00      	cmp	r4, #0
 8009468:	d0dd      	beq.n	8009426 <sniprintf+0x16>
 800946a:	9b02      	ldr	r3, [sp, #8]
 800946c:	2200      	movs	r2, #0
 800946e:	701a      	strb	r2, [r3, #0]
 8009470:	e7d9      	b.n	8009426 <sniprintf+0x16>
 8009472:	bf00      	nop
 8009474:	20000068 	.word	0x20000068

08009478 <siprintf>:
 8009478:	b40e      	push	{r1, r2, r3}
 800947a:	b500      	push	{lr}
 800947c:	b09c      	sub	sp, #112	@ 0x70
 800947e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009480:	9002      	str	r0, [sp, #8]
 8009482:	9006      	str	r0, [sp, #24]
 8009484:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009488:	4809      	ldr	r0, [pc, #36]	@ (80094b0 <siprintf+0x38>)
 800948a:	9107      	str	r1, [sp, #28]
 800948c:	9104      	str	r1, [sp, #16]
 800948e:	4909      	ldr	r1, [pc, #36]	@ (80094b4 <siprintf+0x3c>)
 8009490:	f853 2b04 	ldr.w	r2, [r3], #4
 8009494:	9105      	str	r1, [sp, #20]
 8009496:	6800      	ldr	r0, [r0, #0]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	a902      	add	r1, sp, #8
 800949c:	f002 fbde 	bl	800bc5c <_svfiprintf_r>
 80094a0:	9b02      	ldr	r3, [sp, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	b01c      	add	sp, #112	@ 0x70
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	20000068 	.word	0x20000068
 80094b4:	ffff0208 	.word	0xffff0208

080094b8 <__sread>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	460c      	mov	r4, r1
 80094bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c0:	f000 f886 	bl	80095d0 <_read_r>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	bfab      	itete	ge
 80094c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094ca:	89a3      	ldrhlt	r3, [r4, #12]
 80094cc:	181b      	addge	r3, r3, r0
 80094ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094d2:	bfac      	ite	ge
 80094d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094d6:	81a3      	strhlt	r3, [r4, #12]
 80094d8:	bd10      	pop	{r4, pc}

080094da <__swrite>:
 80094da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094de:	461f      	mov	r7, r3
 80094e0:	898b      	ldrh	r3, [r1, #12]
 80094e2:	05db      	lsls	r3, r3, #23
 80094e4:	4605      	mov	r5, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	4616      	mov	r6, r2
 80094ea:	d505      	bpl.n	80094f8 <__swrite+0x1e>
 80094ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f0:	2302      	movs	r3, #2
 80094f2:	2200      	movs	r2, #0
 80094f4:	f000 f85a 	bl	80095ac <_lseek_r>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	4632      	mov	r2, r6
 8009506:	463b      	mov	r3, r7
 8009508:	4628      	mov	r0, r5
 800950a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800950e:	f000 b871 	b.w	80095f4 <_write_r>

08009512 <__sseek>:
 8009512:	b510      	push	{r4, lr}
 8009514:	460c      	mov	r4, r1
 8009516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951a:	f000 f847 	bl	80095ac <_lseek_r>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	bf15      	itete	ne
 8009524:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009526:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800952a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800952e:	81a3      	strheq	r3, [r4, #12]
 8009530:	bf18      	it	ne
 8009532:	81a3      	strhne	r3, [r4, #12]
 8009534:	bd10      	pop	{r4, pc}

08009536 <__sclose>:
 8009536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953a:	f000 b827 	b.w	800958c <_close_r>

0800953e <memmove>:
 800953e:	4288      	cmp	r0, r1
 8009540:	b510      	push	{r4, lr}
 8009542:	eb01 0402 	add.w	r4, r1, r2
 8009546:	d902      	bls.n	800954e <memmove+0x10>
 8009548:	4284      	cmp	r4, r0
 800954a:	4623      	mov	r3, r4
 800954c:	d807      	bhi.n	800955e <memmove+0x20>
 800954e:	1e43      	subs	r3, r0, #1
 8009550:	42a1      	cmp	r1, r4
 8009552:	d008      	beq.n	8009566 <memmove+0x28>
 8009554:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009558:	f803 2f01 	strb.w	r2, [r3, #1]!
 800955c:	e7f8      	b.n	8009550 <memmove+0x12>
 800955e:	4402      	add	r2, r0
 8009560:	4601      	mov	r1, r0
 8009562:	428a      	cmp	r2, r1
 8009564:	d100      	bne.n	8009568 <memmove+0x2a>
 8009566:	bd10      	pop	{r4, pc}
 8009568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800956c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009570:	e7f7      	b.n	8009562 <memmove+0x24>

08009572 <memset>:
 8009572:	4402      	add	r2, r0
 8009574:	4603      	mov	r3, r0
 8009576:	4293      	cmp	r3, r2
 8009578:	d100      	bne.n	800957c <memset+0xa>
 800957a:	4770      	bx	lr
 800957c:	f803 1b01 	strb.w	r1, [r3], #1
 8009580:	e7f9      	b.n	8009576 <memset+0x4>
	...

08009584 <_localeconv_r>:
 8009584:	4800      	ldr	r0, [pc, #0]	@ (8009588 <_localeconv_r+0x4>)
 8009586:	4770      	bx	lr
 8009588:	200001a8 	.word	0x200001a8

0800958c <_close_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d06      	ldr	r5, [pc, #24]	@ (80095a8 <_close_r+0x1c>)
 8009590:	2300      	movs	r3, #0
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7f8 fc0a 	bl	8001db0 <_close>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_close_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_close_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20000978 	.word	0x20000978

080095ac <_lseek_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4d07      	ldr	r5, [pc, #28]	@ (80095cc <_lseek_r+0x20>)
 80095b0:	4604      	mov	r4, r0
 80095b2:	4608      	mov	r0, r1
 80095b4:	4611      	mov	r1, r2
 80095b6:	2200      	movs	r2, #0
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f8 fc1f 	bl	8001dfe <_lseek>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_lseek_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_lseek_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	20000978 	.word	0x20000978

080095d0 <_read_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	@ (80095f0 <_read_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f7f8 fbad 	bl	8001d3e <_read>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_read_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_read_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20000978 	.word	0x20000978

080095f4 <_write_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d07      	ldr	r5, [pc, #28]	@ (8009614 <_write_r+0x20>)
 80095f8:	4604      	mov	r4, r0
 80095fa:	4608      	mov	r0, r1
 80095fc:	4611      	mov	r1, r2
 80095fe:	2200      	movs	r2, #0
 8009600:	602a      	str	r2, [r5, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f7f8 fbb8 	bl	8001d78 <_write>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_write_r+0x1e>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_write_r+0x1e>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20000978 	.word	0x20000978

08009618 <__errno>:
 8009618:	4b01      	ldr	r3, [pc, #4]	@ (8009620 <__errno+0x8>)
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	20000068 	.word	0x20000068

08009624 <__libc_init_array>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	4d0d      	ldr	r5, [pc, #52]	@ (800965c <__libc_init_array+0x38>)
 8009628:	4c0d      	ldr	r4, [pc, #52]	@ (8009660 <__libc_init_array+0x3c>)
 800962a:	1b64      	subs	r4, r4, r5
 800962c:	10a4      	asrs	r4, r4, #2
 800962e:	2600      	movs	r6, #0
 8009630:	42a6      	cmp	r6, r4
 8009632:	d109      	bne.n	8009648 <__libc_init_array+0x24>
 8009634:	4d0b      	ldr	r5, [pc, #44]	@ (8009664 <__libc_init_array+0x40>)
 8009636:	4c0c      	ldr	r4, [pc, #48]	@ (8009668 <__libc_init_array+0x44>)
 8009638:	f003 fb58 	bl	800ccec <_init>
 800963c:	1b64      	subs	r4, r4, r5
 800963e:	10a4      	asrs	r4, r4, #2
 8009640:	2600      	movs	r6, #0
 8009642:	42a6      	cmp	r6, r4
 8009644:	d105      	bne.n	8009652 <__libc_init_array+0x2e>
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	f855 3b04 	ldr.w	r3, [r5], #4
 800964c:	4798      	blx	r3
 800964e:	3601      	adds	r6, #1
 8009650:	e7ee      	b.n	8009630 <__libc_init_array+0xc>
 8009652:	f855 3b04 	ldr.w	r3, [r5], #4
 8009656:	4798      	blx	r3
 8009658:	3601      	adds	r6, #1
 800965a:	e7f2      	b.n	8009642 <__libc_init_array+0x1e>
 800965c:	0800e668 	.word	0x0800e668
 8009660:	0800e668 	.word	0x0800e668
 8009664:	0800e668 	.word	0x0800e668
 8009668:	0800e66c 	.word	0x0800e66c

0800966c <__retarget_lock_init_recursive>:
 800966c:	4770      	bx	lr

0800966e <__retarget_lock_acquire_recursive>:
 800966e:	4770      	bx	lr

08009670 <__retarget_lock_release_recursive>:
 8009670:	4770      	bx	lr

08009672 <memcpy>:
 8009672:	440a      	add	r2, r1
 8009674:	4291      	cmp	r1, r2
 8009676:	f100 33ff 	add.w	r3, r0, #4294967295
 800967a:	d100      	bne.n	800967e <memcpy+0xc>
 800967c:	4770      	bx	lr
 800967e:	b510      	push	{r4, lr}
 8009680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009688:	4291      	cmp	r1, r2
 800968a:	d1f9      	bne.n	8009680 <memcpy+0xe>
 800968c:	bd10      	pop	{r4, pc}
	...

08009690 <nanf>:
 8009690:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009698 <nanf+0x8>
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	7fc00000 	.word	0x7fc00000

0800969c <quorem>:
 800969c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	6903      	ldr	r3, [r0, #16]
 80096a2:	690c      	ldr	r4, [r1, #16]
 80096a4:	42a3      	cmp	r3, r4
 80096a6:	4607      	mov	r7, r0
 80096a8:	db7e      	blt.n	80097a8 <quorem+0x10c>
 80096aa:	3c01      	subs	r4, #1
 80096ac:	f101 0814 	add.w	r8, r1, #20
 80096b0:	00a3      	lsls	r3, r4, #2
 80096b2:	f100 0514 	add.w	r5, r0, #20
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c6:	3301      	adds	r3, #1
 80096c8:	429a      	cmp	r2, r3
 80096ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80096d2:	d32e      	bcc.n	8009732 <quorem+0x96>
 80096d4:	f04f 0a00 	mov.w	sl, #0
 80096d8:	46c4      	mov	ip, r8
 80096da:	46ae      	mov	lr, r5
 80096dc:	46d3      	mov	fp, sl
 80096de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096e2:	b298      	uxth	r0, r3
 80096e4:	fb06 a000 	mla	r0, r6, r0, sl
 80096e8:	0c02      	lsrs	r2, r0, #16
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	fb06 2303 	mla	r3, r6, r3, r2
 80096f0:	f8de 2000 	ldr.w	r2, [lr]
 80096f4:	b280      	uxth	r0, r0
 80096f6:	b292      	uxth	r2, r2
 80096f8:	1a12      	subs	r2, r2, r0
 80096fa:	445a      	add	r2, fp
 80096fc:	f8de 0000 	ldr.w	r0, [lr]
 8009700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009704:	b29b      	uxth	r3, r3
 8009706:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800970a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800970e:	b292      	uxth	r2, r2
 8009710:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009714:	45e1      	cmp	r9, ip
 8009716:	f84e 2b04 	str.w	r2, [lr], #4
 800971a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800971e:	d2de      	bcs.n	80096de <quorem+0x42>
 8009720:	9b00      	ldr	r3, [sp, #0]
 8009722:	58eb      	ldr	r3, [r5, r3]
 8009724:	b92b      	cbnz	r3, 8009732 <quorem+0x96>
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	3b04      	subs	r3, #4
 800972a:	429d      	cmp	r5, r3
 800972c:	461a      	mov	r2, r3
 800972e:	d32f      	bcc.n	8009790 <quorem+0xf4>
 8009730:	613c      	str	r4, [r7, #16]
 8009732:	4638      	mov	r0, r7
 8009734:	f001 f9c4 	bl	800aac0 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	db25      	blt.n	8009788 <quorem+0xec>
 800973c:	4629      	mov	r1, r5
 800973e:	2000      	movs	r0, #0
 8009740:	f858 2b04 	ldr.w	r2, [r8], #4
 8009744:	f8d1 c000 	ldr.w	ip, [r1]
 8009748:	fa1f fe82 	uxth.w	lr, r2
 800974c:	fa1f f38c 	uxth.w	r3, ip
 8009750:	eba3 030e 	sub.w	r3, r3, lr
 8009754:	4403      	add	r3, r0
 8009756:	0c12      	lsrs	r2, r2, #16
 8009758:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800975c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009760:	b29b      	uxth	r3, r3
 8009762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009766:	45c1      	cmp	r9, r8
 8009768:	f841 3b04 	str.w	r3, [r1], #4
 800976c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009770:	d2e6      	bcs.n	8009740 <quorem+0xa4>
 8009772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800977a:	b922      	cbnz	r2, 8009786 <quorem+0xea>
 800977c:	3b04      	subs	r3, #4
 800977e:	429d      	cmp	r5, r3
 8009780:	461a      	mov	r2, r3
 8009782:	d30b      	bcc.n	800979c <quorem+0x100>
 8009784:	613c      	str	r4, [r7, #16]
 8009786:	3601      	adds	r6, #1
 8009788:	4630      	mov	r0, r6
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	3b04      	subs	r3, #4
 8009794:	2a00      	cmp	r2, #0
 8009796:	d1cb      	bne.n	8009730 <quorem+0x94>
 8009798:	3c01      	subs	r4, #1
 800979a:	e7c6      	b.n	800972a <quorem+0x8e>
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	3b04      	subs	r3, #4
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	d1ef      	bne.n	8009784 <quorem+0xe8>
 80097a4:	3c01      	subs	r4, #1
 80097a6:	e7ea      	b.n	800977e <quorem+0xe2>
 80097a8:	2000      	movs	r0, #0
 80097aa:	e7ee      	b.n	800978a <quorem+0xee>
 80097ac:	0000      	movs	r0, r0
	...

080097b0 <_dtoa_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	69c7      	ldr	r7, [r0, #28]
 80097b6:	b099      	sub	sp, #100	@ 0x64
 80097b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80097bc:	ec55 4b10 	vmov	r4, r5, d0
 80097c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80097c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80097c4:	4683      	mov	fp, r0
 80097c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80097c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097ca:	b97f      	cbnz	r7, 80097ec <_dtoa_r+0x3c>
 80097cc:	2010      	movs	r0, #16
 80097ce:	f000 fdfd 	bl	800a3cc <malloc>
 80097d2:	4602      	mov	r2, r0
 80097d4:	f8cb 001c 	str.w	r0, [fp, #28]
 80097d8:	b920      	cbnz	r0, 80097e4 <_dtoa_r+0x34>
 80097da:	4ba7      	ldr	r3, [pc, #668]	@ (8009a78 <_dtoa_r+0x2c8>)
 80097dc:	21ef      	movs	r1, #239	@ 0xef
 80097de:	48a7      	ldr	r0, [pc, #668]	@ (8009a7c <_dtoa_r+0x2cc>)
 80097e0:	f002 fc0e 	bl	800c000 <__assert_func>
 80097e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80097e8:	6007      	str	r7, [r0, #0]
 80097ea:	60c7      	str	r7, [r0, #12]
 80097ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80097f0:	6819      	ldr	r1, [r3, #0]
 80097f2:	b159      	cbz	r1, 800980c <_dtoa_r+0x5c>
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	604a      	str	r2, [r1, #4]
 80097f8:	2301      	movs	r3, #1
 80097fa:	4093      	lsls	r3, r2
 80097fc:	608b      	str	r3, [r1, #8]
 80097fe:	4658      	mov	r0, fp
 8009800:	f000 feda 	bl	800a5b8 <_Bfree>
 8009804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	1e2b      	subs	r3, r5, #0
 800980e:	bfb9      	ittee	lt
 8009810:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009814:	9303      	strlt	r3, [sp, #12]
 8009816:	2300      	movge	r3, #0
 8009818:	6033      	strge	r3, [r6, #0]
 800981a:	9f03      	ldr	r7, [sp, #12]
 800981c:	4b98      	ldr	r3, [pc, #608]	@ (8009a80 <_dtoa_r+0x2d0>)
 800981e:	bfbc      	itt	lt
 8009820:	2201      	movlt	r2, #1
 8009822:	6032      	strlt	r2, [r6, #0]
 8009824:	43bb      	bics	r3, r7
 8009826:	d112      	bne.n	800984e <_dtoa_r+0x9e>
 8009828:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800982a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009834:	4323      	orrs	r3, r4
 8009836:	f000 854d 	beq.w	800a2d4 <_dtoa_r+0xb24>
 800983a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800983c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009a94 <_dtoa_r+0x2e4>
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 854f 	beq.w	800a2e4 <_dtoa_r+0xb34>
 8009846:	f10a 0303 	add.w	r3, sl, #3
 800984a:	f000 bd49 	b.w	800a2e0 <_dtoa_r+0xb30>
 800984e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	ec51 0b17 	vmov	r0, r1, d7
 8009858:	2300      	movs	r3, #0
 800985a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800985e:	f7f7 f953 	bl	8000b08 <__aeabi_dcmpeq>
 8009862:	4680      	mov	r8, r0
 8009864:	b158      	cbz	r0, 800987e <_dtoa_r+0xce>
 8009866:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009868:	2301      	movs	r3, #1
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800986e:	b113      	cbz	r3, 8009876 <_dtoa_r+0xc6>
 8009870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009872:	4b84      	ldr	r3, [pc, #528]	@ (8009a84 <_dtoa_r+0x2d4>)
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009a98 <_dtoa_r+0x2e8>
 800987a:	f000 bd33 	b.w	800a2e4 <_dtoa_r+0xb34>
 800987e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009882:	aa16      	add	r2, sp, #88	@ 0x58
 8009884:	a917      	add	r1, sp, #92	@ 0x5c
 8009886:	4658      	mov	r0, fp
 8009888:	f001 fa3a 	bl	800ad00 <__d2b>
 800988c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009890:	4681      	mov	r9, r0
 8009892:	2e00      	cmp	r6, #0
 8009894:	d077      	beq.n	8009986 <_dtoa_r+0x1d6>
 8009896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009898:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800989c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80098a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80098ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80098b0:	4619      	mov	r1, r3
 80098b2:	2200      	movs	r2, #0
 80098b4:	4b74      	ldr	r3, [pc, #464]	@ (8009a88 <_dtoa_r+0x2d8>)
 80098b6:	f7f6 fd07 	bl	80002c8 <__aeabi_dsub>
 80098ba:	a369      	add	r3, pc, #420	@ (adr r3, 8009a60 <_dtoa_r+0x2b0>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f7f6 feba 	bl	8000638 <__aeabi_dmul>
 80098c4:	a368      	add	r3, pc, #416	@ (adr r3, 8009a68 <_dtoa_r+0x2b8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fcff 	bl	80002cc <__adddf3>
 80098ce:	4604      	mov	r4, r0
 80098d0:	4630      	mov	r0, r6
 80098d2:	460d      	mov	r5, r1
 80098d4:	f7f6 fe46 	bl	8000564 <__aeabi_i2d>
 80098d8:	a365      	add	r3, pc, #404	@ (adr r3, 8009a70 <_dtoa_r+0x2c0>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7f6 feab 	bl	8000638 <__aeabi_dmul>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 fcef 	bl	80002cc <__adddf3>
 80098ee:	4604      	mov	r4, r0
 80098f0:	460d      	mov	r5, r1
 80098f2:	f7f7 f951 	bl	8000b98 <__aeabi_d2iz>
 80098f6:	2200      	movs	r2, #0
 80098f8:	4607      	mov	r7, r0
 80098fa:	2300      	movs	r3, #0
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f7 f90c 	bl	8000b1c <__aeabi_dcmplt>
 8009904:	b140      	cbz	r0, 8009918 <_dtoa_r+0x168>
 8009906:	4638      	mov	r0, r7
 8009908:	f7f6 fe2c 	bl	8000564 <__aeabi_i2d>
 800990c:	4622      	mov	r2, r4
 800990e:	462b      	mov	r3, r5
 8009910:	f7f7 f8fa 	bl	8000b08 <__aeabi_dcmpeq>
 8009914:	b900      	cbnz	r0, 8009918 <_dtoa_r+0x168>
 8009916:	3f01      	subs	r7, #1
 8009918:	2f16      	cmp	r7, #22
 800991a:	d851      	bhi.n	80099c0 <_dtoa_r+0x210>
 800991c:	4b5b      	ldr	r3, [pc, #364]	@ (8009a8c <_dtoa_r+0x2dc>)
 800991e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800992a:	f7f7 f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800992e:	2800      	cmp	r0, #0
 8009930:	d048      	beq.n	80099c4 <_dtoa_r+0x214>
 8009932:	3f01      	subs	r7, #1
 8009934:	2300      	movs	r3, #0
 8009936:	9312      	str	r3, [sp, #72]	@ 0x48
 8009938:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800993a:	1b9b      	subs	r3, r3, r6
 800993c:	1e5a      	subs	r2, r3, #1
 800993e:	bf44      	itt	mi
 8009940:	f1c3 0801 	rsbmi	r8, r3, #1
 8009944:	2300      	movmi	r3, #0
 8009946:	9208      	str	r2, [sp, #32]
 8009948:	bf54      	ite	pl
 800994a:	f04f 0800 	movpl.w	r8, #0
 800994e:	9308      	strmi	r3, [sp, #32]
 8009950:	2f00      	cmp	r7, #0
 8009952:	db39      	blt.n	80099c8 <_dtoa_r+0x218>
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009958:	443b      	add	r3, r7
 800995a:	9308      	str	r3, [sp, #32]
 800995c:	2300      	movs	r3, #0
 800995e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009962:	2b09      	cmp	r3, #9
 8009964:	d864      	bhi.n	8009a30 <_dtoa_r+0x280>
 8009966:	2b05      	cmp	r3, #5
 8009968:	bfc4      	itt	gt
 800996a:	3b04      	subgt	r3, #4
 800996c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800996e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009970:	f1a3 0302 	sub.w	r3, r3, #2
 8009974:	bfcc      	ite	gt
 8009976:	2400      	movgt	r4, #0
 8009978:	2401      	movle	r4, #1
 800997a:	2b03      	cmp	r3, #3
 800997c:	d863      	bhi.n	8009a46 <_dtoa_r+0x296>
 800997e:	e8df f003 	tbb	[pc, r3]
 8009982:	372a      	.short	0x372a
 8009984:	5535      	.short	0x5535
 8009986:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800998a:	441e      	add	r6, r3
 800998c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009990:	2b20      	cmp	r3, #32
 8009992:	bfc1      	itttt	gt
 8009994:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009998:	409f      	lslgt	r7, r3
 800999a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800999e:	fa24 f303 	lsrgt.w	r3, r4, r3
 80099a2:	bfd6      	itet	le
 80099a4:	f1c3 0320 	rsble	r3, r3, #32
 80099a8:	ea47 0003 	orrgt.w	r0, r7, r3
 80099ac:	fa04 f003 	lslle.w	r0, r4, r3
 80099b0:	f7f6 fdc8 	bl	8000544 <__aeabi_ui2d>
 80099b4:	2201      	movs	r2, #1
 80099b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80099ba:	3e01      	subs	r6, #1
 80099bc:	9214      	str	r2, [sp, #80]	@ 0x50
 80099be:	e777      	b.n	80098b0 <_dtoa_r+0x100>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e7b8      	b.n	8009936 <_dtoa_r+0x186>
 80099c4:	9012      	str	r0, [sp, #72]	@ 0x48
 80099c6:	e7b7      	b.n	8009938 <_dtoa_r+0x188>
 80099c8:	427b      	negs	r3, r7
 80099ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80099cc:	2300      	movs	r3, #0
 80099ce:	eba8 0807 	sub.w	r8, r8, r7
 80099d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099d4:	e7c4      	b.n	8009960 <_dtoa_r+0x1b0>
 80099d6:	2300      	movs	r3, #0
 80099d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dc35      	bgt.n	8009a4c <_dtoa_r+0x29c>
 80099e0:	2301      	movs	r3, #1
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	461a      	mov	r2, r3
 80099e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80099ea:	e00b      	b.n	8009a04 <_dtoa_r+0x254>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e7f3      	b.n	80099d8 <_dtoa_r+0x228>
 80099f0:	2300      	movs	r3, #0
 80099f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	3301      	adds	r3, #1
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	bfb8      	it	lt
 8009a02:	2301      	movlt	r3, #1
 8009a04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	f102 0514 	add.w	r5, r2, #20
 8009a10:	429d      	cmp	r5, r3
 8009a12:	d91f      	bls.n	8009a54 <_dtoa_r+0x2a4>
 8009a14:	6041      	str	r1, [r0, #4]
 8009a16:	4658      	mov	r0, fp
 8009a18:	f000 fd8e 	bl	800a538 <_Balloc>
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d13c      	bne.n	8009a9c <_dtoa_r+0x2ec>
 8009a22:	4b1b      	ldr	r3, [pc, #108]	@ (8009a90 <_dtoa_r+0x2e0>)
 8009a24:	4602      	mov	r2, r0
 8009a26:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a2a:	e6d8      	b.n	80097de <_dtoa_r+0x2e>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e7e0      	b.n	80099f2 <_dtoa_r+0x242>
 8009a30:	2401      	movs	r4, #1
 8009a32:	2300      	movs	r3, #0
 8009a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a38:	f04f 33ff 	mov.w	r3, #4294967295
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	9307      	str	r3, [sp, #28]
 8009a40:	2200      	movs	r2, #0
 8009a42:	2312      	movs	r3, #18
 8009a44:	e7d0      	b.n	80099e8 <_dtoa_r+0x238>
 8009a46:	2301      	movs	r3, #1
 8009a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a4a:	e7f5      	b.n	8009a38 <_dtoa_r+0x288>
 8009a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	9307      	str	r3, [sp, #28]
 8009a52:	e7d7      	b.n	8009a04 <_dtoa_r+0x254>
 8009a54:	3101      	adds	r1, #1
 8009a56:	0052      	lsls	r2, r2, #1
 8009a58:	e7d8      	b.n	8009a0c <_dtoa_r+0x25c>
 8009a5a:	bf00      	nop
 8009a5c:	f3af 8000 	nop.w
 8009a60:	636f4361 	.word	0x636f4361
 8009a64:	3fd287a7 	.word	0x3fd287a7
 8009a68:	8b60c8b3 	.word	0x8b60c8b3
 8009a6c:	3fc68a28 	.word	0x3fc68a28
 8009a70:	509f79fb 	.word	0x509f79fb
 8009a74:	3fd34413 	.word	0x3fd34413
 8009a78:	0800e27a 	.word	0x0800e27a
 8009a7c:	0800e291 	.word	0x0800e291
 8009a80:	7ff00000 	.word	0x7ff00000
 8009a84:	0800e245 	.word	0x0800e245
 8009a88:	3ff80000 	.word	0x3ff80000
 8009a8c:	0800e388 	.word	0x0800e388
 8009a90:	0800e2e9 	.word	0x0800e2e9
 8009a94:	0800e276 	.word	0x0800e276
 8009a98:	0800e244 	.word	0x0800e244
 8009a9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009aa0:	6018      	str	r0, [r3, #0]
 8009aa2:	9b07      	ldr	r3, [sp, #28]
 8009aa4:	2b0e      	cmp	r3, #14
 8009aa6:	f200 80a4 	bhi.w	8009bf2 <_dtoa_r+0x442>
 8009aaa:	2c00      	cmp	r4, #0
 8009aac:	f000 80a1 	beq.w	8009bf2 <_dtoa_r+0x442>
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	dd33      	ble.n	8009b1c <_dtoa_r+0x36c>
 8009ab4:	4bad      	ldr	r3, [pc, #692]	@ (8009d6c <_dtoa_r+0x5bc>)
 8009ab6:	f007 020f 	and.w	r2, r7, #15
 8009aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009abe:	ed93 7b00 	vldr	d7, [r3]
 8009ac2:	05f8      	lsls	r0, r7, #23
 8009ac4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009acc:	d516      	bpl.n	8009afc <_dtoa_r+0x34c>
 8009ace:	4ba8      	ldr	r3, [pc, #672]	@ (8009d70 <_dtoa_r+0x5c0>)
 8009ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ad8:	f7f6 fed8 	bl	800088c <__aeabi_ddiv>
 8009adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ae0:	f004 040f 	and.w	r4, r4, #15
 8009ae4:	2603      	movs	r6, #3
 8009ae6:	4da2      	ldr	r5, [pc, #648]	@ (8009d70 <_dtoa_r+0x5c0>)
 8009ae8:	b954      	cbnz	r4, 8009b00 <_dtoa_r+0x350>
 8009aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009af2:	f7f6 fecb 	bl	800088c <__aeabi_ddiv>
 8009af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009afa:	e028      	b.n	8009b4e <_dtoa_r+0x39e>
 8009afc:	2602      	movs	r6, #2
 8009afe:	e7f2      	b.n	8009ae6 <_dtoa_r+0x336>
 8009b00:	07e1      	lsls	r1, r4, #31
 8009b02:	d508      	bpl.n	8009b16 <_dtoa_r+0x366>
 8009b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b0c:	f7f6 fd94 	bl	8000638 <__aeabi_dmul>
 8009b10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b14:	3601      	adds	r6, #1
 8009b16:	1064      	asrs	r4, r4, #1
 8009b18:	3508      	adds	r5, #8
 8009b1a:	e7e5      	b.n	8009ae8 <_dtoa_r+0x338>
 8009b1c:	f000 80d2 	beq.w	8009cc4 <_dtoa_r+0x514>
 8009b20:	427c      	negs	r4, r7
 8009b22:	4b92      	ldr	r3, [pc, #584]	@ (8009d6c <_dtoa_r+0x5bc>)
 8009b24:	4d92      	ldr	r5, [pc, #584]	@ (8009d70 <_dtoa_r+0x5c0>)
 8009b26:	f004 020f 	and.w	r2, r4, #15
 8009b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b36:	f7f6 fd7f 	bl	8000638 <__aeabi_dmul>
 8009b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b3e:	1124      	asrs	r4, r4, #4
 8009b40:	2300      	movs	r3, #0
 8009b42:	2602      	movs	r6, #2
 8009b44:	2c00      	cmp	r4, #0
 8009b46:	f040 80b2 	bne.w	8009cae <_dtoa_r+0x4fe>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1d3      	bne.n	8009af6 <_dtoa_r+0x346>
 8009b4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80b7 	beq.w	8009cc8 <_dtoa_r+0x518>
 8009b5a:	4b86      	ldr	r3, [pc, #536]	@ (8009d74 <_dtoa_r+0x5c4>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f000 80ae 	beq.w	8009cc8 <_dtoa_r+0x518>
 8009b6c:	9b07      	ldr	r3, [sp, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 80aa 	beq.w	8009cc8 <_dtoa_r+0x518>
 8009b74:	9b00      	ldr	r3, [sp, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	dd37      	ble.n	8009bea <_dtoa_r+0x43a>
 8009b7a:	1e7b      	subs	r3, r7, #1
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	4620      	mov	r0, r4
 8009b80:	4b7d      	ldr	r3, [pc, #500]	@ (8009d78 <_dtoa_r+0x5c8>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	4629      	mov	r1, r5
 8009b86:	f7f6 fd57 	bl	8000638 <__aeabi_dmul>
 8009b8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b8e:	9c00      	ldr	r4, [sp, #0]
 8009b90:	3601      	adds	r6, #1
 8009b92:	4630      	mov	r0, r6
 8009b94:	f7f6 fce6 	bl	8000564 <__aeabi_i2d>
 8009b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b9c:	f7f6 fd4c 	bl	8000638 <__aeabi_dmul>
 8009ba0:	4b76      	ldr	r3, [pc, #472]	@ (8009d7c <_dtoa_r+0x5cc>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f7f6 fb92 	bl	80002cc <__adddf3>
 8009ba8:	4605      	mov	r5, r0
 8009baa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009bae:	2c00      	cmp	r4, #0
 8009bb0:	f040 808d 	bne.w	8009cce <_dtoa_r+0x51e>
 8009bb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bb8:	4b71      	ldr	r3, [pc, #452]	@ (8009d80 <_dtoa_r+0x5d0>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 fb84 	bl	80002c8 <__aeabi_dsub>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4633      	mov	r3, r6
 8009bcc:	f7f6 ffc4 	bl	8000b58 <__aeabi_dcmpgt>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f040 828b 	bne.w	800a0ec <_dtoa_r+0x93c>
 8009bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bda:	462a      	mov	r2, r5
 8009bdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009be0:	f7f6 ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f040 8128 	bne.w	8009e3a <_dtoa_r+0x68a>
 8009bea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009bee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009bf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f2c0 815a 	blt.w	8009eae <_dtoa_r+0x6fe>
 8009bfa:	2f0e      	cmp	r7, #14
 8009bfc:	f300 8157 	bgt.w	8009eae <_dtoa_r+0x6fe>
 8009c00:	4b5a      	ldr	r3, [pc, #360]	@ (8009d6c <_dtoa_r+0x5bc>)
 8009c02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c06:	ed93 7b00 	vldr	d7, [r3]
 8009c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	ed8d 7b00 	vstr	d7, [sp]
 8009c12:	da03      	bge.n	8009c1c <_dtoa_r+0x46c>
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f340 8101 	ble.w	8009e1e <_dtoa_r+0x66e>
 8009c1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c20:	4656      	mov	r6, sl
 8009c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c26:	4620      	mov	r0, r4
 8009c28:	4629      	mov	r1, r5
 8009c2a:	f7f6 fe2f 	bl	800088c <__aeabi_ddiv>
 8009c2e:	f7f6 ffb3 	bl	8000b98 <__aeabi_d2iz>
 8009c32:	4680      	mov	r8, r0
 8009c34:	f7f6 fc96 	bl	8000564 <__aeabi_i2d>
 8009c38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c3c:	f7f6 fcfc 	bl	8000638 <__aeabi_dmul>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4620      	mov	r0, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c4c:	f7f6 fb3c 	bl	80002c8 <__aeabi_dsub>
 8009c50:	f806 4b01 	strb.w	r4, [r6], #1
 8009c54:	9d07      	ldr	r5, [sp, #28]
 8009c56:	eba6 040a 	sub.w	r4, r6, sl
 8009c5a:	42a5      	cmp	r5, r4
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	f040 8117 	bne.w	8009e92 <_dtoa_r+0x6e2>
 8009c64:	f7f6 fb32 	bl	80002cc <__adddf3>
 8009c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	460d      	mov	r5, r1
 8009c70:	f7f6 ff72 	bl	8000b58 <__aeabi_dcmpgt>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f040 80f9 	bne.w	8009e6c <_dtoa_r+0x6bc>
 8009c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8009c86:	b118      	cbz	r0, 8009c90 <_dtoa_r+0x4e0>
 8009c88:	f018 0f01 	tst.w	r8, #1
 8009c8c:	f040 80ee 	bne.w	8009e6c <_dtoa_r+0x6bc>
 8009c90:	4649      	mov	r1, r9
 8009c92:	4658      	mov	r0, fp
 8009c94:	f000 fc90 	bl	800a5b8 <_Bfree>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	7033      	strb	r3, [r6, #0]
 8009c9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c9e:	3701      	adds	r7, #1
 8009ca0:	601f      	str	r7, [r3, #0]
 8009ca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 831d 	beq.w	800a2e4 <_dtoa_r+0xb34>
 8009caa:	601e      	str	r6, [r3, #0]
 8009cac:	e31a      	b.n	800a2e4 <_dtoa_r+0xb34>
 8009cae:	07e2      	lsls	r2, r4, #31
 8009cb0:	d505      	bpl.n	8009cbe <_dtoa_r+0x50e>
 8009cb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cb6:	f7f6 fcbf 	bl	8000638 <__aeabi_dmul>
 8009cba:	3601      	adds	r6, #1
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	1064      	asrs	r4, r4, #1
 8009cc0:	3508      	adds	r5, #8
 8009cc2:	e73f      	b.n	8009b44 <_dtoa_r+0x394>
 8009cc4:	2602      	movs	r6, #2
 8009cc6:	e742      	b.n	8009b4e <_dtoa_r+0x39e>
 8009cc8:	9c07      	ldr	r4, [sp, #28]
 8009cca:	9704      	str	r7, [sp, #16]
 8009ccc:	e761      	b.n	8009b92 <_dtoa_r+0x3e2>
 8009cce:	4b27      	ldr	r3, [pc, #156]	@ (8009d6c <_dtoa_r+0x5bc>)
 8009cd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cda:	4454      	add	r4, sl
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	d053      	beq.n	8009d88 <_dtoa_r+0x5d8>
 8009ce0:	4928      	ldr	r1, [pc, #160]	@ (8009d84 <_dtoa_r+0x5d4>)
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	f7f6 fdd2 	bl	800088c <__aeabi_ddiv>
 8009ce8:	4633      	mov	r3, r6
 8009cea:	462a      	mov	r2, r5
 8009cec:	f7f6 faec 	bl	80002c8 <__aeabi_dsub>
 8009cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cf4:	4656      	mov	r6, sl
 8009cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cfa:	f7f6 ff4d 	bl	8000b98 <__aeabi_d2iz>
 8009cfe:	4605      	mov	r5, r0
 8009d00:	f7f6 fc30 	bl	8000564 <__aeabi_i2d>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d0c:	f7f6 fadc 	bl	80002c8 <__aeabi_dsub>
 8009d10:	3530      	adds	r5, #48	@ 0x30
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d1a:	f806 5b01 	strb.w	r5, [r6], #1
 8009d1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d22:	f7f6 fefb 	bl	8000b1c <__aeabi_dcmplt>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d171      	bne.n	8009e0e <_dtoa_r+0x65e>
 8009d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d2e:	4911      	ldr	r1, [pc, #68]	@ (8009d74 <_dtoa_r+0x5c4>)
 8009d30:	2000      	movs	r0, #0
 8009d32:	f7f6 fac9 	bl	80002c8 <__aeabi_dsub>
 8009d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d3a:	f7f6 feef 	bl	8000b1c <__aeabi_dcmplt>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f040 8095 	bne.w	8009e6e <_dtoa_r+0x6be>
 8009d44:	42a6      	cmp	r6, r4
 8009d46:	f43f af50 	beq.w	8009bea <_dtoa_r+0x43a>
 8009d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d78 <_dtoa_r+0x5c8>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	f7f6 fc71 	bl	8000638 <__aeabi_dmul>
 8009d56:	4b08      	ldr	r3, [pc, #32]	@ (8009d78 <_dtoa_r+0x5c8>)
 8009d58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d62:	f7f6 fc69 	bl	8000638 <__aeabi_dmul>
 8009d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6a:	e7c4      	b.n	8009cf6 <_dtoa_r+0x546>
 8009d6c:	0800e388 	.word	0x0800e388
 8009d70:	0800e360 	.word	0x0800e360
 8009d74:	3ff00000 	.word	0x3ff00000
 8009d78:	40240000 	.word	0x40240000
 8009d7c:	401c0000 	.word	0x401c0000
 8009d80:	40140000 	.word	0x40140000
 8009d84:	3fe00000 	.word	0x3fe00000
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f7f6 fc54 	bl	8000638 <__aeabi_dmul>
 8009d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d94:	9415      	str	r4, [sp, #84]	@ 0x54
 8009d96:	4656      	mov	r6, sl
 8009d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d9c:	f7f6 fefc 	bl	8000b98 <__aeabi_d2iz>
 8009da0:	4605      	mov	r5, r0
 8009da2:	f7f6 fbdf 	bl	8000564 <__aeabi_i2d>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dae:	f7f6 fa8b 	bl	80002c8 <__aeabi_dsub>
 8009db2:	3530      	adds	r5, #48	@ 0x30
 8009db4:	f806 5b01 	strb.w	r5, [r6], #1
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	42a6      	cmp	r6, r4
 8009dbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dc2:	f04f 0200 	mov.w	r2, #0
 8009dc6:	d124      	bne.n	8009e12 <_dtoa_r+0x662>
 8009dc8:	4bac      	ldr	r3, [pc, #688]	@ (800a07c <_dtoa_r+0x8cc>)
 8009dca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009dce:	f7f6 fa7d 	bl	80002cc <__adddf3>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dda:	f7f6 febd 	bl	8000b58 <__aeabi_dcmpgt>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d145      	bne.n	8009e6e <_dtoa_r+0x6be>
 8009de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009de6:	49a5      	ldr	r1, [pc, #660]	@ (800a07c <_dtoa_r+0x8cc>)
 8009de8:	2000      	movs	r0, #0
 8009dea:	f7f6 fa6d 	bl	80002c8 <__aeabi_dsub>
 8009dee:	4602      	mov	r2, r0
 8009df0:	460b      	mov	r3, r1
 8009df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df6:	f7f6 fe91 	bl	8000b1c <__aeabi_dcmplt>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	f43f aef5 	beq.w	8009bea <_dtoa_r+0x43a>
 8009e00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009e02:	1e73      	subs	r3, r6, #1
 8009e04:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e0a:	2b30      	cmp	r3, #48	@ 0x30
 8009e0c:	d0f8      	beq.n	8009e00 <_dtoa_r+0x650>
 8009e0e:	9f04      	ldr	r7, [sp, #16]
 8009e10:	e73e      	b.n	8009c90 <_dtoa_r+0x4e0>
 8009e12:	4b9b      	ldr	r3, [pc, #620]	@ (800a080 <_dtoa_r+0x8d0>)
 8009e14:	f7f6 fc10 	bl	8000638 <__aeabi_dmul>
 8009e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1c:	e7bc      	b.n	8009d98 <_dtoa_r+0x5e8>
 8009e1e:	d10c      	bne.n	8009e3a <_dtoa_r+0x68a>
 8009e20:	4b98      	ldr	r3, [pc, #608]	@ (800a084 <_dtoa_r+0x8d4>)
 8009e22:	2200      	movs	r2, #0
 8009e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e28:	f7f6 fc06 	bl	8000638 <__aeabi_dmul>
 8009e2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e30:	f7f6 fe88 	bl	8000b44 <__aeabi_dcmpge>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f000 8157 	beq.w	800a0e8 <_dtoa_r+0x938>
 8009e3a:	2400      	movs	r4, #0
 8009e3c:	4625      	mov	r5, r4
 8009e3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e40:	43db      	mvns	r3, r3
 8009e42:	9304      	str	r3, [sp, #16]
 8009e44:	4656      	mov	r6, sl
 8009e46:	2700      	movs	r7, #0
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4658      	mov	r0, fp
 8009e4c:	f000 fbb4 	bl	800a5b8 <_Bfree>
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	d0dc      	beq.n	8009e0e <_dtoa_r+0x65e>
 8009e54:	b12f      	cbz	r7, 8009e62 <_dtoa_r+0x6b2>
 8009e56:	42af      	cmp	r7, r5
 8009e58:	d003      	beq.n	8009e62 <_dtoa_r+0x6b2>
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f000 fbab 	bl	800a5b8 <_Bfree>
 8009e62:	4629      	mov	r1, r5
 8009e64:	4658      	mov	r0, fp
 8009e66:	f000 fba7 	bl	800a5b8 <_Bfree>
 8009e6a:	e7d0      	b.n	8009e0e <_dtoa_r+0x65e>
 8009e6c:	9704      	str	r7, [sp, #16]
 8009e6e:	4633      	mov	r3, r6
 8009e70:	461e      	mov	r6, r3
 8009e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e76:	2a39      	cmp	r2, #57	@ 0x39
 8009e78:	d107      	bne.n	8009e8a <_dtoa_r+0x6da>
 8009e7a:	459a      	cmp	sl, r3
 8009e7c:	d1f8      	bne.n	8009e70 <_dtoa_r+0x6c0>
 8009e7e:	9a04      	ldr	r2, [sp, #16]
 8009e80:	3201      	adds	r2, #1
 8009e82:	9204      	str	r2, [sp, #16]
 8009e84:	2230      	movs	r2, #48	@ 0x30
 8009e86:	f88a 2000 	strb.w	r2, [sl]
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	3201      	adds	r2, #1
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	e7bd      	b.n	8009e0e <_dtoa_r+0x65e>
 8009e92:	4b7b      	ldr	r3, [pc, #492]	@ (800a080 <_dtoa_r+0x8d0>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	f7f6 fbcf 	bl	8000638 <__aeabi_dmul>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	f7f6 fe31 	bl	8000b08 <__aeabi_dcmpeq>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f43f aebb 	beq.w	8009c22 <_dtoa_r+0x472>
 8009eac:	e6f0      	b.n	8009c90 <_dtoa_r+0x4e0>
 8009eae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009eb0:	2a00      	cmp	r2, #0
 8009eb2:	f000 80db 	beq.w	800a06c <_dtoa_r+0x8bc>
 8009eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eb8:	2a01      	cmp	r2, #1
 8009eba:	f300 80bf 	bgt.w	800a03c <_dtoa_r+0x88c>
 8009ebe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	f000 80b7 	beq.w	800a034 <_dtoa_r+0x884>
 8009ec6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009eca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ecc:	4646      	mov	r6, r8
 8009ece:	9a08      	ldr	r2, [sp, #32]
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	441a      	add	r2, r3
 8009ed4:	4658      	mov	r0, fp
 8009ed6:	4498      	add	r8, r3
 8009ed8:	9208      	str	r2, [sp, #32]
 8009eda:	f000 fc6b 	bl	800a7b4 <__i2b>
 8009ede:	4605      	mov	r5, r0
 8009ee0:	b15e      	cbz	r6, 8009efa <_dtoa_r+0x74a>
 8009ee2:	9b08      	ldr	r3, [sp, #32]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dd08      	ble.n	8009efa <_dtoa_r+0x74a>
 8009ee8:	42b3      	cmp	r3, r6
 8009eea:	9a08      	ldr	r2, [sp, #32]
 8009eec:	bfa8      	it	ge
 8009eee:	4633      	movge	r3, r6
 8009ef0:	eba8 0803 	sub.w	r8, r8, r3
 8009ef4:	1af6      	subs	r6, r6, r3
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	9308      	str	r3, [sp, #32]
 8009efa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009efc:	b1f3      	cbz	r3, 8009f3c <_dtoa_r+0x78c>
 8009efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f000 80b7 	beq.w	800a074 <_dtoa_r+0x8c4>
 8009f06:	b18c      	cbz	r4, 8009f2c <_dtoa_r+0x77c>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	4658      	mov	r0, fp
 8009f0e:	f000 fd11 	bl	800a934 <__pow5mult>
 8009f12:	464a      	mov	r2, r9
 8009f14:	4601      	mov	r1, r0
 8009f16:	4605      	mov	r5, r0
 8009f18:	4658      	mov	r0, fp
 8009f1a:	f000 fc61 	bl	800a7e0 <__multiply>
 8009f1e:	4649      	mov	r1, r9
 8009f20:	9004      	str	r0, [sp, #16]
 8009f22:	4658      	mov	r0, fp
 8009f24:	f000 fb48 	bl	800a5b8 <_Bfree>
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	4699      	mov	r9, r3
 8009f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f2e:	1b1a      	subs	r2, r3, r4
 8009f30:	d004      	beq.n	8009f3c <_dtoa_r+0x78c>
 8009f32:	4649      	mov	r1, r9
 8009f34:	4658      	mov	r0, fp
 8009f36:	f000 fcfd 	bl	800a934 <__pow5mult>
 8009f3a:	4681      	mov	r9, r0
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4658      	mov	r0, fp
 8009f40:	f000 fc38 	bl	800a7b4 <__i2b>
 8009f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f46:	4604      	mov	r4, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 81cf 	beq.w	800a2ec <_dtoa_r+0xb3c>
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4601      	mov	r1, r0
 8009f52:	4658      	mov	r0, fp
 8009f54:	f000 fcee 	bl	800a934 <__pow5mult>
 8009f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	f300 8095 	bgt.w	800a08c <_dtoa_r+0x8dc>
 8009f62:	9b02      	ldr	r3, [sp, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f040 8087 	bne.w	800a078 <_dtoa_r+0x8c8>
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f040 8089 	bne.w	800a088 <_dtoa_r+0x8d8>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f7c:	0d1b      	lsrs	r3, r3, #20
 8009f7e:	051b      	lsls	r3, r3, #20
 8009f80:	b12b      	cbz	r3, 8009f8e <_dtoa_r+0x7de>
 8009f82:	9b08      	ldr	r3, [sp, #32]
 8009f84:	3301      	adds	r3, #1
 8009f86:	9308      	str	r3, [sp, #32]
 8009f88:	f108 0801 	add.w	r8, r8, #1
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 81b0 	beq.w	800a2f8 <_dtoa_r+0xb48>
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f9e:	6918      	ldr	r0, [r3, #16]
 8009fa0:	f000 fbbc 	bl	800a71c <__hi0bits>
 8009fa4:	f1c0 0020 	rsb	r0, r0, #32
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	4418      	add	r0, r3
 8009fac:	f010 001f 	ands.w	r0, r0, #31
 8009fb0:	d077      	beq.n	800a0a2 <_dtoa_r+0x8f2>
 8009fb2:	f1c0 0320 	rsb	r3, r0, #32
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	dd6b      	ble.n	800a092 <_dtoa_r+0x8e2>
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	f1c0 001c 	rsb	r0, r0, #28
 8009fc0:	4403      	add	r3, r0
 8009fc2:	4480      	add	r8, r0
 8009fc4:	4406      	add	r6, r0
 8009fc6:	9308      	str	r3, [sp, #32]
 8009fc8:	f1b8 0f00 	cmp.w	r8, #0
 8009fcc:	dd05      	ble.n	8009fda <_dtoa_r+0x82a>
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	4658      	mov	r0, fp
 8009fd4:	f000 fd08 	bl	800a9e8 <__lshift>
 8009fd8:	4681      	mov	r9, r0
 8009fda:	9b08      	ldr	r3, [sp, #32]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dd05      	ble.n	8009fec <_dtoa_r+0x83c>
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	f000 fcff 	bl	800a9e8 <__lshift>
 8009fea:	4604      	mov	r4, r0
 8009fec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d059      	beq.n	800a0a6 <_dtoa_r+0x8f6>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4648      	mov	r0, r9
 8009ff6:	f000 fd63 	bl	800aac0 <__mcmp>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	da53      	bge.n	800a0a6 <_dtoa_r+0x8f6>
 8009ffe:	1e7b      	subs	r3, r7, #1
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	4649      	mov	r1, r9
 800a004:	2300      	movs	r3, #0
 800a006:	220a      	movs	r2, #10
 800a008:	4658      	mov	r0, fp
 800a00a:	f000 faf7 	bl	800a5fc <__multadd>
 800a00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a010:	4681      	mov	r9, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 8172 	beq.w	800a2fc <_dtoa_r+0xb4c>
 800a018:	2300      	movs	r3, #0
 800a01a:	4629      	mov	r1, r5
 800a01c:	220a      	movs	r2, #10
 800a01e:	4658      	mov	r0, fp
 800a020:	f000 faec 	bl	800a5fc <__multadd>
 800a024:	9b00      	ldr	r3, [sp, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	4605      	mov	r5, r0
 800a02a:	dc67      	bgt.n	800a0fc <_dtoa_r+0x94c>
 800a02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a02e:	2b02      	cmp	r3, #2
 800a030:	dc41      	bgt.n	800a0b6 <_dtoa_r+0x906>
 800a032:	e063      	b.n	800a0fc <_dtoa_r+0x94c>
 800a034:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a036:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a03a:	e746      	b.n	8009eca <_dtoa_r+0x71a>
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	1e5c      	subs	r4, r3, #1
 800a040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a042:	42a3      	cmp	r3, r4
 800a044:	bfbf      	itttt	lt
 800a046:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a048:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a04a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a04c:	1ae3      	sublt	r3, r4, r3
 800a04e:	bfb4      	ite	lt
 800a050:	18d2      	addlt	r2, r2, r3
 800a052:	1b1c      	subge	r4, r3, r4
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	bfbc      	itt	lt
 800a058:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a05a:	2400      	movlt	r4, #0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bfb5      	itete	lt
 800a060:	eba8 0603 	sublt.w	r6, r8, r3
 800a064:	9b07      	ldrge	r3, [sp, #28]
 800a066:	2300      	movlt	r3, #0
 800a068:	4646      	movge	r6, r8
 800a06a:	e730      	b.n	8009ece <_dtoa_r+0x71e>
 800a06c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a06e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a070:	4646      	mov	r6, r8
 800a072:	e735      	b.n	8009ee0 <_dtoa_r+0x730>
 800a074:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a076:	e75c      	b.n	8009f32 <_dtoa_r+0x782>
 800a078:	2300      	movs	r3, #0
 800a07a:	e788      	b.n	8009f8e <_dtoa_r+0x7de>
 800a07c:	3fe00000 	.word	0x3fe00000
 800a080:	40240000 	.word	0x40240000
 800a084:	40140000 	.word	0x40140000
 800a088:	9b02      	ldr	r3, [sp, #8]
 800a08a:	e780      	b.n	8009f8e <_dtoa_r+0x7de>
 800a08c:	2300      	movs	r3, #0
 800a08e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a090:	e782      	b.n	8009f98 <_dtoa_r+0x7e8>
 800a092:	d099      	beq.n	8009fc8 <_dtoa_r+0x818>
 800a094:	9a08      	ldr	r2, [sp, #32]
 800a096:	331c      	adds	r3, #28
 800a098:	441a      	add	r2, r3
 800a09a:	4498      	add	r8, r3
 800a09c:	441e      	add	r6, r3
 800a09e:	9208      	str	r2, [sp, #32]
 800a0a0:	e792      	b.n	8009fc8 <_dtoa_r+0x818>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	e7f6      	b.n	800a094 <_dtoa_r+0x8e4>
 800a0a6:	9b07      	ldr	r3, [sp, #28]
 800a0a8:	9704      	str	r7, [sp, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	dc20      	bgt.n	800a0f0 <_dtoa_r+0x940>
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	dd1e      	ble.n	800a0f4 <_dtoa_r+0x944>
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f47f aec0 	bne.w	8009e3e <_dtoa_r+0x68e>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	2205      	movs	r2, #5
 800a0c2:	4658      	mov	r0, fp
 800a0c4:	f000 fa9a 	bl	800a5fc <__multadd>
 800a0c8:	4601      	mov	r1, r0
 800a0ca:	4604      	mov	r4, r0
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	f000 fcf7 	bl	800aac0 <__mcmp>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	f77f aeb3 	ble.w	8009e3e <_dtoa_r+0x68e>
 800a0d8:	4656      	mov	r6, sl
 800a0da:	2331      	movs	r3, #49	@ 0x31
 800a0dc:	f806 3b01 	strb.w	r3, [r6], #1
 800a0e0:	9b04      	ldr	r3, [sp, #16]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	9304      	str	r3, [sp, #16]
 800a0e6:	e6ae      	b.n	8009e46 <_dtoa_r+0x696>
 800a0e8:	9c07      	ldr	r4, [sp, #28]
 800a0ea:	9704      	str	r7, [sp, #16]
 800a0ec:	4625      	mov	r5, r4
 800a0ee:	e7f3      	b.n	800a0d8 <_dtoa_r+0x928>
 800a0f0:	9b07      	ldr	r3, [sp, #28]
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 8104 	beq.w	800a304 <_dtoa_r+0xb54>
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	dd05      	ble.n	800a10c <_dtoa_r+0x95c>
 800a100:	4629      	mov	r1, r5
 800a102:	4632      	mov	r2, r6
 800a104:	4658      	mov	r0, fp
 800a106:	f000 fc6f 	bl	800a9e8 <__lshift>
 800a10a:	4605      	mov	r5, r0
 800a10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d05a      	beq.n	800a1c8 <_dtoa_r+0xa18>
 800a112:	6869      	ldr	r1, [r5, #4]
 800a114:	4658      	mov	r0, fp
 800a116:	f000 fa0f 	bl	800a538 <_Balloc>
 800a11a:	4606      	mov	r6, r0
 800a11c:	b928      	cbnz	r0, 800a12a <_dtoa_r+0x97a>
 800a11e:	4b84      	ldr	r3, [pc, #528]	@ (800a330 <_dtoa_r+0xb80>)
 800a120:	4602      	mov	r2, r0
 800a122:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a126:	f7ff bb5a 	b.w	80097de <_dtoa_r+0x2e>
 800a12a:	692a      	ldr	r2, [r5, #16]
 800a12c:	3202      	adds	r2, #2
 800a12e:	0092      	lsls	r2, r2, #2
 800a130:	f105 010c 	add.w	r1, r5, #12
 800a134:	300c      	adds	r0, #12
 800a136:	f7ff fa9c 	bl	8009672 <memcpy>
 800a13a:	2201      	movs	r2, #1
 800a13c:	4631      	mov	r1, r6
 800a13e:	4658      	mov	r0, fp
 800a140:	f000 fc52 	bl	800a9e8 <__lshift>
 800a144:	f10a 0301 	add.w	r3, sl, #1
 800a148:	9307      	str	r3, [sp, #28]
 800a14a:	9b00      	ldr	r3, [sp, #0]
 800a14c:	4453      	add	r3, sl
 800a14e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	f003 0301 	and.w	r3, r3, #1
 800a156:	462f      	mov	r7, r5
 800a158:	930a      	str	r3, [sp, #40]	@ 0x28
 800a15a:	4605      	mov	r5, r0
 800a15c:	9b07      	ldr	r3, [sp, #28]
 800a15e:	4621      	mov	r1, r4
 800a160:	3b01      	subs	r3, #1
 800a162:	4648      	mov	r0, r9
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	f7ff fa99 	bl	800969c <quorem>
 800a16a:	4639      	mov	r1, r7
 800a16c:	9002      	str	r0, [sp, #8]
 800a16e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a172:	4648      	mov	r0, r9
 800a174:	f000 fca4 	bl	800aac0 <__mcmp>
 800a178:	462a      	mov	r2, r5
 800a17a:	9008      	str	r0, [sp, #32]
 800a17c:	4621      	mov	r1, r4
 800a17e:	4658      	mov	r0, fp
 800a180:	f000 fcba 	bl	800aaf8 <__mdiff>
 800a184:	68c2      	ldr	r2, [r0, #12]
 800a186:	4606      	mov	r6, r0
 800a188:	bb02      	cbnz	r2, 800a1cc <_dtoa_r+0xa1c>
 800a18a:	4601      	mov	r1, r0
 800a18c:	4648      	mov	r0, r9
 800a18e:	f000 fc97 	bl	800aac0 <__mcmp>
 800a192:	4602      	mov	r2, r0
 800a194:	4631      	mov	r1, r6
 800a196:	4658      	mov	r0, fp
 800a198:	920e      	str	r2, [sp, #56]	@ 0x38
 800a19a:	f000 fa0d 	bl	800a5b8 <_Bfree>
 800a19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1a2:	9e07      	ldr	r6, [sp, #28]
 800a1a4:	ea43 0102 	orr.w	r1, r3, r2
 800a1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1aa:	4319      	orrs	r1, r3
 800a1ac:	d110      	bne.n	800a1d0 <_dtoa_r+0xa20>
 800a1ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1b2:	d029      	beq.n	800a208 <_dtoa_r+0xa58>
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	dd02      	ble.n	800a1c0 <_dtoa_r+0xa10>
 800a1ba:	9b02      	ldr	r3, [sp, #8]
 800a1bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	f883 8000 	strb.w	r8, [r3]
 800a1c6:	e63f      	b.n	8009e48 <_dtoa_r+0x698>
 800a1c8:	4628      	mov	r0, r5
 800a1ca:	e7bb      	b.n	800a144 <_dtoa_r+0x994>
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	e7e1      	b.n	800a194 <_dtoa_r+0x9e4>
 800a1d0:	9b08      	ldr	r3, [sp, #32]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	db04      	blt.n	800a1e0 <_dtoa_r+0xa30>
 800a1d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1d8:	430b      	orrs	r3, r1
 800a1da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1dc:	430b      	orrs	r3, r1
 800a1de:	d120      	bne.n	800a222 <_dtoa_r+0xa72>
 800a1e0:	2a00      	cmp	r2, #0
 800a1e2:	dded      	ble.n	800a1c0 <_dtoa_r+0xa10>
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	4658      	mov	r0, fp
 800a1ea:	f000 fbfd 	bl	800a9e8 <__lshift>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4681      	mov	r9, r0
 800a1f2:	f000 fc65 	bl	800aac0 <__mcmp>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	dc03      	bgt.n	800a202 <_dtoa_r+0xa52>
 800a1fa:	d1e1      	bne.n	800a1c0 <_dtoa_r+0xa10>
 800a1fc:	f018 0f01 	tst.w	r8, #1
 800a200:	d0de      	beq.n	800a1c0 <_dtoa_r+0xa10>
 800a202:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a206:	d1d8      	bne.n	800a1ba <_dtoa_r+0xa0a>
 800a208:	9a00      	ldr	r2, [sp, #0]
 800a20a:	2339      	movs	r3, #57	@ 0x39
 800a20c:	7013      	strb	r3, [r2, #0]
 800a20e:	4633      	mov	r3, r6
 800a210:	461e      	mov	r6, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a218:	2a39      	cmp	r2, #57	@ 0x39
 800a21a:	d052      	beq.n	800a2c2 <_dtoa_r+0xb12>
 800a21c:	3201      	adds	r2, #1
 800a21e:	701a      	strb	r2, [r3, #0]
 800a220:	e612      	b.n	8009e48 <_dtoa_r+0x698>
 800a222:	2a00      	cmp	r2, #0
 800a224:	dd07      	ble.n	800a236 <_dtoa_r+0xa86>
 800a226:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a22a:	d0ed      	beq.n	800a208 <_dtoa_r+0xa58>
 800a22c:	9a00      	ldr	r2, [sp, #0]
 800a22e:	f108 0301 	add.w	r3, r8, #1
 800a232:	7013      	strb	r3, [r2, #0]
 800a234:	e608      	b.n	8009e48 <_dtoa_r+0x698>
 800a236:	9b07      	ldr	r3, [sp, #28]
 800a238:	9a07      	ldr	r2, [sp, #28]
 800a23a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a240:	4293      	cmp	r3, r2
 800a242:	d028      	beq.n	800a296 <_dtoa_r+0xae6>
 800a244:	4649      	mov	r1, r9
 800a246:	2300      	movs	r3, #0
 800a248:	220a      	movs	r2, #10
 800a24a:	4658      	mov	r0, fp
 800a24c:	f000 f9d6 	bl	800a5fc <__multadd>
 800a250:	42af      	cmp	r7, r5
 800a252:	4681      	mov	r9, r0
 800a254:	f04f 0300 	mov.w	r3, #0
 800a258:	f04f 020a 	mov.w	r2, #10
 800a25c:	4639      	mov	r1, r7
 800a25e:	4658      	mov	r0, fp
 800a260:	d107      	bne.n	800a272 <_dtoa_r+0xac2>
 800a262:	f000 f9cb 	bl	800a5fc <__multadd>
 800a266:	4607      	mov	r7, r0
 800a268:	4605      	mov	r5, r0
 800a26a:	9b07      	ldr	r3, [sp, #28]
 800a26c:	3301      	adds	r3, #1
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	e774      	b.n	800a15c <_dtoa_r+0x9ac>
 800a272:	f000 f9c3 	bl	800a5fc <__multadd>
 800a276:	4629      	mov	r1, r5
 800a278:	4607      	mov	r7, r0
 800a27a:	2300      	movs	r3, #0
 800a27c:	220a      	movs	r2, #10
 800a27e:	4658      	mov	r0, fp
 800a280:	f000 f9bc 	bl	800a5fc <__multadd>
 800a284:	4605      	mov	r5, r0
 800a286:	e7f0      	b.n	800a26a <_dtoa_r+0xaba>
 800a288:	9b00      	ldr	r3, [sp, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	bfcc      	ite	gt
 800a28e:	461e      	movgt	r6, r3
 800a290:	2601      	movle	r6, #1
 800a292:	4456      	add	r6, sl
 800a294:	2700      	movs	r7, #0
 800a296:	4649      	mov	r1, r9
 800a298:	2201      	movs	r2, #1
 800a29a:	4658      	mov	r0, fp
 800a29c:	f000 fba4 	bl	800a9e8 <__lshift>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4681      	mov	r9, r0
 800a2a4:	f000 fc0c 	bl	800aac0 <__mcmp>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	dcb0      	bgt.n	800a20e <_dtoa_r+0xa5e>
 800a2ac:	d102      	bne.n	800a2b4 <_dtoa_r+0xb04>
 800a2ae:	f018 0f01 	tst.w	r8, #1
 800a2b2:	d1ac      	bne.n	800a20e <_dtoa_r+0xa5e>
 800a2b4:	4633      	mov	r3, r6
 800a2b6:	461e      	mov	r6, r3
 800a2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2bc:	2a30      	cmp	r2, #48	@ 0x30
 800a2be:	d0fa      	beq.n	800a2b6 <_dtoa_r+0xb06>
 800a2c0:	e5c2      	b.n	8009e48 <_dtoa_r+0x698>
 800a2c2:	459a      	cmp	sl, r3
 800a2c4:	d1a4      	bne.n	800a210 <_dtoa_r+0xa60>
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	2331      	movs	r3, #49	@ 0x31
 800a2ce:	f88a 3000 	strb.w	r3, [sl]
 800a2d2:	e5b9      	b.n	8009e48 <_dtoa_r+0x698>
 800a2d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a334 <_dtoa_r+0xb84>
 800a2da:	b11b      	cbz	r3, 800a2e4 <_dtoa_r+0xb34>
 800a2dc:	f10a 0308 	add.w	r3, sl, #8
 800a2e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a2e2:	6013      	str	r3, [r2, #0]
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	b019      	add	sp, #100	@ 0x64
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	f77f ae37 	ble.w	8009f62 <_dtoa_r+0x7b2>
 800a2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e655      	b.n	8009fa8 <_dtoa_r+0x7f8>
 800a2fc:	9b00      	ldr	r3, [sp, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f77f aed6 	ble.w	800a0b0 <_dtoa_r+0x900>
 800a304:	4656      	mov	r6, sl
 800a306:	4621      	mov	r1, r4
 800a308:	4648      	mov	r0, r9
 800a30a:	f7ff f9c7 	bl	800969c <quorem>
 800a30e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a312:	f806 8b01 	strb.w	r8, [r6], #1
 800a316:	9b00      	ldr	r3, [sp, #0]
 800a318:	eba6 020a 	sub.w	r2, r6, sl
 800a31c:	4293      	cmp	r3, r2
 800a31e:	ddb3      	ble.n	800a288 <_dtoa_r+0xad8>
 800a320:	4649      	mov	r1, r9
 800a322:	2300      	movs	r3, #0
 800a324:	220a      	movs	r2, #10
 800a326:	4658      	mov	r0, fp
 800a328:	f000 f968 	bl	800a5fc <__multadd>
 800a32c:	4681      	mov	r9, r0
 800a32e:	e7ea      	b.n	800a306 <_dtoa_r+0xb56>
 800a330:	0800e2e9 	.word	0x0800e2e9
 800a334:	0800e26d 	.word	0x0800e26d

0800a338 <_free_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4605      	mov	r5, r0
 800a33c:	2900      	cmp	r1, #0
 800a33e:	d041      	beq.n	800a3c4 <_free_r+0x8c>
 800a340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a344:	1f0c      	subs	r4, r1, #4
 800a346:	2b00      	cmp	r3, #0
 800a348:	bfb8      	it	lt
 800a34a:	18e4      	addlt	r4, r4, r3
 800a34c:	f000 f8e8 	bl	800a520 <__malloc_lock>
 800a350:	4a1d      	ldr	r2, [pc, #116]	@ (800a3c8 <_free_r+0x90>)
 800a352:	6813      	ldr	r3, [r2, #0]
 800a354:	b933      	cbnz	r3, 800a364 <_free_r+0x2c>
 800a356:	6063      	str	r3, [r4, #4]
 800a358:	6014      	str	r4, [r2, #0]
 800a35a:	4628      	mov	r0, r5
 800a35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a360:	f000 b8e4 	b.w	800a52c <__malloc_unlock>
 800a364:	42a3      	cmp	r3, r4
 800a366:	d908      	bls.n	800a37a <_free_r+0x42>
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	1821      	adds	r1, r4, r0
 800a36c:	428b      	cmp	r3, r1
 800a36e:	bf01      	itttt	eq
 800a370:	6819      	ldreq	r1, [r3, #0]
 800a372:	685b      	ldreq	r3, [r3, #4]
 800a374:	1809      	addeq	r1, r1, r0
 800a376:	6021      	streq	r1, [r4, #0]
 800a378:	e7ed      	b.n	800a356 <_free_r+0x1e>
 800a37a:	461a      	mov	r2, r3
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	b10b      	cbz	r3, 800a384 <_free_r+0x4c>
 800a380:	42a3      	cmp	r3, r4
 800a382:	d9fa      	bls.n	800a37a <_free_r+0x42>
 800a384:	6811      	ldr	r1, [r2, #0]
 800a386:	1850      	adds	r0, r2, r1
 800a388:	42a0      	cmp	r0, r4
 800a38a:	d10b      	bne.n	800a3a4 <_free_r+0x6c>
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	4401      	add	r1, r0
 800a390:	1850      	adds	r0, r2, r1
 800a392:	4283      	cmp	r3, r0
 800a394:	6011      	str	r1, [r2, #0]
 800a396:	d1e0      	bne.n	800a35a <_free_r+0x22>
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	6053      	str	r3, [r2, #4]
 800a39e:	4408      	add	r0, r1
 800a3a0:	6010      	str	r0, [r2, #0]
 800a3a2:	e7da      	b.n	800a35a <_free_r+0x22>
 800a3a4:	d902      	bls.n	800a3ac <_free_r+0x74>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	602b      	str	r3, [r5, #0]
 800a3aa:	e7d6      	b.n	800a35a <_free_r+0x22>
 800a3ac:	6820      	ldr	r0, [r4, #0]
 800a3ae:	1821      	adds	r1, r4, r0
 800a3b0:	428b      	cmp	r3, r1
 800a3b2:	bf04      	itt	eq
 800a3b4:	6819      	ldreq	r1, [r3, #0]
 800a3b6:	685b      	ldreq	r3, [r3, #4]
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	bf04      	itt	eq
 800a3bc:	1809      	addeq	r1, r1, r0
 800a3be:	6021      	streq	r1, [r4, #0]
 800a3c0:	6054      	str	r4, [r2, #4]
 800a3c2:	e7ca      	b.n	800a35a <_free_r+0x22>
 800a3c4:	bd38      	pop	{r3, r4, r5, pc}
 800a3c6:	bf00      	nop
 800a3c8:	20000984 	.word	0x20000984

0800a3cc <malloc>:
 800a3cc:	4b02      	ldr	r3, [pc, #8]	@ (800a3d8 <malloc+0xc>)
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	6818      	ldr	r0, [r3, #0]
 800a3d2:	f000 b825 	b.w	800a420 <_malloc_r>
 800a3d6:	bf00      	nop
 800a3d8:	20000068 	.word	0x20000068

0800a3dc <sbrk_aligned>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	4e0f      	ldr	r6, [pc, #60]	@ (800a41c <sbrk_aligned+0x40>)
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	6831      	ldr	r1, [r6, #0]
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	b911      	cbnz	r1, 800a3ee <sbrk_aligned+0x12>
 800a3e8:	f001 fdf2 	bl	800bfd0 <_sbrk_r>
 800a3ec:	6030      	str	r0, [r6, #0]
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f001 fded 	bl	800bfd0 <_sbrk_r>
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	d103      	bne.n	800a402 <sbrk_aligned+0x26>
 800a3fa:	f04f 34ff 	mov.w	r4, #4294967295
 800a3fe:	4620      	mov	r0, r4
 800a400:	bd70      	pop	{r4, r5, r6, pc}
 800a402:	1cc4      	adds	r4, r0, #3
 800a404:	f024 0403 	bic.w	r4, r4, #3
 800a408:	42a0      	cmp	r0, r4
 800a40a:	d0f8      	beq.n	800a3fe <sbrk_aligned+0x22>
 800a40c:	1a21      	subs	r1, r4, r0
 800a40e:	4628      	mov	r0, r5
 800a410:	f001 fdde 	bl	800bfd0 <_sbrk_r>
 800a414:	3001      	adds	r0, #1
 800a416:	d1f2      	bne.n	800a3fe <sbrk_aligned+0x22>
 800a418:	e7ef      	b.n	800a3fa <sbrk_aligned+0x1e>
 800a41a:	bf00      	nop
 800a41c:	20000980 	.word	0x20000980

0800a420 <_malloc_r>:
 800a420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a424:	1ccd      	adds	r5, r1, #3
 800a426:	f025 0503 	bic.w	r5, r5, #3
 800a42a:	3508      	adds	r5, #8
 800a42c:	2d0c      	cmp	r5, #12
 800a42e:	bf38      	it	cc
 800a430:	250c      	movcc	r5, #12
 800a432:	2d00      	cmp	r5, #0
 800a434:	4606      	mov	r6, r0
 800a436:	db01      	blt.n	800a43c <_malloc_r+0x1c>
 800a438:	42a9      	cmp	r1, r5
 800a43a:	d904      	bls.n	800a446 <_malloc_r+0x26>
 800a43c:	230c      	movs	r3, #12
 800a43e:	6033      	str	r3, [r6, #0]
 800a440:	2000      	movs	r0, #0
 800a442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a51c <_malloc_r+0xfc>
 800a44a:	f000 f869 	bl	800a520 <__malloc_lock>
 800a44e:	f8d8 3000 	ldr.w	r3, [r8]
 800a452:	461c      	mov	r4, r3
 800a454:	bb44      	cbnz	r4, 800a4a8 <_malloc_r+0x88>
 800a456:	4629      	mov	r1, r5
 800a458:	4630      	mov	r0, r6
 800a45a:	f7ff ffbf 	bl	800a3dc <sbrk_aligned>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	4604      	mov	r4, r0
 800a462:	d158      	bne.n	800a516 <_malloc_r+0xf6>
 800a464:	f8d8 4000 	ldr.w	r4, [r8]
 800a468:	4627      	mov	r7, r4
 800a46a:	2f00      	cmp	r7, #0
 800a46c:	d143      	bne.n	800a4f6 <_malloc_r+0xd6>
 800a46e:	2c00      	cmp	r4, #0
 800a470:	d04b      	beq.n	800a50a <_malloc_r+0xea>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	4639      	mov	r1, r7
 800a476:	4630      	mov	r0, r6
 800a478:	eb04 0903 	add.w	r9, r4, r3
 800a47c:	f001 fda8 	bl	800bfd0 <_sbrk_r>
 800a480:	4581      	cmp	r9, r0
 800a482:	d142      	bne.n	800a50a <_malloc_r+0xea>
 800a484:	6821      	ldr	r1, [r4, #0]
 800a486:	1a6d      	subs	r5, r5, r1
 800a488:	4629      	mov	r1, r5
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ffa6 	bl	800a3dc <sbrk_aligned>
 800a490:	3001      	adds	r0, #1
 800a492:	d03a      	beq.n	800a50a <_malloc_r+0xea>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	442b      	add	r3, r5
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	f8d8 3000 	ldr.w	r3, [r8]
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	bb62      	cbnz	r2, 800a4fc <_malloc_r+0xdc>
 800a4a2:	f8c8 7000 	str.w	r7, [r8]
 800a4a6:	e00f      	b.n	800a4c8 <_malloc_r+0xa8>
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	1b52      	subs	r2, r2, r5
 800a4ac:	d420      	bmi.n	800a4f0 <_malloc_r+0xd0>
 800a4ae:	2a0b      	cmp	r2, #11
 800a4b0:	d917      	bls.n	800a4e2 <_malloc_r+0xc2>
 800a4b2:	1961      	adds	r1, r4, r5
 800a4b4:	42a3      	cmp	r3, r4
 800a4b6:	6025      	str	r5, [r4, #0]
 800a4b8:	bf18      	it	ne
 800a4ba:	6059      	strne	r1, [r3, #4]
 800a4bc:	6863      	ldr	r3, [r4, #4]
 800a4be:	bf08      	it	eq
 800a4c0:	f8c8 1000 	streq.w	r1, [r8]
 800a4c4:	5162      	str	r2, [r4, r5]
 800a4c6:	604b      	str	r3, [r1, #4]
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f000 f82f 	bl	800a52c <__malloc_unlock>
 800a4ce:	f104 000b 	add.w	r0, r4, #11
 800a4d2:	1d23      	adds	r3, r4, #4
 800a4d4:	f020 0007 	bic.w	r0, r0, #7
 800a4d8:	1ac2      	subs	r2, r0, r3
 800a4da:	bf1c      	itt	ne
 800a4dc:	1a1b      	subne	r3, r3, r0
 800a4de:	50a3      	strne	r3, [r4, r2]
 800a4e0:	e7af      	b.n	800a442 <_malloc_r+0x22>
 800a4e2:	6862      	ldr	r2, [r4, #4]
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	bf0c      	ite	eq
 800a4e8:	f8c8 2000 	streq.w	r2, [r8]
 800a4ec:	605a      	strne	r2, [r3, #4]
 800a4ee:	e7eb      	b.n	800a4c8 <_malloc_r+0xa8>
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	6864      	ldr	r4, [r4, #4]
 800a4f4:	e7ae      	b.n	800a454 <_malloc_r+0x34>
 800a4f6:	463c      	mov	r4, r7
 800a4f8:	687f      	ldr	r7, [r7, #4]
 800a4fa:	e7b6      	b.n	800a46a <_malloc_r+0x4a>
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	42a3      	cmp	r3, r4
 800a502:	d1fb      	bne.n	800a4fc <_malloc_r+0xdc>
 800a504:	2300      	movs	r3, #0
 800a506:	6053      	str	r3, [r2, #4]
 800a508:	e7de      	b.n	800a4c8 <_malloc_r+0xa8>
 800a50a:	230c      	movs	r3, #12
 800a50c:	6033      	str	r3, [r6, #0]
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f80c 	bl	800a52c <__malloc_unlock>
 800a514:	e794      	b.n	800a440 <_malloc_r+0x20>
 800a516:	6005      	str	r5, [r0, #0]
 800a518:	e7d6      	b.n	800a4c8 <_malloc_r+0xa8>
 800a51a:	bf00      	nop
 800a51c:	20000984 	.word	0x20000984

0800a520 <__malloc_lock>:
 800a520:	4801      	ldr	r0, [pc, #4]	@ (800a528 <__malloc_lock+0x8>)
 800a522:	f7ff b8a4 	b.w	800966e <__retarget_lock_acquire_recursive>
 800a526:	bf00      	nop
 800a528:	2000097c 	.word	0x2000097c

0800a52c <__malloc_unlock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	@ (800a534 <__malloc_unlock+0x8>)
 800a52e:	f7ff b89f 	b.w	8009670 <__retarget_lock_release_recursive>
 800a532:	bf00      	nop
 800a534:	2000097c 	.word	0x2000097c

0800a538 <_Balloc>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	69c6      	ldr	r6, [r0, #28]
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	b976      	cbnz	r6, 800a560 <_Balloc+0x28>
 800a542:	2010      	movs	r0, #16
 800a544:	f7ff ff42 	bl	800a3cc <malloc>
 800a548:	4602      	mov	r2, r0
 800a54a:	61e0      	str	r0, [r4, #28]
 800a54c:	b920      	cbnz	r0, 800a558 <_Balloc+0x20>
 800a54e:	4b18      	ldr	r3, [pc, #96]	@ (800a5b0 <_Balloc+0x78>)
 800a550:	4818      	ldr	r0, [pc, #96]	@ (800a5b4 <_Balloc+0x7c>)
 800a552:	216b      	movs	r1, #107	@ 0x6b
 800a554:	f001 fd54 	bl	800c000 <__assert_func>
 800a558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a55c:	6006      	str	r6, [r0, #0]
 800a55e:	60c6      	str	r6, [r0, #12]
 800a560:	69e6      	ldr	r6, [r4, #28]
 800a562:	68f3      	ldr	r3, [r6, #12]
 800a564:	b183      	cbz	r3, 800a588 <_Balloc+0x50>
 800a566:	69e3      	ldr	r3, [r4, #28]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a56e:	b9b8      	cbnz	r0, 800a5a0 <_Balloc+0x68>
 800a570:	2101      	movs	r1, #1
 800a572:	fa01 f605 	lsl.w	r6, r1, r5
 800a576:	1d72      	adds	r2, r6, #5
 800a578:	0092      	lsls	r2, r2, #2
 800a57a:	4620      	mov	r0, r4
 800a57c:	f001 fd5e 	bl	800c03c <_calloc_r>
 800a580:	b160      	cbz	r0, 800a59c <_Balloc+0x64>
 800a582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a586:	e00e      	b.n	800a5a6 <_Balloc+0x6e>
 800a588:	2221      	movs	r2, #33	@ 0x21
 800a58a:	2104      	movs	r1, #4
 800a58c:	4620      	mov	r0, r4
 800a58e:	f001 fd55 	bl	800c03c <_calloc_r>
 800a592:	69e3      	ldr	r3, [r4, #28]
 800a594:	60f0      	str	r0, [r6, #12]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e4      	bne.n	800a566 <_Balloc+0x2e>
 800a59c:	2000      	movs	r0, #0
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	6802      	ldr	r2, [r0, #0]
 800a5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5ac:	e7f7      	b.n	800a59e <_Balloc+0x66>
 800a5ae:	bf00      	nop
 800a5b0:	0800e27a 	.word	0x0800e27a
 800a5b4:	0800e2fa 	.word	0x0800e2fa

0800a5b8 <_Bfree>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	69c6      	ldr	r6, [r0, #28]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	b976      	cbnz	r6, 800a5e0 <_Bfree+0x28>
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	f7ff ff02 	bl	800a3cc <malloc>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	61e8      	str	r0, [r5, #28]
 800a5cc:	b920      	cbnz	r0, 800a5d8 <_Bfree+0x20>
 800a5ce:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <_Bfree+0x3c>)
 800a5d0:	4809      	ldr	r0, [pc, #36]	@ (800a5f8 <_Bfree+0x40>)
 800a5d2:	218f      	movs	r1, #143	@ 0x8f
 800a5d4:	f001 fd14 	bl	800c000 <__assert_func>
 800a5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5dc:	6006      	str	r6, [r0, #0]
 800a5de:	60c6      	str	r6, [r0, #12]
 800a5e0:	b13c      	cbz	r4, 800a5f2 <_Bfree+0x3a>
 800a5e2:	69eb      	ldr	r3, [r5, #28]
 800a5e4:	6862      	ldr	r2, [r4, #4]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5ec:	6021      	str	r1, [r4, #0]
 800a5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	0800e27a 	.word	0x0800e27a
 800a5f8:	0800e2fa 	.word	0x0800e2fa

0800a5fc <__multadd>:
 800a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a600:	690d      	ldr	r5, [r1, #16]
 800a602:	4607      	mov	r7, r0
 800a604:	460c      	mov	r4, r1
 800a606:	461e      	mov	r6, r3
 800a608:	f101 0c14 	add.w	ip, r1, #20
 800a60c:	2000      	movs	r0, #0
 800a60e:	f8dc 3000 	ldr.w	r3, [ip]
 800a612:	b299      	uxth	r1, r3
 800a614:	fb02 6101 	mla	r1, r2, r1, r6
 800a618:	0c1e      	lsrs	r6, r3, #16
 800a61a:	0c0b      	lsrs	r3, r1, #16
 800a61c:	fb02 3306 	mla	r3, r2, r6, r3
 800a620:	b289      	uxth	r1, r1
 800a622:	3001      	adds	r0, #1
 800a624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a628:	4285      	cmp	r5, r0
 800a62a:	f84c 1b04 	str.w	r1, [ip], #4
 800a62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a632:	dcec      	bgt.n	800a60e <__multadd+0x12>
 800a634:	b30e      	cbz	r6, 800a67a <__multadd+0x7e>
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	42ab      	cmp	r3, r5
 800a63a:	dc19      	bgt.n	800a670 <__multadd+0x74>
 800a63c:	6861      	ldr	r1, [r4, #4]
 800a63e:	4638      	mov	r0, r7
 800a640:	3101      	adds	r1, #1
 800a642:	f7ff ff79 	bl	800a538 <_Balloc>
 800a646:	4680      	mov	r8, r0
 800a648:	b928      	cbnz	r0, 800a656 <__multadd+0x5a>
 800a64a:	4602      	mov	r2, r0
 800a64c:	4b0c      	ldr	r3, [pc, #48]	@ (800a680 <__multadd+0x84>)
 800a64e:	480d      	ldr	r0, [pc, #52]	@ (800a684 <__multadd+0x88>)
 800a650:	21ba      	movs	r1, #186	@ 0xba
 800a652:	f001 fcd5 	bl	800c000 <__assert_func>
 800a656:	6922      	ldr	r2, [r4, #16]
 800a658:	3202      	adds	r2, #2
 800a65a:	f104 010c 	add.w	r1, r4, #12
 800a65e:	0092      	lsls	r2, r2, #2
 800a660:	300c      	adds	r0, #12
 800a662:	f7ff f806 	bl	8009672 <memcpy>
 800a666:	4621      	mov	r1, r4
 800a668:	4638      	mov	r0, r7
 800a66a:	f7ff ffa5 	bl	800a5b8 <_Bfree>
 800a66e:	4644      	mov	r4, r8
 800a670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a674:	3501      	adds	r5, #1
 800a676:	615e      	str	r6, [r3, #20]
 800a678:	6125      	str	r5, [r4, #16]
 800a67a:	4620      	mov	r0, r4
 800a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a680:	0800e2e9 	.word	0x0800e2e9
 800a684:	0800e2fa 	.word	0x0800e2fa

0800a688 <__s2b>:
 800a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	460c      	mov	r4, r1
 800a68e:	4615      	mov	r5, r2
 800a690:	461f      	mov	r7, r3
 800a692:	2209      	movs	r2, #9
 800a694:	3308      	adds	r3, #8
 800a696:	4606      	mov	r6, r0
 800a698:	fb93 f3f2 	sdiv	r3, r3, r2
 800a69c:	2100      	movs	r1, #0
 800a69e:	2201      	movs	r2, #1
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	db09      	blt.n	800a6b8 <__s2b+0x30>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff ff47 	bl	800a538 <_Balloc>
 800a6aa:	b940      	cbnz	r0, 800a6be <__s2b+0x36>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	4b19      	ldr	r3, [pc, #100]	@ (800a714 <__s2b+0x8c>)
 800a6b0:	4819      	ldr	r0, [pc, #100]	@ (800a718 <__s2b+0x90>)
 800a6b2:	21d3      	movs	r1, #211	@ 0xd3
 800a6b4:	f001 fca4 	bl	800c000 <__assert_func>
 800a6b8:	0052      	lsls	r2, r2, #1
 800a6ba:	3101      	adds	r1, #1
 800a6bc:	e7f0      	b.n	800a6a0 <__s2b+0x18>
 800a6be:	9b08      	ldr	r3, [sp, #32]
 800a6c0:	6143      	str	r3, [r0, #20]
 800a6c2:	2d09      	cmp	r5, #9
 800a6c4:	f04f 0301 	mov.w	r3, #1
 800a6c8:	6103      	str	r3, [r0, #16]
 800a6ca:	dd16      	ble.n	800a6fa <__s2b+0x72>
 800a6cc:	f104 0909 	add.w	r9, r4, #9
 800a6d0:	46c8      	mov	r8, r9
 800a6d2:	442c      	add	r4, r5
 800a6d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6d8:	4601      	mov	r1, r0
 800a6da:	3b30      	subs	r3, #48	@ 0x30
 800a6dc:	220a      	movs	r2, #10
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ff8c 	bl	800a5fc <__multadd>
 800a6e4:	45a0      	cmp	r8, r4
 800a6e6:	d1f5      	bne.n	800a6d4 <__s2b+0x4c>
 800a6e8:	f1a5 0408 	sub.w	r4, r5, #8
 800a6ec:	444c      	add	r4, r9
 800a6ee:	1b2d      	subs	r5, r5, r4
 800a6f0:	1963      	adds	r3, r4, r5
 800a6f2:	42bb      	cmp	r3, r7
 800a6f4:	db04      	blt.n	800a700 <__s2b+0x78>
 800a6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6fa:	340a      	adds	r4, #10
 800a6fc:	2509      	movs	r5, #9
 800a6fe:	e7f6      	b.n	800a6ee <__s2b+0x66>
 800a700:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a704:	4601      	mov	r1, r0
 800a706:	3b30      	subs	r3, #48	@ 0x30
 800a708:	220a      	movs	r2, #10
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7ff ff76 	bl	800a5fc <__multadd>
 800a710:	e7ee      	b.n	800a6f0 <__s2b+0x68>
 800a712:	bf00      	nop
 800a714:	0800e2e9 	.word	0x0800e2e9
 800a718:	0800e2fa 	.word	0x0800e2fa

0800a71c <__hi0bits>:
 800a71c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a720:	4603      	mov	r3, r0
 800a722:	bf36      	itet	cc
 800a724:	0403      	lslcc	r3, r0, #16
 800a726:	2000      	movcs	r0, #0
 800a728:	2010      	movcc	r0, #16
 800a72a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a72e:	bf3c      	itt	cc
 800a730:	021b      	lslcc	r3, r3, #8
 800a732:	3008      	addcc	r0, #8
 800a734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a738:	bf3c      	itt	cc
 800a73a:	011b      	lslcc	r3, r3, #4
 800a73c:	3004      	addcc	r0, #4
 800a73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a742:	bf3c      	itt	cc
 800a744:	009b      	lslcc	r3, r3, #2
 800a746:	3002      	addcc	r0, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	db05      	blt.n	800a758 <__hi0bits+0x3c>
 800a74c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a750:	f100 0001 	add.w	r0, r0, #1
 800a754:	bf08      	it	eq
 800a756:	2020      	moveq	r0, #32
 800a758:	4770      	bx	lr

0800a75a <__lo0bits>:
 800a75a:	6803      	ldr	r3, [r0, #0]
 800a75c:	4602      	mov	r2, r0
 800a75e:	f013 0007 	ands.w	r0, r3, #7
 800a762:	d00b      	beq.n	800a77c <__lo0bits+0x22>
 800a764:	07d9      	lsls	r1, r3, #31
 800a766:	d421      	bmi.n	800a7ac <__lo0bits+0x52>
 800a768:	0798      	lsls	r0, r3, #30
 800a76a:	bf49      	itett	mi
 800a76c:	085b      	lsrmi	r3, r3, #1
 800a76e:	089b      	lsrpl	r3, r3, #2
 800a770:	2001      	movmi	r0, #1
 800a772:	6013      	strmi	r3, [r2, #0]
 800a774:	bf5c      	itt	pl
 800a776:	6013      	strpl	r3, [r2, #0]
 800a778:	2002      	movpl	r0, #2
 800a77a:	4770      	bx	lr
 800a77c:	b299      	uxth	r1, r3
 800a77e:	b909      	cbnz	r1, 800a784 <__lo0bits+0x2a>
 800a780:	0c1b      	lsrs	r3, r3, #16
 800a782:	2010      	movs	r0, #16
 800a784:	b2d9      	uxtb	r1, r3
 800a786:	b909      	cbnz	r1, 800a78c <__lo0bits+0x32>
 800a788:	3008      	adds	r0, #8
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	0719      	lsls	r1, r3, #28
 800a78e:	bf04      	itt	eq
 800a790:	091b      	lsreq	r3, r3, #4
 800a792:	3004      	addeq	r0, #4
 800a794:	0799      	lsls	r1, r3, #30
 800a796:	bf04      	itt	eq
 800a798:	089b      	lsreq	r3, r3, #2
 800a79a:	3002      	addeq	r0, #2
 800a79c:	07d9      	lsls	r1, r3, #31
 800a79e:	d403      	bmi.n	800a7a8 <__lo0bits+0x4e>
 800a7a0:	085b      	lsrs	r3, r3, #1
 800a7a2:	f100 0001 	add.w	r0, r0, #1
 800a7a6:	d003      	beq.n	800a7b0 <__lo0bits+0x56>
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4770      	bx	lr
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr
 800a7b0:	2020      	movs	r0, #32
 800a7b2:	4770      	bx	lr

0800a7b4 <__i2b>:
 800a7b4:	b510      	push	{r4, lr}
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	2101      	movs	r1, #1
 800a7ba:	f7ff febd 	bl	800a538 <_Balloc>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	b928      	cbnz	r0, 800a7ce <__i2b+0x1a>
 800a7c2:	4b05      	ldr	r3, [pc, #20]	@ (800a7d8 <__i2b+0x24>)
 800a7c4:	4805      	ldr	r0, [pc, #20]	@ (800a7dc <__i2b+0x28>)
 800a7c6:	f240 1145 	movw	r1, #325	@ 0x145
 800a7ca:	f001 fc19 	bl	800c000 <__assert_func>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6144      	str	r4, [r0, #20]
 800a7d2:	6103      	str	r3, [r0, #16]
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0800e2e9 	.word	0x0800e2e9
 800a7dc:	0800e2fa 	.word	0x0800e2fa

0800a7e0 <__multiply>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	690a      	ldr	r2, [r1, #16]
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	bfa8      	it	ge
 800a7ee:	4623      	movge	r3, r4
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	bfa4      	itt	ge
 800a7f4:	460c      	movge	r4, r1
 800a7f6:	461f      	movge	r7, r3
 800a7f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a7fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a800:	68a3      	ldr	r3, [r4, #8]
 800a802:	6861      	ldr	r1, [r4, #4]
 800a804:	eb0a 0609 	add.w	r6, sl, r9
 800a808:	42b3      	cmp	r3, r6
 800a80a:	b085      	sub	sp, #20
 800a80c:	bfb8      	it	lt
 800a80e:	3101      	addlt	r1, #1
 800a810:	f7ff fe92 	bl	800a538 <_Balloc>
 800a814:	b930      	cbnz	r0, 800a824 <__multiply+0x44>
 800a816:	4602      	mov	r2, r0
 800a818:	4b44      	ldr	r3, [pc, #272]	@ (800a92c <__multiply+0x14c>)
 800a81a:	4845      	ldr	r0, [pc, #276]	@ (800a930 <__multiply+0x150>)
 800a81c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a820:	f001 fbee 	bl	800c000 <__assert_func>
 800a824:	f100 0514 	add.w	r5, r0, #20
 800a828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a82c:	462b      	mov	r3, r5
 800a82e:	2200      	movs	r2, #0
 800a830:	4543      	cmp	r3, r8
 800a832:	d321      	bcc.n	800a878 <__multiply+0x98>
 800a834:	f107 0114 	add.w	r1, r7, #20
 800a838:	f104 0214 	add.w	r2, r4, #20
 800a83c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a840:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	1b13      	subs	r3, r2, r4
 800a848:	3b15      	subs	r3, #21
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	3304      	adds	r3, #4
 800a850:	f104 0715 	add.w	r7, r4, #21
 800a854:	42ba      	cmp	r2, r7
 800a856:	bf38      	it	cc
 800a858:	2304      	movcc	r3, #4
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	9103      	str	r1, [sp, #12]
 800a860:	428b      	cmp	r3, r1
 800a862:	d80c      	bhi.n	800a87e <__multiply+0x9e>
 800a864:	2e00      	cmp	r6, #0
 800a866:	dd03      	ble.n	800a870 <__multiply+0x90>
 800a868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d05b      	beq.n	800a928 <__multiply+0x148>
 800a870:	6106      	str	r6, [r0, #16]
 800a872:	b005      	add	sp, #20
 800a874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a878:	f843 2b04 	str.w	r2, [r3], #4
 800a87c:	e7d8      	b.n	800a830 <__multiply+0x50>
 800a87e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a882:	f1ba 0f00 	cmp.w	sl, #0
 800a886:	d024      	beq.n	800a8d2 <__multiply+0xf2>
 800a888:	f104 0e14 	add.w	lr, r4, #20
 800a88c:	46a9      	mov	r9, r5
 800a88e:	f04f 0c00 	mov.w	ip, #0
 800a892:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a896:	f8d9 3000 	ldr.w	r3, [r9]
 800a89a:	fa1f fb87 	uxth.w	fp, r7
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a8a8:	f8d9 7000 	ldr.w	r7, [r9]
 800a8ac:	4463      	add	r3, ip
 800a8ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a8b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a8b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a8c0:	4572      	cmp	r2, lr
 800a8c2:	f849 3b04 	str.w	r3, [r9], #4
 800a8c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a8ca:	d8e2      	bhi.n	800a892 <__multiply+0xb2>
 800a8cc:	9b01      	ldr	r3, [sp, #4]
 800a8ce:	f845 c003 	str.w	ip, [r5, r3]
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a8d8:	3104      	adds	r1, #4
 800a8da:	f1b9 0f00 	cmp.w	r9, #0
 800a8de:	d021      	beq.n	800a924 <__multiply+0x144>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	f104 0c14 	add.w	ip, r4, #20
 800a8e6:	46ae      	mov	lr, r5
 800a8e8:	f04f 0a00 	mov.w	sl, #0
 800a8ec:	f8bc b000 	ldrh.w	fp, [ip]
 800a8f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a8f4:	fb09 770b 	mla	r7, r9, fp, r7
 800a8f8:	4457      	add	r7, sl
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a900:	f84e 3b04 	str.w	r3, [lr], #4
 800a904:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a90c:	f8be 3000 	ldrh.w	r3, [lr]
 800a910:	fb09 330a 	mla	r3, r9, sl, r3
 800a914:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a918:	4562      	cmp	r2, ip
 800a91a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a91e:	d8e5      	bhi.n	800a8ec <__multiply+0x10c>
 800a920:	9f01      	ldr	r7, [sp, #4]
 800a922:	51eb      	str	r3, [r5, r7]
 800a924:	3504      	adds	r5, #4
 800a926:	e799      	b.n	800a85c <__multiply+0x7c>
 800a928:	3e01      	subs	r6, #1
 800a92a:	e79b      	b.n	800a864 <__multiply+0x84>
 800a92c:	0800e2e9 	.word	0x0800e2e9
 800a930:	0800e2fa 	.word	0x0800e2fa

0800a934 <__pow5mult>:
 800a934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a938:	4615      	mov	r5, r2
 800a93a:	f012 0203 	ands.w	r2, r2, #3
 800a93e:	4607      	mov	r7, r0
 800a940:	460e      	mov	r6, r1
 800a942:	d007      	beq.n	800a954 <__pow5mult+0x20>
 800a944:	4c25      	ldr	r4, [pc, #148]	@ (800a9dc <__pow5mult+0xa8>)
 800a946:	3a01      	subs	r2, #1
 800a948:	2300      	movs	r3, #0
 800a94a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a94e:	f7ff fe55 	bl	800a5fc <__multadd>
 800a952:	4606      	mov	r6, r0
 800a954:	10ad      	asrs	r5, r5, #2
 800a956:	d03d      	beq.n	800a9d4 <__pow5mult+0xa0>
 800a958:	69fc      	ldr	r4, [r7, #28]
 800a95a:	b97c      	cbnz	r4, 800a97c <__pow5mult+0x48>
 800a95c:	2010      	movs	r0, #16
 800a95e:	f7ff fd35 	bl	800a3cc <malloc>
 800a962:	4602      	mov	r2, r0
 800a964:	61f8      	str	r0, [r7, #28]
 800a966:	b928      	cbnz	r0, 800a974 <__pow5mult+0x40>
 800a968:	4b1d      	ldr	r3, [pc, #116]	@ (800a9e0 <__pow5mult+0xac>)
 800a96a:	481e      	ldr	r0, [pc, #120]	@ (800a9e4 <__pow5mult+0xb0>)
 800a96c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a970:	f001 fb46 	bl	800c000 <__assert_func>
 800a974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a978:	6004      	str	r4, [r0, #0]
 800a97a:	60c4      	str	r4, [r0, #12]
 800a97c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a984:	b94c      	cbnz	r4, 800a99a <__pow5mult+0x66>
 800a986:	f240 2171 	movw	r1, #625	@ 0x271
 800a98a:	4638      	mov	r0, r7
 800a98c:	f7ff ff12 	bl	800a7b4 <__i2b>
 800a990:	2300      	movs	r3, #0
 800a992:	f8c8 0008 	str.w	r0, [r8, #8]
 800a996:	4604      	mov	r4, r0
 800a998:	6003      	str	r3, [r0, #0]
 800a99a:	f04f 0900 	mov.w	r9, #0
 800a99e:	07eb      	lsls	r3, r5, #31
 800a9a0:	d50a      	bpl.n	800a9b8 <__pow5mult+0x84>
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4622      	mov	r2, r4
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	f7ff ff1a 	bl	800a7e0 <__multiply>
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4680      	mov	r8, r0
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff fe01 	bl	800a5b8 <_Bfree>
 800a9b6:	4646      	mov	r6, r8
 800a9b8:	106d      	asrs	r5, r5, #1
 800a9ba:	d00b      	beq.n	800a9d4 <__pow5mult+0xa0>
 800a9bc:	6820      	ldr	r0, [r4, #0]
 800a9be:	b938      	cbnz	r0, 800a9d0 <__pow5mult+0x9c>
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	f7ff ff0b 	bl	800a7e0 <__multiply>
 800a9ca:	6020      	str	r0, [r4, #0]
 800a9cc:	f8c0 9000 	str.w	r9, [r0]
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	e7e4      	b.n	800a99e <__pow5mult+0x6a>
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9da:	bf00      	nop
 800a9dc:	0800e354 	.word	0x0800e354
 800a9e0:	0800e27a 	.word	0x0800e27a
 800a9e4:	0800e2fa 	.word	0x0800e2fa

0800a9e8 <__lshift>:
 800a9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ec:	460c      	mov	r4, r1
 800a9ee:	6849      	ldr	r1, [r1, #4]
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9f6:	68a3      	ldr	r3, [r4, #8]
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	4691      	mov	r9, r2
 800a9fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa00:	f108 0601 	add.w	r6, r8, #1
 800aa04:	42b3      	cmp	r3, r6
 800aa06:	db0b      	blt.n	800aa20 <__lshift+0x38>
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff fd95 	bl	800a538 <_Balloc>
 800aa0e:	4605      	mov	r5, r0
 800aa10:	b948      	cbnz	r0, 800aa26 <__lshift+0x3e>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4b28      	ldr	r3, [pc, #160]	@ (800aab8 <__lshift+0xd0>)
 800aa16:	4829      	ldr	r0, [pc, #164]	@ (800aabc <__lshift+0xd4>)
 800aa18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa1c:	f001 faf0 	bl	800c000 <__assert_func>
 800aa20:	3101      	adds	r1, #1
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	e7ee      	b.n	800aa04 <__lshift+0x1c>
 800aa26:	2300      	movs	r3, #0
 800aa28:	f100 0114 	add.w	r1, r0, #20
 800aa2c:	f100 0210 	add.w	r2, r0, #16
 800aa30:	4618      	mov	r0, r3
 800aa32:	4553      	cmp	r3, sl
 800aa34:	db33      	blt.n	800aa9e <__lshift+0xb6>
 800aa36:	6920      	ldr	r0, [r4, #16]
 800aa38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa3c:	f104 0314 	add.w	r3, r4, #20
 800aa40:	f019 091f 	ands.w	r9, r9, #31
 800aa44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa4c:	d02b      	beq.n	800aaa6 <__lshift+0xbe>
 800aa4e:	f1c9 0e20 	rsb	lr, r9, #32
 800aa52:	468a      	mov	sl, r1
 800aa54:	2200      	movs	r2, #0
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	fa00 f009 	lsl.w	r0, r0, r9
 800aa5c:	4310      	orrs	r0, r2
 800aa5e:	f84a 0b04 	str.w	r0, [sl], #4
 800aa62:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa66:	459c      	cmp	ip, r3
 800aa68:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa6c:	d8f3      	bhi.n	800aa56 <__lshift+0x6e>
 800aa6e:	ebac 0304 	sub.w	r3, ip, r4
 800aa72:	3b15      	subs	r3, #21
 800aa74:	f023 0303 	bic.w	r3, r3, #3
 800aa78:	3304      	adds	r3, #4
 800aa7a:	f104 0015 	add.w	r0, r4, #21
 800aa7e:	4584      	cmp	ip, r0
 800aa80:	bf38      	it	cc
 800aa82:	2304      	movcc	r3, #4
 800aa84:	50ca      	str	r2, [r1, r3]
 800aa86:	b10a      	cbz	r2, 800aa8c <__lshift+0xa4>
 800aa88:	f108 0602 	add.w	r6, r8, #2
 800aa8c:	3e01      	subs	r6, #1
 800aa8e:	4638      	mov	r0, r7
 800aa90:	612e      	str	r6, [r5, #16]
 800aa92:	4621      	mov	r1, r4
 800aa94:	f7ff fd90 	bl	800a5b8 <_Bfree>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	e7c5      	b.n	800aa32 <__lshift+0x4a>
 800aaa6:	3904      	subs	r1, #4
 800aaa8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaac:	f841 2f04 	str.w	r2, [r1, #4]!
 800aab0:	459c      	cmp	ip, r3
 800aab2:	d8f9      	bhi.n	800aaa8 <__lshift+0xc0>
 800aab4:	e7ea      	b.n	800aa8c <__lshift+0xa4>
 800aab6:	bf00      	nop
 800aab8:	0800e2e9 	.word	0x0800e2e9
 800aabc:	0800e2fa 	.word	0x0800e2fa

0800aac0 <__mcmp>:
 800aac0:	690a      	ldr	r2, [r1, #16]
 800aac2:	4603      	mov	r3, r0
 800aac4:	6900      	ldr	r0, [r0, #16]
 800aac6:	1a80      	subs	r0, r0, r2
 800aac8:	b530      	push	{r4, r5, lr}
 800aaca:	d10e      	bne.n	800aaea <__mcmp+0x2a>
 800aacc:	3314      	adds	r3, #20
 800aace:	3114      	adds	r1, #20
 800aad0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aad4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aadc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aae0:	4295      	cmp	r5, r2
 800aae2:	d003      	beq.n	800aaec <__mcmp+0x2c>
 800aae4:	d205      	bcs.n	800aaf2 <__mcmp+0x32>
 800aae6:	f04f 30ff 	mov.w	r0, #4294967295
 800aaea:	bd30      	pop	{r4, r5, pc}
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	d3f3      	bcc.n	800aad8 <__mcmp+0x18>
 800aaf0:	e7fb      	b.n	800aaea <__mcmp+0x2a>
 800aaf2:	2001      	movs	r0, #1
 800aaf4:	e7f9      	b.n	800aaea <__mcmp+0x2a>
	...

0800aaf8 <__mdiff>:
 800aaf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	4689      	mov	r9, r1
 800aafe:	4606      	mov	r6, r0
 800ab00:	4611      	mov	r1, r2
 800ab02:	4648      	mov	r0, r9
 800ab04:	4614      	mov	r4, r2
 800ab06:	f7ff ffdb 	bl	800aac0 <__mcmp>
 800ab0a:	1e05      	subs	r5, r0, #0
 800ab0c:	d112      	bne.n	800ab34 <__mdiff+0x3c>
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff fd11 	bl	800a538 <_Balloc>
 800ab16:	4602      	mov	r2, r0
 800ab18:	b928      	cbnz	r0, 800ab26 <__mdiff+0x2e>
 800ab1a:	4b3f      	ldr	r3, [pc, #252]	@ (800ac18 <__mdiff+0x120>)
 800ab1c:	f240 2137 	movw	r1, #567	@ 0x237
 800ab20:	483e      	ldr	r0, [pc, #248]	@ (800ac1c <__mdiff+0x124>)
 800ab22:	f001 fa6d 	bl	800c000 <__assert_func>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	b003      	add	sp, #12
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	bfbc      	itt	lt
 800ab36:	464b      	movlt	r3, r9
 800ab38:	46a1      	movlt	r9, r4
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab40:	bfba      	itte	lt
 800ab42:	461c      	movlt	r4, r3
 800ab44:	2501      	movlt	r5, #1
 800ab46:	2500      	movge	r5, #0
 800ab48:	f7ff fcf6 	bl	800a538 <_Balloc>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	b918      	cbnz	r0, 800ab58 <__mdiff+0x60>
 800ab50:	4b31      	ldr	r3, [pc, #196]	@ (800ac18 <__mdiff+0x120>)
 800ab52:	f240 2145 	movw	r1, #581	@ 0x245
 800ab56:	e7e3      	b.n	800ab20 <__mdiff+0x28>
 800ab58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab5c:	6926      	ldr	r6, [r4, #16]
 800ab5e:	60c5      	str	r5, [r0, #12]
 800ab60:	f109 0310 	add.w	r3, r9, #16
 800ab64:	f109 0514 	add.w	r5, r9, #20
 800ab68:	f104 0e14 	add.w	lr, r4, #20
 800ab6c:	f100 0b14 	add.w	fp, r0, #20
 800ab70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	46d9      	mov	r9, fp
 800ab7c:	f04f 0c00 	mov.w	ip, #0
 800ab80:	9b01      	ldr	r3, [sp, #4]
 800ab82:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab86:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	fa1f f38a 	uxth.w	r3, sl
 800ab90:	4619      	mov	r1, r3
 800ab92:	b283      	uxth	r3, r0
 800ab94:	1acb      	subs	r3, r1, r3
 800ab96:	0c00      	lsrs	r0, r0, #16
 800ab98:	4463      	add	r3, ip
 800ab9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aba8:	4576      	cmp	r6, lr
 800abaa:	f849 3b04 	str.w	r3, [r9], #4
 800abae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abb2:	d8e5      	bhi.n	800ab80 <__mdiff+0x88>
 800abb4:	1b33      	subs	r3, r6, r4
 800abb6:	3b15      	subs	r3, #21
 800abb8:	f023 0303 	bic.w	r3, r3, #3
 800abbc:	3415      	adds	r4, #21
 800abbe:	3304      	adds	r3, #4
 800abc0:	42a6      	cmp	r6, r4
 800abc2:	bf38      	it	cc
 800abc4:	2304      	movcc	r3, #4
 800abc6:	441d      	add	r5, r3
 800abc8:	445b      	add	r3, fp
 800abca:	461e      	mov	r6, r3
 800abcc:	462c      	mov	r4, r5
 800abce:	4544      	cmp	r4, r8
 800abd0:	d30e      	bcc.n	800abf0 <__mdiff+0xf8>
 800abd2:	f108 0103 	add.w	r1, r8, #3
 800abd6:	1b49      	subs	r1, r1, r5
 800abd8:	f021 0103 	bic.w	r1, r1, #3
 800abdc:	3d03      	subs	r5, #3
 800abde:	45a8      	cmp	r8, r5
 800abe0:	bf38      	it	cc
 800abe2:	2100      	movcc	r1, #0
 800abe4:	440b      	add	r3, r1
 800abe6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abea:	b191      	cbz	r1, 800ac12 <__mdiff+0x11a>
 800abec:	6117      	str	r7, [r2, #16]
 800abee:	e79d      	b.n	800ab2c <__mdiff+0x34>
 800abf0:	f854 1b04 	ldr.w	r1, [r4], #4
 800abf4:	46e6      	mov	lr, ip
 800abf6:	0c08      	lsrs	r0, r1, #16
 800abf8:	fa1c fc81 	uxtah	ip, ip, r1
 800abfc:	4471      	add	r1, lr
 800abfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac02:	b289      	uxth	r1, r1
 800ac04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac08:	f846 1b04 	str.w	r1, [r6], #4
 800ac0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac10:	e7dd      	b.n	800abce <__mdiff+0xd6>
 800ac12:	3f01      	subs	r7, #1
 800ac14:	e7e7      	b.n	800abe6 <__mdiff+0xee>
 800ac16:	bf00      	nop
 800ac18:	0800e2e9 	.word	0x0800e2e9
 800ac1c:	0800e2fa 	.word	0x0800e2fa

0800ac20 <__ulp>:
 800ac20:	b082      	sub	sp, #8
 800ac22:	ed8d 0b00 	vstr	d0, [sp]
 800ac26:	9a01      	ldr	r2, [sp, #4]
 800ac28:	4b0f      	ldr	r3, [pc, #60]	@ (800ac68 <__ulp+0x48>)
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	dc08      	bgt.n	800ac46 <__ulp+0x26>
 800ac34:	425b      	negs	r3, r3
 800ac36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ac3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac3e:	da04      	bge.n	800ac4a <__ulp+0x2a>
 800ac40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ac44:	4113      	asrs	r3, r2
 800ac46:	2200      	movs	r2, #0
 800ac48:	e008      	b.n	800ac5c <__ulp+0x3c>
 800ac4a:	f1a2 0314 	sub.w	r3, r2, #20
 800ac4e:	2b1e      	cmp	r3, #30
 800ac50:	bfda      	itte	le
 800ac52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ac56:	40da      	lsrle	r2, r3
 800ac58:	2201      	movgt	r2, #1
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	4610      	mov	r0, r2
 800ac60:	ec41 0b10 	vmov	d0, r0, r1
 800ac64:	b002      	add	sp, #8
 800ac66:	4770      	bx	lr
 800ac68:	7ff00000 	.word	0x7ff00000

0800ac6c <__b2d>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	6906      	ldr	r6, [r0, #16]
 800ac72:	f100 0814 	add.w	r8, r0, #20
 800ac76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac7a:	1f37      	subs	r7, r6, #4
 800ac7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac80:	4610      	mov	r0, r2
 800ac82:	f7ff fd4b 	bl	800a71c <__hi0bits>
 800ac86:	f1c0 0320 	rsb	r3, r0, #32
 800ac8a:	280a      	cmp	r0, #10
 800ac8c:	600b      	str	r3, [r1, #0]
 800ac8e:	491b      	ldr	r1, [pc, #108]	@ (800acfc <__b2d+0x90>)
 800ac90:	dc15      	bgt.n	800acbe <__b2d+0x52>
 800ac92:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac96:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac9a:	45b8      	cmp	r8, r7
 800ac9c:	ea43 0501 	orr.w	r5, r3, r1
 800aca0:	bf34      	ite	cc
 800aca2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aca6:	2300      	movcs	r3, #0
 800aca8:	3015      	adds	r0, #21
 800acaa:	fa02 f000 	lsl.w	r0, r2, r0
 800acae:	fa23 f30c 	lsr.w	r3, r3, ip
 800acb2:	4303      	orrs	r3, r0
 800acb4:	461c      	mov	r4, r3
 800acb6:	ec45 4b10 	vmov	d0, r4, r5
 800acba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acbe:	45b8      	cmp	r8, r7
 800acc0:	bf3a      	itte	cc
 800acc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800acc6:	f1a6 0708 	subcc.w	r7, r6, #8
 800acca:	2300      	movcs	r3, #0
 800accc:	380b      	subs	r0, #11
 800acce:	d012      	beq.n	800acf6 <__b2d+0x8a>
 800acd0:	f1c0 0120 	rsb	r1, r0, #32
 800acd4:	fa23 f401 	lsr.w	r4, r3, r1
 800acd8:	4082      	lsls	r2, r0
 800acda:	4322      	orrs	r2, r4
 800acdc:	4547      	cmp	r7, r8
 800acde:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ace2:	bf8c      	ite	hi
 800ace4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ace8:	2200      	movls	r2, #0
 800acea:	4083      	lsls	r3, r0
 800acec:	40ca      	lsrs	r2, r1
 800acee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800acf2:	4313      	orrs	r3, r2
 800acf4:	e7de      	b.n	800acb4 <__b2d+0x48>
 800acf6:	ea42 0501 	orr.w	r5, r2, r1
 800acfa:	e7db      	b.n	800acb4 <__b2d+0x48>
 800acfc:	3ff00000 	.word	0x3ff00000

0800ad00 <__d2b>:
 800ad00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad04:	460f      	mov	r7, r1
 800ad06:	2101      	movs	r1, #1
 800ad08:	ec59 8b10 	vmov	r8, r9, d0
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	f7ff fc13 	bl	800a538 <_Balloc>
 800ad12:	4604      	mov	r4, r0
 800ad14:	b930      	cbnz	r0, 800ad24 <__d2b+0x24>
 800ad16:	4602      	mov	r2, r0
 800ad18:	4b23      	ldr	r3, [pc, #140]	@ (800ada8 <__d2b+0xa8>)
 800ad1a:	4824      	ldr	r0, [pc, #144]	@ (800adac <__d2b+0xac>)
 800ad1c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad20:	f001 f96e 	bl	800c000 <__assert_func>
 800ad24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad2c:	b10d      	cbz	r5, 800ad32 <__d2b+0x32>
 800ad2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	f1b8 0300 	subs.w	r3, r8, #0
 800ad38:	d023      	beq.n	800ad82 <__d2b+0x82>
 800ad3a:	4668      	mov	r0, sp
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	f7ff fd0c 	bl	800a75a <__lo0bits>
 800ad42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad46:	b1d0      	cbz	r0, 800ad7e <__d2b+0x7e>
 800ad48:	f1c0 0320 	rsb	r3, r0, #32
 800ad4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad50:	430b      	orrs	r3, r1
 800ad52:	40c2      	lsrs	r2, r0
 800ad54:	6163      	str	r3, [r4, #20]
 800ad56:	9201      	str	r2, [sp, #4]
 800ad58:	9b01      	ldr	r3, [sp, #4]
 800ad5a:	61a3      	str	r3, [r4, #24]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bf0c      	ite	eq
 800ad60:	2201      	moveq	r2, #1
 800ad62:	2202      	movne	r2, #2
 800ad64:	6122      	str	r2, [r4, #16]
 800ad66:	b1a5      	cbz	r5, 800ad92 <__d2b+0x92>
 800ad68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad6c:	4405      	add	r5, r0
 800ad6e:	603d      	str	r5, [r7, #0]
 800ad70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad74:	6030      	str	r0, [r6, #0]
 800ad76:	4620      	mov	r0, r4
 800ad78:	b003      	add	sp, #12
 800ad7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad7e:	6161      	str	r1, [r4, #20]
 800ad80:	e7ea      	b.n	800ad58 <__d2b+0x58>
 800ad82:	a801      	add	r0, sp, #4
 800ad84:	f7ff fce9 	bl	800a75a <__lo0bits>
 800ad88:	9b01      	ldr	r3, [sp, #4]
 800ad8a:	6163      	str	r3, [r4, #20]
 800ad8c:	3020      	adds	r0, #32
 800ad8e:	2201      	movs	r2, #1
 800ad90:	e7e8      	b.n	800ad64 <__d2b+0x64>
 800ad92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad9a:	6038      	str	r0, [r7, #0]
 800ad9c:	6918      	ldr	r0, [r3, #16]
 800ad9e:	f7ff fcbd 	bl	800a71c <__hi0bits>
 800ada2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ada6:	e7e5      	b.n	800ad74 <__d2b+0x74>
 800ada8:	0800e2e9 	.word	0x0800e2e9
 800adac:	0800e2fa 	.word	0x0800e2fa

0800adb0 <__ratio>:
 800adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb4:	b085      	sub	sp, #20
 800adb6:	e9cd 1000 	strd	r1, r0, [sp]
 800adba:	a902      	add	r1, sp, #8
 800adbc:	f7ff ff56 	bl	800ac6c <__b2d>
 800adc0:	9800      	ldr	r0, [sp, #0]
 800adc2:	a903      	add	r1, sp, #12
 800adc4:	ec55 4b10 	vmov	r4, r5, d0
 800adc8:	f7ff ff50 	bl	800ac6c <__b2d>
 800adcc:	9b01      	ldr	r3, [sp, #4]
 800adce:	6919      	ldr	r1, [r3, #16]
 800add0:	9b00      	ldr	r3, [sp, #0]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	1ac9      	subs	r1, r1, r3
 800add6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	ec5b ab10 	vmov	sl, fp, d0
 800ade0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfce      	itee	gt
 800ade8:	462a      	movgt	r2, r5
 800adea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adee:	465a      	movle	r2, fp
 800adf0:	462f      	mov	r7, r5
 800adf2:	46d9      	mov	r9, fp
 800adf4:	bfcc      	ite	gt
 800adf6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800adfa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800adfe:	464b      	mov	r3, r9
 800ae00:	4652      	mov	r2, sl
 800ae02:	4620      	mov	r0, r4
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7f5 fd41 	bl	800088c <__aeabi_ddiv>
 800ae0a:	ec41 0b10 	vmov	d0, r0, r1
 800ae0e:	b005      	add	sp, #20
 800ae10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae14 <__copybits>:
 800ae14:	3901      	subs	r1, #1
 800ae16:	b570      	push	{r4, r5, r6, lr}
 800ae18:	1149      	asrs	r1, r1, #5
 800ae1a:	6914      	ldr	r4, [r2, #16]
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	f102 0314 	add.w	r3, r2, #20
 800ae22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae2a:	1f05      	subs	r5, r0, #4
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d30c      	bcc.n	800ae4a <__copybits+0x36>
 800ae30:	1aa3      	subs	r3, r4, r2
 800ae32:	3b11      	subs	r3, #17
 800ae34:	f023 0303 	bic.w	r3, r3, #3
 800ae38:	3211      	adds	r2, #17
 800ae3a:	42a2      	cmp	r2, r4
 800ae3c:	bf88      	it	hi
 800ae3e:	2300      	movhi	r3, #0
 800ae40:	4418      	add	r0, r3
 800ae42:	2300      	movs	r3, #0
 800ae44:	4288      	cmp	r0, r1
 800ae46:	d305      	bcc.n	800ae54 <__copybits+0x40>
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae4e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae52:	e7eb      	b.n	800ae2c <__copybits+0x18>
 800ae54:	f840 3b04 	str.w	r3, [r0], #4
 800ae58:	e7f4      	b.n	800ae44 <__copybits+0x30>

0800ae5a <__any_on>:
 800ae5a:	f100 0214 	add.w	r2, r0, #20
 800ae5e:	6900      	ldr	r0, [r0, #16]
 800ae60:	114b      	asrs	r3, r1, #5
 800ae62:	4298      	cmp	r0, r3
 800ae64:	b510      	push	{r4, lr}
 800ae66:	db11      	blt.n	800ae8c <__any_on+0x32>
 800ae68:	dd0a      	ble.n	800ae80 <__any_on+0x26>
 800ae6a:	f011 011f 	ands.w	r1, r1, #31
 800ae6e:	d007      	beq.n	800ae80 <__any_on+0x26>
 800ae70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae74:	fa24 f001 	lsr.w	r0, r4, r1
 800ae78:	fa00 f101 	lsl.w	r1, r0, r1
 800ae7c:	428c      	cmp	r4, r1
 800ae7e:	d10b      	bne.n	800ae98 <__any_on+0x3e>
 800ae80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d803      	bhi.n	800ae90 <__any_on+0x36>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	bd10      	pop	{r4, pc}
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	e7f7      	b.n	800ae80 <__any_on+0x26>
 800ae90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae94:	2900      	cmp	r1, #0
 800ae96:	d0f5      	beq.n	800ae84 <__any_on+0x2a>
 800ae98:	2001      	movs	r0, #1
 800ae9a:	e7f6      	b.n	800ae8a <__any_on+0x30>

0800ae9c <sulp>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	4604      	mov	r4, r0
 800aea0:	460d      	mov	r5, r1
 800aea2:	ec45 4b10 	vmov	d0, r4, r5
 800aea6:	4616      	mov	r6, r2
 800aea8:	f7ff feba 	bl	800ac20 <__ulp>
 800aeac:	ec51 0b10 	vmov	r0, r1, d0
 800aeb0:	b17e      	cbz	r6, 800aed2 <sulp+0x36>
 800aeb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aeb6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dd09      	ble.n	800aed2 <sulp+0x36>
 800aebe:	051b      	lsls	r3, r3, #20
 800aec0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aec4:	2400      	movs	r4, #0
 800aec6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aeca:	4622      	mov	r2, r4
 800aecc:	462b      	mov	r3, r5
 800aece:	f7f5 fbb3 	bl	8000638 <__aeabi_dmul>
 800aed2:	ec41 0b10 	vmov	d0, r0, r1
 800aed6:	bd70      	pop	{r4, r5, r6, pc}

0800aed8 <_strtod_l>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	b09f      	sub	sp, #124	@ 0x7c
 800aede:	460c      	mov	r4, r1
 800aee0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aee2:	2200      	movs	r2, #0
 800aee4:	921a      	str	r2, [sp, #104]	@ 0x68
 800aee6:	9005      	str	r0, [sp, #20]
 800aee8:	f04f 0a00 	mov.w	sl, #0
 800aeec:	f04f 0b00 	mov.w	fp, #0
 800aef0:	460a      	mov	r2, r1
 800aef2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aef4:	7811      	ldrb	r1, [r2, #0]
 800aef6:	292b      	cmp	r1, #43	@ 0x2b
 800aef8:	d04a      	beq.n	800af90 <_strtod_l+0xb8>
 800aefa:	d838      	bhi.n	800af6e <_strtod_l+0x96>
 800aefc:	290d      	cmp	r1, #13
 800aefe:	d832      	bhi.n	800af66 <_strtod_l+0x8e>
 800af00:	2908      	cmp	r1, #8
 800af02:	d832      	bhi.n	800af6a <_strtod_l+0x92>
 800af04:	2900      	cmp	r1, #0
 800af06:	d03b      	beq.n	800af80 <_strtod_l+0xa8>
 800af08:	2200      	movs	r2, #0
 800af0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800af0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800af0e:	782a      	ldrb	r2, [r5, #0]
 800af10:	2a30      	cmp	r2, #48	@ 0x30
 800af12:	f040 80b3 	bne.w	800b07c <_strtod_l+0x1a4>
 800af16:	786a      	ldrb	r2, [r5, #1]
 800af18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af1c:	2a58      	cmp	r2, #88	@ 0x58
 800af1e:	d16e      	bne.n	800affe <_strtod_l+0x126>
 800af20:	9302      	str	r3, [sp, #8]
 800af22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	ab1a      	add	r3, sp, #104	@ 0x68
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	4a8e      	ldr	r2, [pc, #568]	@ (800b164 <_strtod_l+0x28c>)
 800af2c:	9805      	ldr	r0, [sp, #20]
 800af2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800af30:	a919      	add	r1, sp, #100	@ 0x64
 800af32:	f001 f8ff 	bl	800c134 <__gethex>
 800af36:	f010 060f 	ands.w	r6, r0, #15
 800af3a:	4604      	mov	r4, r0
 800af3c:	d005      	beq.n	800af4a <_strtod_l+0x72>
 800af3e:	2e06      	cmp	r6, #6
 800af40:	d128      	bne.n	800af94 <_strtod_l+0xbc>
 800af42:	3501      	adds	r5, #1
 800af44:	2300      	movs	r3, #0
 800af46:	9519      	str	r5, [sp, #100]	@ 0x64
 800af48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f040 858e 	bne.w	800ba6e <_strtod_l+0xb96>
 800af52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af54:	b1cb      	cbz	r3, 800af8a <_strtod_l+0xb2>
 800af56:	4652      	mov	r2, sl
 800af58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800af5c:	ec43 2b10 	vmov	d0, r2, r3
 800af60:	b01f      	add	sp, #124	@ 0x7c
 800af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af66:	2920      	cmp	r1, #32
 800af68:	d1ce      	bne.n	800af08 <_strtod_l+0x30>
 800af6a:	3201      	adds	r2, #1
 800af6c:	e7c1      	b.n	800aef2 <_strtod_l+0x1a>
 800af6e:	292d      	cmp	r1, #45	@ 0x2d
 800af70:	d1ca      	bne.n	800af08 <_strtod_l+0x30>
 800af72:	2101      	movs	r1, #1
 800af74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800af76:	1c51      	adds	r1, r2, #1
 800af78:	9119      	str	r1, [sp, #100]	@ 0x64
 800af7a:	7852      	ldrb	r2, [r2, #1]
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	d1c5      	bne.n	800af0c <_strtod_l+0x34>
 800af80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af82:	9419      	str	r4, [sp, #100]	@ 0x64
 800af84:	2b00      	cmp	r3, #0
 800af86:	f040 8570 	bne.w	800ba6a <_strtod_l+0xb92>
 800af8a:	4652      	mov	r2, sl
 800af8c:	465b      	mov	r3, fp
 800af8e:	e7e5      	b.n	800af5c <_strtod_l+0x84>
 800af90:	2100      	movs	r1, #0
 800af92:	e7ef      	b.n	800af74 <_strtod_l+0x9c>
 800af94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af96:	b13a      	cbz	r2, 800afa8 <_strtod_l+0xd0>
 800af98:	2135      	movs	r1, #53	@ 0x35
 800af9a:	a81c      	add	r0, sp, #112	@ 0x70
 800af9c:	f7ff ff3a 	bl	800ae14 <__copybits>
 800afa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afa2:	9805      	ldr	r0, [sp, #20]
 800afa4:	f7ff fb08 	bl	800a5b8 <_Bfree>
 800afa8:	3e01      	subs	r6, #1
 800afaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800afac:	2e04      	cmp	r6, #4
 800afae:	d806      	bhi.n	800afbe <_strtod_l+0xe6>
 800afb0:	e8df f006 	tbb	[pc, r6]
 800afb4:	201d0314 	.word	0x201d0314
 800afb8:	14          	.byte	0x14
 800afb9:	00          	.byte	0x00
 800afba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800afbe:	05e1      	lsls	r1, r4, #23
 800afc0:	bf48      	it	mi
 800afc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800afc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afca:	0d1b      	lsrs	r3, r3, #20
 800afcc:	051b      	lsls	r3, r3, #20
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1bb      	bne.n	800af4a <_strtod_l+0x72>
 800afd2:	f7fe fb21 	bl	8009618 <__errno>
 800afd6:	2322      	movs	r3, #34	@ 0x22
 800afd8:	6003      	str	r3, [r0, #0]
 800afda:	e7b6      	b.n	800af4a <_strtod_l+0x72>
 800afdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800afe0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800afe4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800afe8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afec:	e7e7      	b.n	800afbe <_strtod_l+0xe6>
 800afee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b16c <_strtod_l+0x294>
 800aff2:	e7e4      	b.n	800afbe <_strtod_l+0xe6>
 800aff4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aff8:	f04f 3aff 	mov.w	sl, #4294967295
 800affc:	e7df      	b.n	800afbe <_strtod_l+0xe6>
 800affe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	9219      	str	r2, [sp, #100]	@ 0x64
 800b004:	785b      	ldrb	r3, [r3, #1]
 800b006:	2b30      	cmp	r3, #48	@ 0x30
 800b008:	d0f9      	beq.n	800affe <_strtod_l+0x126>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d09d      	beq.n	800af4a <_strtod_l+0x72>
 800b00e:	2301      	movs	r3, #1
 800b010:	9309      	str	r3, [sp, #36]	@ 0x24
 800b012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b014:	930c      	str	r3, [sp, #48]	@ 0x30
 800b016:	2300      	movs	r3, #0
 800b018:	9308      	str	r3, [sp, #32]
 800b01a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b01c:	461f      	mov	r7, r3
 800b01e:	220a      	movs	r2, #10
 800b020:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b022:	7805      	ldrb	r5, [r0, #0]
 800b024:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b028:	b2d9      	uxtb	r1, r3
 800b02a:	2909      	cmp	r1, #9
 800b02c:	d928      	bls.n	800b080 <_strtod_l+0x1a8>
 800b02e:	494e      	ldr	r1, [pc, #312]	@ (800b168 <_strtod_l+0x290>)
 800b030:	2201      	movs	r2, #1
 800b032:	f000 ffbb 	bl	800bfac <strncmp>
 800b036:	2800      	cmp	r0, #0
 800b038:	d032      	beq.n	800b0a0 <_strtod_l+0x1c8>
 800b03a:	2000      	movs	r0, #0
 800b03c:	462a      	mov	r2, r5
 800b03e:	4681      	mov	r9, r0
 800b040:	463d      	mov	r5, r7
 800b042:	4603      	mov	r3, r0
 800b044:	2a65      	cmp	r2, #101	@ 0x65
 800b046:	d001      	beq.n	800b04c <_strtod_l+0x174>
 800b048:	2a45      	cmp	r2, #69	@ 0x45
 800b04a:	d114      	bne.n	800b076 <_strtod_l+0x19e>
 800b04c:	b91d      	cbnz	r5, 800b056 <_strtod_l+0x17e>
 800b04e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b050:	4302      	orrs	r2, r0
 800b052:	d095      	beq.n	800af80 <_strtod_l+0xa8>
 800b054:	2500      	movs	r5, #0
 800b056:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b058:	1c62      	adds	r2, r4, #1
 800b05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b05c:	7862      	ldrb	r2, [r4, #1]
 800b05e:	2a2b      	cmp	r2, #43	@ 0x2b
 800b060:	d077      	beq.n	800b152 <_strtod_l+0x27a>
 800b062:	2a2d      	cmp	r2, #45	@ 0x2d
 800b064:	d07b      	beq.n	800b15e <_strtod_l+0x286>
 800b066:	f04f 0c00 	mov.w	ip, #0
 800b06a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b06e:	2909      	cmp	r1, #9
 800b070:	f240 8082 	bls.w	800b178 <_strtod_l+0x2a0>
 800b074:	9419      	str	r4, [sp, #100]	@ 0x64
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	e0a2      	b.n	800b1c2 <_strtod_l+0x2ea>
 800b07c:	2300      	movs	r3, #0
 800b07e:	e7c7      	b.n	800b010 <_strtod_l+0x138>
 800b080:	2f08      	cmp	r7, #8
 800b082:	bfd5      	itete	le
 800b084:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b086:	9908      	ldrgt	r1, [sp, #32]
 800b088:	fb02 3301 	mlale	r3, r2, r1, r3
 800b08c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b090:	f100 0001 	add.w	r0, r0, #1
 800b094:	bfd4      	ite	le
 800b096:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b098:	9308      	strgt	r3, [sp, #32]
 800b09a:	3701      	adds	r7, #1
 800b09c:	9019      	str	r0, [sp, #100]	@ 0x64
 800b09e:	e7bf      	b.n	800b020 <_strtod_l+0x148>
 800b0a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0a6:	785a      	ldrb	r2, [r3, #1]
 800b0a8:	b37f      	cbz	r7, 800b10a <_strtod_l+0x232>
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	463d      	mov	r5, r7
 800b0ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b0b2:	2b09      	cmp	r3, #9
 800b0b4:	d912      	bls.n	800b0dc <_strtod_l+0x204>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e7c4      	b.n	800b044 <_strtod_l+0x16c>
 800b0ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0c0:	785a      	ldrb	r2, [r3, #1]
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	2a30      	cmp	r2, #48	@ 0x30
 800b0c6:	d0f8      	beq.n	800b0ba <_strtod_l+0x1e2>
 800b0c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	f200 84d3 	bhi.w	800ba78 <_strtod_l+0xba0>
 800b0d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0d6:	4681      	mov	r9, r0
 800b0d8:	2000      	movs	r0, #0
 800b0da:	4605      	mov	r5, r0
 800b0dc:	3a30      	subs	r2, #48	@ 0x30
 800b0de:	f100 0301 	add.w	r3, r0, #1
 800b0e2:	d02a      	beq.n	800b13a <_strtod_l+0x262>
 800b0e4:	4499      	add	r9, r3
 800b0e6:	eb00 0c05 	add.w	ip, r0, r5
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	210a      	movs	r1, #10
 800b0ee:	4563      	cmp	r3, ip
 800b0f0:	d10d      	bne.n	800b10e <_strtod_l+0x236>
 800b0f2:	1c69      	adds	r1, r5, #1
 800b0f4:	4401      	add	r1, r0
 800b0f6:	4428      	add	r0, r5
 800b0f8:	2808      	cmp	r0, #8
 800b0fa:	dc16      	bgt.n	800b12a <_strtod_l+0x252>
 800b0fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0fe:	230a      	movs	r3, #10
 800b100:	fb03 2300 	mla	r3, r3, r0, r2
 800b104:	930a      	str	r3, [sp, #40]	@ 0x28
 800b106:	2300      	movs	r3, #0
 800b108:	e018      	b.n	800b13c <_strtod_l+0x264>
 800b10a:	4638      	mov	r0, r7
 800b10c:	e7da      	b.n	800b0c4 <_strtod_l+0x1ec>
 800b10e:	2b08      	cmp	r3, #8
 800b110:	f103 0301 	add.w	r3, r3, #1
 800b114:	dc03      	bgt.n	800b11e <_strtod_l+0x246>
 800b116:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b118:	434e      	muls	r6, r1
 800b11a:	960a      	str	r6, [sp, #40]	@ 0x28
 800b11c:	e7e7      	b.n	800b0ee <_strtod_l+0x216>
 800b11e:	2b10      	cmp	r3, #16
 800b120:	bfde      	ittt	le
 800b122:	9e08      	ldrle	r6, [sp, #32]
 800b124:	434e      	mulle	r6, r1
 800b126:	9608      	strle	r6, [sp, #32]
 800b128:	e7e1      	b.n	800b0ee <_strtod_l+0x216>
 800b12a:	280f      	cmp	r0, #15
 800b12c:	dceb      	bgt.n	800b106 <_strtod_l+0x22e>
 800b12e:	9808      	ldr	r0, [sp, #32]
 800b130:	230a      	movs	r3, #10
 800b132:	fb03 2300 	mla	r3, r3, r0, r2
 800b136:	9308      	str	r3, [sp, #32]
 800b138:	e7e5      	b.n	800b106 <_strtod_l+0x22e>
 800b13a:	4629      	mov	r1, r5
 800b13c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b13e:	1c50      	adds	r0, r2, #1
 800b140:	9019      	str	r0, [sp, #100]	@ 0x64
 800b142:	7852      	ldrb	r2, [r2, #1]
 800b144:	4618      	mov	r0, r3
 800b146:	460d      	mov	r5, r1
 800b148:	e7b1      	b.n	800b0ae <_strtod_l+0x1d6>
 800b14a:	f04f 0900 	mov.w	r9, #0
 800b14e:	2301      	movs	r3, #1
 800b150:	e77d      	b.n	800b04e <_strtod_l+0x176>
 800b152:	f04f 0c00 	mov.w	ip, #0
 800b156:	1ca2      	adds	r2, r4, #2
 800b158:	9219      	str	r2, [sp, #100]	@ 0x64
 800b15a:	78a2      	ldrb	r2, [r4, #2]
 800b15c:	e785      	b.n	800b06a <_strtod_l+0x192>
 800b15e:	f04f 0c01 	mov.w	ip, #1
 800b162:	e7f8      	b.n	800b156 <_strtod_l+0x27e>
 800b164:	0800e468 	.word	0x0800e468
 800b168:	0800e450 	.word	0x0800e450
 800b16c:	7ff00000 	.word	0x7ff00000
 800b170:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b172:	1c51      	adds	r1, r2, #1
 800b174:	9119      	str	r1, [sp, #100]	@ 0x64
 800b176:	7852      	ldrb	r2, [r2, #1]
 800b178:	2a30      	cmp	r2, #48	@ 0x30
 800b17a:	d0f9      	beq.n	800b170 <_strtod_l+0x298>
 800b17c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b180:	2908      	cmp	r1, #8
 800b182:	f63f af78 	bhi.w	800b076 <_strtod_l+0x19e>
 800b186:	3a30      	subs	r2, #48	@ 0x30
 800b188:	920e      	str	r2, [sp, #56]	@ 0x38
 800b18a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b18c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b18e:	f04f 080a 	mov.w	r8, #10
 800b192:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b194:	1c56      	adds	r6, r2, #1
 800b196:	9619      	str	r6, [sp, #100]	@ 0x64
 800b198:	7852      	ldrb	r2, [r2, #1]
 800b19a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b19e:	f1be 0f09 	cmp.w	lr, #9
 800b1a2:	d939      	bls.n	800b218 <_strtod_l+0x340>
 800b1a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b1a6:	1a76      	subs	r6, r6, r1
 800b1a8:	2e08      	cmp	r6, #8
 800b1aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b1ae:	dc03      	bgt.n	800b1b8 <_strtod_l+0x2e0>
 800b1b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b1b2:	4588      	cmp	r8, r1
 800b1b4:	bfa8      	it	ge
 800b1b6:	4688      	movge	r8, r1
 800b1b8:	f1bc 0f00 	cmp.w	ip, #0
 800b1bc:	d001      	beq.n	800b1c2 <_strtod_l+0x2ea>
 800b1be:	f1c8 0800 	rsb	r8, r8, #0
 800b1c2:	2d00      	cmp	r5, #0
 800b1c4:	d14e      	bne.n	800b264 <_strtod_l+0x38c>
 800b1c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1c8:	4308      	orrs	r0, r1
 800b1ca:	f47f aebe 	bne.w	800af4a <_strtod_l+0x72>
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f47f aed6 	bne.w	800af80 <_strtod_l+0xa8>
 800b1d4:	2a69      	cmp	r2, #105	@ 0x69
 800b1d6:	d028      	beq.n	800b22a <_strtod_l+0x352>
 800b1d8:	dc25      	bgt.n	800b226 <_strtod_l+0x34e>
 800b1da:	2a49      	cmp	r2, #73	@ 0x49
 800b1dc:	d025      	beq.n	800b22a <_strtod_l+0x352>
 800b1de:	2a4e      	cmp	r2, #78	@ 0x4e
 800b1e0:	f47f aece 	bne.w	800af80 <_strtod_l+0xa8>
 800b1e4:	499b      	ldr	r1, [pc, #620]	@ (800b454 <_strtod_l+0x57c>)
 800b1e6:	a819      	add	r0, sp, #100	@ 0x64
 800b1e8:	f001 f9c6 	bl	800c578 <__match>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f aec7 	beq.w	800af80 <_strtod_l+0xa8>
 800b1f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b28      	cmp	r3, #40	@ 0x28
 800b1f8:	d12e      	bne.n	800b258 <_strtod_l+0x380>
 800b1fa:	4997      	ldr	r1, [pc, #604]	@ (800b458 <_strtod_l+0x580>)
 800b1fc:	aa1c      	add	r2, sp, #112	@ 0x70
 800b1fe:	a819      	add	r0, sp, #100	@ 0x64
 800b200:	f001 f9ce 	bl	800c5a0 <__hexnan>
 800b204:	2805      	cmp	r0, #5
 800b206:	d127      	bne.n	800b258 <_strtod_l+0x380>
 800b208:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b20a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b20e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b212:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b216:	e698      	b.n	800af4a <_strtod_l+0x72>
 800b218:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b21a:	fb08 2101 	mla	r1, r8, r1, r2
 800b21e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b222:	920e      	str	r2, [sp, #56]	@ 0x38
 800b224:	e7b5      	b.n	800b192 <_strtod_l+0x2ba>
 800b226:	2a6e      	cmp	r2, #110	@ 0x6e
 800b228:	e7da      	b.n	800b1e0 <_strtod_l+0x308>
 800b22a:	498c      	ldr	r1, [pc, #560]	@ (800b45c <_strtod_l+0x584>)
 800b22c:	a819      	add	r0, sp, #100	@ 0x64
 800b22e:	f001 f9a3 	bl	800c578 <__match>
 800b232:	2800      	cmp	r0, #0
 800b234:	f43f aea4 	beq.w	800af80 <_strtod_l+0xa8>
 800b238:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b23a:	4989      	ldr	r1, [pc, #548]	@ (800b460 <_strtod_l+0x588>)
 800b23c:	3b01      	subs	r3, #1
 800b23e:	a819      	add	r0, sp, #100	@ 0x64
 800b240:	9319      	str	r3, [sp, #100]	@ 0x64
 800b242:	f001 f999 	bl	800c578 <__match>
 800b246:	b910      	cbnz	r0, 800b24e <_strtod_l+0x376>
 800b248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b24a:	3301      	adds	r3, #1
 800b24c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b24e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b470 <_strtod_l+0x598>
 800b252:	f04f 0a00 	mov.w	sl, #0
 800b256:	e678      	b.n	800af4a <_strtod_l+0x72>
 800b258:	4882      	ldr	r0, [pc, #520]	@ (800b464 <_strtod_l+0x58c>)
 800b25a:	f000 fec9 	bl	800bff0 <nan>
 800b25e:	ec5b ab10 	vmov	sl, fp, d0
 800b262:	e672      	b.n	800af4a <_strtod_l+0x72>
 800b264:	eba8 0309 	sub.w	r3, r8, r9
 800b268:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b26a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b26c:	2f00      	cmp	r7, #0
 800b26e:	bf08      	it	eq
 800b270:	462f      	moveq	r7, r5
 800b272:	2d10      	cmp	r5, #16
 800b274:	462c      	mov	r4, r5
 800b276:	bfa8      	it	ge
 800b278:	2410      	movge	r4, #16
 800b27a:	f7f5 f963 	bl	8000544 <__aeabi_ui2d>
 800b27e:	2d09      	cmp	r5, #9
 800b280:	4682      	mov	sl, r0
 800b282:	468b      	mov	fp, r1
 800b284:	dc13      	bgt.n	800b2ae <_strtod_l+0x3d6>
 800b286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f43f ae5e 	beq.w	800af4a <_strtod_l+0x72>
 800b28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b290:	dd78      	ble.n	800b384 <_strtod_l+0x4ac>
 800b292:	2b16      	cmp	r3, #22
 800b294:	dc5f      	bgt.n	800b356 <_strtod_l+0x47e>
 800b296:	4974      	ldr	r1, [pc, #464]	@ (800b468 <_strtod_l+0x590>)
 800b298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2a0:	4652      	mov	r2, sl
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	f7f5 f9c8 	bl	8000638 <__aeabi_dmul>
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	468b      	mov	fp, r1
 800b2ac:	e64d      	b.n	800af4a <_strtod_l+0x72>
 800b2ae:	4b6e      	ldr	r3, [pc, #440]	@ (800b468 <_strtod_l+0x590>)
 800b2b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b2b8:	f7f5 f9be 	bl	8000638 <__aeabi_dmul>
 800b2bc:	4682      	mov	sl, r0
 800b2be:	9808      	ldr	r0, [sp, #32]
 800b2c0:	468b      	mov	fp, r1
 800b2c2:	f7f5 f93f 	bl	8000544 <__aeabi_ui2d>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	4659      	mov	r1, fp
 800b2ce:	f7f4 fffd 	bl	80002cc <__adddf3>
 800b2d2:	2d0f      	cmp	r5, #15
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	468b      	mov	fp, r1
 800b2d8:	ddd5      	ble.n	800b286 <_strtod_l+0x3ae>
 800b2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2dc:	1b2c      	subs	r4, r5, r4
 800b2de:	441c      	add	r4, r3
 800b2e0:	2c00      	cmp	r4, #0
 800b2e2:	f340 8096 	ble.w	800b412 <_strtod_l+0x53a>
 800b2e6:	f014 030f 	ands.w	r3, r4, #15
 800b2ea:	d00a      	beq.n	800b302 <_strtod_l+0x42a>
 800b2ec:	495e      	ldr	r1, [pc, #376]	@ (800b468 <_strtod_l+0x590>)
 800b2ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fa:	f7f5 f99d 	bl	8000638 <__aeabi_dmul>
 800b2fe:	4682      	mov	sl, r0
 800b300:	468b      	mov	fp, r1
 800b302:	f034 040f 	bics.w	r4, r4, #15
 800b306:	d073      	beq.n	800b3f0 <_strtod_l+0x518>
 800b308:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b30c:	dd48      	ble.n	800b3a0 <_strtod_l+0x4c8>
 800b30e:	2400      	movs	r4, #0
 800b310:	46a0      	mov	r8, r4
 800b312:	940a      	str	r4, [sp, #40]	@ 0x28
 800b314:	46a1      	mov	r9, r4
 800b316:	9a05      	ldr	r2, [sp, #20]
 800b318:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b470 <_strtod_l+0x598>
 800b31c:	2322      	movs	r3, #34	@ 0x22
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	f04f 0a00 	mov.w	sl, #0
 800b324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b326:	2b00      	cmp	r3, #0
 800b328:	f43f ae0f 	beq.w	800af4a <_strtod_l+0x72>
 800b32c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b32e:	9805      	ldr	r0, [sp, #20]
 800b330:	f7ff f942 	bl	800a5b8 <_Bfree>
 800b334:	9805      	ldr	r0, [sp, #20]
 800b336:	4649      	mov	r1, r9
 800b338:	f7ff f93e 	bl	800a5b8 <_Bfree>
 800b33c:	9805      	ldr	r0, [sp, #20]
 800b33e:	4641      	mov	r1, r8
 800b340:	f7ff f93a 	bl	800a5b8 <_Bfree>
 800b344:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b346:	9805      	ldr	r0, [sp, #20]
 800b348:	f7ff f936 	bl	800a5b8 <_Bfree>
 800b34c:	9805      	ldr	r0, [sp, #20]
 800b34e:	4621      	mov	r1, r4
 800b350:	f7ff f932 	bl	800a5b8 <_Bfree>
 800b354:	e5f9      	b.n	800af4a <_strtod_l+0x72>
 800b356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b358:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b35c:	4293      	cmp	r3, r2
 800b35e:	dbbc      	blt.n	800b2da <_strtod_l+0x402>
 800b360:	4c41      	ldr	r4, [pc, #260]	@ (800b468 <_strtod_l+0x590>)
 800b362:	f1c5 050f 	rsb	r5, r5, #15
 800b366:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b36a:	4652      	mov	r2, sl
 800b36c:	465b      	mov	r3, fp
 800b36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b372:	f7f5 f961 	bl	8000638 <__aeabi_dmul>
 800b376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b378:	1b5d      	subs	r5, r3, r5
 800b37a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b37e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b382:	e78f      	b.n	800b2a4 <_strtod_l+0x3cc>
 800b384:	3316      	adds	r3, #22
 800b386:	dba8      	blt.n	800b2da <_strtod_l+0x402>
 800b388:	4b37      	ldr	r3, [pc, #220]	@ (800b468 <_strtod_l+0x590>)
 800b38a:	eba9 0808 	sub.w	r8, r9, r8
 800b38e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b392:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b396:	4650      	mov	r0, sl
 800b398:	4659      	mov	r1, fp
 800b39a:	f7f5 fa77 	bl	800088c <__aeabi_ddiv>
 800b39e:	e783      	b.n	800b2a8 <_strtod_l+0x3d0>
 800b3a0:	4b32      	ldr	r3, [pc, #200]	@ (800b46c <_strtod_l+0x594>)
 800b3a2:	9308      	str	r3, [sp, #32]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	1124      	asrs	r4, r4, #4
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	4659      	mov	r1, fp
 800b3ac:	461e      	mov	r6, r3
 800b3ae:	2c01      	cmp	r4, #1
 800b3b0:	dc21      	bgt.n	800b3f6 <_strtod_l+0x51e>
 800b3b2:	b10b      	cbz	r3, 800b3b8 <_strtod_l+0x4e0>
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	468b      	mov	fp, r1
 800b3b8:	492c      	ldr	r1, [pc, #176]	@ (800b46c <_strtod_l+0x594>)
 800b3ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b3be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b3c2:	4652      	mov	r2, sl
 800b3c4:	465b      	mov	r3, fp
 800b3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ca:	f7f5 f935 	bl	8000638 <__aeabi_dmul>
 800b3ce:	4b28      	ldr	r3, [pc, #160]	@ (800b470 <_strtod_l+0x598>)
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	400b      	ands	r3, r1
 800b3d4:	4927      	ldr	r1, [pc, #156]	@ (800b474 <_strtod_l+0x59c>)
 800b3d6:	428b      	cmp	r3, r1
 800b3d8:	4682      	mov	sl, r0
 800b3da:	d898      	bhi.n	800b30e <_strtod_l+0x436>
 800b3dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b3e0:	428b      	cmp	r3, r1
 800b3e2:	bf86      	itte	hi
 800b3e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b478 <_strtod_l+0x5a0>
 800b3e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	9308      	str	r3, [sp, #32]
 800b3f4:	e07a      	b.n	800b4ec <_strtod_l+0x614>
 800b3f6:	07e2      	lsls	r2, r4, #31
 800b3f8:	d505      	bpl.n	800b406 <_strtod_l+0x52e>
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b400:	f7f5 f91a 	bl	8000638 <__aeabi_dmul>
 800b404:	2301      	movs	r3, #1
 800b406:	9a08      	ldr	r2, [sp, #32]
 800b408:	3208      	adds	r2, #8
 800b40a:	3601      	adds	r6, #1
 800b40c:	1064      	asrs	r4, r4, #1
 800b40e:	9208      	str	r2, [sp, #32]
 800b410:	e7cd      	b.n	800b3ae <_strtod_l+0x4d6>
 800b412:	d0ed      	beq.n	800b3f0 <_strtod_l+0x518>
 800b414:	4264      	negs	r4, r4
 800b416:	f014 020f 	ands.w	r2, r4, #15
 800b41a:	d00a      	beq.n	800b432 <_strtod_l+0x55a>
 800b41c:	4b12      	ldr	r3, [pc, #72]	@ (800b468 <_strtod_l+0x590>)
 800b41e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f5 fa2f 	bl	800088c <__aeabi_ddiv>
 800b42e:	4682      	mov	sl, r0
 800b430:	468b      	mov	fp, r1
 800b432:	1124      	asrs	r4, r4, #4
 800b434:	d0dc      	beq.n	800b3f0 <_strtod_l+0x518>
 800b436:	2c1f      	cmp	r4, #31
 800b438:	dd20      	ble.n	800b47c <_strtod_l+0x5a4>
 800b43a:	2400      	movs	r4, #0
 800b43c:	46a0      	mov	r8, r4
 800b43e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b440:	46a1      	mov	r9, r4
 800b442:	9a05      	ldr	r2, [sp, #20]
 800b444:	2322      	movs	r3, #34	@ 0x22
 800b446:	f04f 0a00 	mov.w	sl, #0
 800b44a:	f04f 0b00 	mov.w	fp, #0
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	e768      	b.n	800b324 <_strtod_l+0x44c>
 800b452:	bf00      	nop
 800b454:	0800e241 	.word	0x0800e241
 800b458:	0800e454 	.word	0x0800e454
 800b45c:	0800e239 	.word	0x0800e239
 800b460:	0800e270 	.word	0x0800e270
 800b464:	0800e5fd 	.word	0x0800e5fd
 800b468:	0800e388 	.word	0x0800e388
 800b46c:	0800e360 	.word	0x0800e360
 800b470:	7ff00000 	.word	0x7ff00000
 800b474:	7ca00000 	.word	0x7ca00000
 800b478:	7fefffff 	.word	0x7fefffff
 800b47c:	f014 0310 	ands.w	r3, r4, #16
 800b480:	bf18      	it	ne
 800b482:	236a      	movne	r3, #106	@ 0x6a
 800b484:	4ea9      	ldr	r6, [pc, #676]	@ (800b72c <_strtod_l+0x854>)
 800b486:	9308      	str	r3, [sp, #32]
 800b488:	4650      	mov	r0, sl
 800b48a:	4659      	mov	r1, fp
 800b48c:	2300      	movs	r3, #0
 800b48e:	07e2      	lsls	r2, r4, #31
 800b490:	d504      	bpl.n	800b49c <_strtod_l+0x5c4>
 800b492:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b496:	f7f5 f8cf 	bl	8000638 <__aeabi_dmul>
 800b49a:	2301      	movs	r3, #1
 800b49c:	1064      	asrs	r4, r4, #1
 800b49e:	f106 0608 	add.w	r6, r6, #8
 800b4a2:	d1f4      	bne.n	800b48e <_strtod_l+0x5b6>
 800b4a4:	b10b      	cbz	r3, 800b4aa <_strtod_l+0x5d2>
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	468b      	mov	fp, r1
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	b1b3      	cbz	r3, 800b4dc <_strtod_l+0x604>
 800b4ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	dd0f      	ble.n	800b4dc <_strtod_l+0x604>
 800b4bc:	2b1f      	cmp	r3, #31
 800b4be:	dd55      	ble.n	800b56c <_strtod_l+0x694>
 800b4c0:	2b34      	cmp	r3, #52	@ 0x34
 800b4c2:	bfde      	ittt	le
 800b4c4:	f04f 33ff 	movle.w	r3, #4294967295
 800b4c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b4cc:	4093      	lslle	r3, r2
 800b4ce:	f04f 0a00 	mov.w	sl, #0
 800b4d2:	bfcc      	ite	gt
 800b4d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b4d8:	ea03 0b01 	andle.w	fp, r3, r1
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	f7f5 fb10 	bl	8000b08 <__aeabi_dcmpeq>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1a6      	bne.n	800b43a <_strtod_l+0x562>
 800b4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b4f2:	9805      	ldr	r0, [sp, #20]
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	463a      	mov	r2, r7
 800b4f8:	f7ff f8c6 	bl	800a688 <__s2b>
 800b4fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f af05 	beq.w	800b30e <_strtod_l+0x436>
 800b504:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b506:	2a00      	cmp	r2, #0
 800b508:	eba9 0308 	sub.w	r3, r9, r8
 800b50c:	bfa8      	it	ge
 800b50e:	2300      	movge	r3, #0
 800b510:	9312      	str	r3, [sp, #72]	@ 0x48
 800b512:	2400      	movs	r4, #0
 800b514:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b518:	9316      	str	r3, [sp, #88]	@ 0x58
 800b51a:	46a0      	mov	r8, r4
 800b51c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b51e:	9805      	ldr	r0, [sp, #20]
 800b520:	6859      	ldr	r1, [r3, #4]
 800b522:	f7ff f809 	bl	800a538 <_Balloc>
 800b526:	4681      	mov	r9, r0
 800b528:	2800      	cmp	r0, #0
 800b52a:	f43f aef4 	beq.w	800b316 <_strtod_l+0x43e>
 800b52e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b530:	691a      	ldr	r2, [r3, #16]
 800b532:	3202      	adds	r2, #2
 800b534:	f103 010c 	add.w	r1, r3, #12
 800b538:	0092      	lsls	r2, r2, #2
 800b53a:	300c      	adds	r0, #12
 800b53c:	f7fe f899 	bl	8009672 <memcpy>
 800b540:	ec4b ab10 	vmov	d0, sl, fp
 800b544:	9805      	ldr	r0, [sp, #20]
 800b546:	aa1c      	add	r2, sp, #112	@ 0x70
 800b548:	a91b      	add	r1, sp, #108	@ 0x6c
 800b54a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b54e:	f7ff fbd7 	bl	800ad00 <__d2b>
 800b552:	901a      	str	r0, [sp, #104]	@ 0x68
 800b554:	2800      	cmp	r0, #0
 800b556:	f43f aede 	beq.w	800b316 <_strtod_l+0x43e>
 800b55a:	9805      	ldr	r0, [sp, #20]
 800b55c:	2101      	movs	r1, #1
 800b55e:	f7ff f929 	bl	800a7b4 <__i2b>
 800b562:	4680      	mov	r8, r0
 800b564:	b948      	cbnz	r0, 800b57a <_strtod_l+0x6a2>
 800b566:	f04f 0800 	mov.w	r8, #0
 800b56a:	e6d4      	b.n	800b316 <_strtod_l+0x43e>
 800b56c:	f04f 32ff 	mov.w	r2, #4294967295
 800b570:	fa02 f303 	lsl.w	r3, r2, r3
 800b574:	ea03 0a0a 	and.w	sl, r3, sl
 800b578:	e7b0      	b.n	800b4dc <_strtod_l+0x604>
 800b57a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b57c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b57e:	2d00      	cmp	r5, #0
 800b580:	bfab      	itete	ge
 800b582:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b584:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b586:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b588:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b58a:	bfac      	ite	ge
 800b58c:	18ef      	addge	r7, r5, r3
 800b58e:	1b5e      	sublt	r6, r3, r5
 800b590:	9b08      	ldr	r3, [sp, #32]
 800b592:	1aed      	subs	r5, r5, r3
 800b594:	4415      	add	r5, r2
 800b596:	4b66      	ldr	r3, [pc, #408]	@ (800b730 <_strtod_l+0x858>)
 800b598:	3d01      	subs	r5, #1
 800b59a:	429d      	cmp	r5, r3
 800b59c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b5a0:	da50      	bge.n	800b644 <_strtod_l+0x76c>
 800b5a2:	1b5b      	subs	r3, r3, r5
 800b5a4:	2b1f      	cmp	r3, #31
 800b5a6:	eba2 0203 	sub.w	r2, r2, r3
 800b5aa:	f04f 0101 	mov.w	r1, #1
 800b5ae:	dc3d      	bgt.n	800b62c <_strtod_l+0x754>
 800b5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5ba:	18bd      	adds	r5, r7, r2
 800b5bc:	9b08      	ldr	r3, [sp, #32]
 800b5be:	42af      	cmp	r7, r5
 800b5c0:	4416      	add	r6, r2
 800b5c2:	441e      	add	r6, r3
 800b5c4:	463b      	mov	r3, r7
 800b5c6:	bfa8      	it	ge
 800b5c8:	462b      	movge	r3, r5
 800b5ca:	42b3      	cmp	r3, r6
 800b5cc:	bfa8      	it	ge
 800b5ce:	4633      	movge	r3, r6
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	bfc2      	ittt	gt
 800b5d4:	1aed      	subgt	r5, r5, r3
 800b5d6:	1af6      	subgt	r6, r6, r3
 800b5d8:	1aff      	subgt	r7, r7, r3
 800b5da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd16      	ble.n	800b60e <_strtod_l+0x736>
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	9805      	ldr	r0, [sp, #20]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	f7ff f9a5 	bl	800a934 <__pow5mult>
 800b5ea:	4680      	mov	r8, r0
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d0ba      	beq.n	800b566 <_strtod_l+0x68e>
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b5f4:	9805      	ldr	r0, [sp, #20]
 800b5f6:	f7ff f8f3 	bl	800a7e0 <__multiply>
 800b5fa:	900e      	str	r0, [sp, #56]	@ 0x38
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f43f ae8a 	beq.w	800b316 <_strtod_l+0x43e>
 800b602:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b604:	9805      	ldr	r0, [sp, #20]
 800b606:	f7fe ffd7 	bl	800a5b8 <_Bfree>
 800b60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b60c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b60e:	2d00      	cmp	r5, #0
 800b610:	dc1d      	bgt.n	800b64e <_strtod_l+0x776>
 800b612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	dd23      	ble.n	800b660 <_strtod_l+0x788>
 800b618:	4649      	mov	r1, r9
 800b61a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b61c:	9805      	ldr	r0, [sp, #20]
 800b61e:	f7ff f989 	bl	800a934 <__pow5mult>
 800b622:	4681      	mov	r9, r0
 800b624:	b9e0      	cbnz	r0, 800b660 <_strtod_l+0x788>
 800b626:	f04f 0900 	mov.w	r9, #0
 800b62a:	e674      	b.n	800b316 <_strtod_l+0x43e>
 800b62c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b630:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b634:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b638:	35e2      	adds	r5, #226	@ 0xe2
 800b63a:	fa01 f305 	lsl.w	r3, r1, r5
 800b63e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b640:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b642:	e7ba      	b.n	800b5ba <_strtod_l+0x6e2>
 800b644:	2300      	movs	r3, #0
 800b646:	9310      	str	r3, [sp, #64]	@ 0x40
 800b648:	2301      	movs	r3, #1
 800b64a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b64c:	e7b5      	b.n	800b5ba <_strtod_l+0x6e2>
 800b64e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b650:	9805      	ldr	r0, [sp, #20]
 800b652:	462a      	mov	r2, r5
 800b654:	f7ff f9c8 	bl	800a9e8 <__lshift>
 800b658:	901a      	str	r0, [sp, #104]	@ 0x68
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d1d9      	bne.n	800b612 <_strtod_l+0x73a>
 800b65e:	e65a      	b.n	800b316 <_strtod_l+0x43e>
 800b660:	2e00      	cmp	r6, #0
 800b662:	dd07      	ble.n	800b674 <_strtod_l+0x79c>
 800b664:	4649      	mov	r1, r9
 800b666:	9805      	ldr	r0, [sp, #20]
 800b668:	4632      	mov	r2, r6
 800b66a:	f7ff f9bd 	bl	800a9e8 <__lshift>
 800b66e:	4681      	mov	r9, r0
 800b670:	2800      	cmp	r0, #0
 800b672:	d0d8      	beq.n	800b626 <_strtod_l+0x74e>
 800b674:	2f00      	cmp	r7, #0
 800b676:	dd08      	ble.n	800b68a <_strtod_l+0x7b2>
 800b678:	4641      	mov	r1, r8
 800b67a:	9805      	ldr	r0, [sp, #20]
 800b67c:	463a      	mov	r2, r7
 800b67e:	f7ff f9b3 	bl	800a9e8 <__lshift>
 800b682:	4680      	mov	r8, r0
 800b684:	2800      	cmp	r0, #0
 800b686:	f43f ae46 	beq.w	800b316 <_strtod_l+0x43e>
 800b68a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b68c:	9805      	ldr	r0, [sp, #20]
 800b68e:	464a      	mov	r2, r9
 800b690:	f7ff fa32 	bl	800aaf8 <__mdiff>
 800b694:	4604      	mov	r4, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f ae3d 	beq.w	800b316 <_strtod_l+0x43e>
 800b69c:	68c3      	ldr	r3, [r0, #12]
 800b69e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60c3      	str	r3, [r0, #12]
 800b6a4:	4641      	mov	r1, r8
 800b6a6:	f7ff fa0b 	bl	800aac0 <__mcmp>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	da46      	bge.n	800b73c <_strtod_l+0x864>
 800b6ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b0:	ea53 030a 	orrs.w	r3, r3, sl
 800b6b4:	d16c      	bne.n	800b790 <_strtod_l+0x8b8>
 800b6b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d168      	bne.n	800b790 <_strtod_l+0x8b8>
 800b6be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6c2:	0d1b      	lsrs	r3, r3, #20
 800b6c4:	051b      	lsls	r3, r3, #20
 800b6c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b6ca:	d961      	bls.n	800b790 <_strtod_l+0x8b8>
 800b6cc:	6963      	ldr	r3, [r4, #20]
 800b6ce:	b913      	cbnz	r3, 800b6d6 <_strtod_l+0x7fe>
 800b6d0:	6923      	ldr	r3, [r4, #16]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	dd5c      	ble.n	800b790 <_strtod_l+0x8b8>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	2201      	movs	r2, #1
 800b6da:	9805      	ldr	r0, [sp, #20]
 800b6dc:	f7ff f984 	bl	800a9e8 <__lshift>
 800b6e0:	4641      	mov	r1, r8
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	f7ff f9ec 	bl	800aac0 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	dd51      	ble.n	800b790 <_strtod_l+0x8b8>
 800b6ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b6f0:	9a08      	ldr	r2, [sp, #32]
 800b6f2:	0d1b      	lsrs	r3, r3, #20
 800b6f4:	051b      	lsls	r3, r3, #20
 800b6f6:	2a00      	cmp	r2, #0
 800b6f8:	d06b      	beq.n	800b7d2 <_strtod_l+0x8fa>
 800b6fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b6fe:	d868      	bhi.n	800b7d2 <_strtod_l+0x8fa>
 800b700:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b704:	f67f ae9d 	bls.w	800b442 <_strtod_l+0x56a>
 800b708:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <_strtod_l+0x85c>)
 800b70a:	4650      	mov	r0, sl
 800b70c:	4659      	mov	r1, fp
 800b70e:	2200      	movs	r2, #0
 800b710:	f7f4 ff92 	bl	8000638 <__aeabi_dmul>
 800b714:	4b08      	ldr	r3, [pc, #32]	@ (800b738 <_strtod_l+0x860>)
 800b716:	400b      	ands	r3, r1
 800b718:	4682      	mov	sl, r0
 800b71a:	468b      	mov	fp, r1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f47f ae05 	bne.w	800b32c <_strtod_l+0x454>
 800b722:	9a05      	ldr	r2, [sp, #20]
 800b724:	2322      	movs	r3, #34	@ 0x22
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	e600      	b.n	800b32c <_strtod_l+0x454>
 800b72a:	bf00      	nop
 800b72c:	0800e480 	.word	0x0800e480
 800b730:	fffffc02 	.word	0xfffffc02
 800b734:	39500000 	.word	0x39500000
 800b738:	7ff00000 	.word	0x7ff00000
 800b73c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b740:	d165      	bne.n	800b80e <_strtod_l+0x936>
 800b742:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b744:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b748:	b35a      	cbz	r2, 800b7a2 <_strtod_l+0x8ca>
 800b74a:	4a9f      	ldr	r2, [pc, #636]	@ (800b9c8 <_strtod_l+0xaf0>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d12b      	bne.n	800b7a8 <_strtod_l+0x8d0>
 800b750:	9b08      	ldr	r3, [sp, #32]
 800b752:	4651      	mov	r1, sl
 800b754:	b303      	cbz	r3, 800b798 <_strtod_l+0x8c0>
 800b756:	4b9d      	ldr	r3, [pc, #628]	@ (800b9cc <_strtod_l+0xaf4>)
 800b758:	465a      	mov	r2, fp
 800b75a:	4013      	ands	r3, r2
 800b75c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b760:	f04f 32ff 	mov.w	r2, #4294967295
 800b764:	d81b      	bhi.n	800b79e <_strtod_l+0x8c6>
 800b766:	0d1b      	lsrs	r3, r3, #20
 800b768:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b76c:	fa02 f303 	lsl.w	r3, r2, r3
 800b770:	4299      	cmp	r1, r3
 800b772:	d119      	bne.n	800b7a8 <_strtod_l+0x8d0>
 800b774:	4b96      	ldr	r3, [pc, #600]	@ (800b9d0 <_strtod_l+0xaf8>)
 800b776:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b778:	429a      	cmp	r2, r3
 800b77a:	d102      	bne.n	800b782 <_strtod_l+0x8aa>
 800b77c:	3101      	adds	r1, #1
 800b77e:	f43f adca 	beq.w	800b316 <_strtod_l+0x43e>
 800b782:	4b92      	ldr	r3, [pc, #584]	@ (800b9cc <_strtod_l+0xaf4>)
 800b784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b786:	401a      	ands	r2, r3
 800b788:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b78c:	f04f 0a00 	mov.w	sl, #0
 800b790:	9b08      	ldr	r3, [sp, #32]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1b8      	bne.n	800b708 <_strtod_l+0x830>
 800b796:	e5c9      	b.n	800b32c <_strtod_l+0x454>
 800b798:	f04f 33ff 	mov.w	r3, #4294967295
 800b79c:	e7e8      	b.n	800b770 <_strtod_l+0x898>
 800b79e:	4613      	mov	r3, r2
 800b7a0:	e7e6      	b.n	800b770 <_strtod_l+0x898>
 800b7a2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7a6:	d0a1      	beq.n	800b6ec <_strtod_l+0x814>
 800b7a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b7aa:	b1db      	cbz	r3, 800b7e4 <_strtod_l+0x90c>
 800b7ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7ae:	4213      	tst	r3, r2
 800b7b0:	d0ee      	beq.n	800b790 <_strtod_l+0x8b8>
 800b7b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7b4:	9a08      	ldr	r2, [sp, #32]
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	4659      	mov	r1, fp
 800b7ba:	b1bb      	cbz	r3, 800b7ec <_strtod_l+0x914>
 800b7bc:	f7ff fb6e 	bl	800ae9c <sulp>
 800b7c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7c4:	ec53 2b10 	vmov	r2, r3, d0
 800b7c8:	f7f4 fd80 	bl	80002cc <__adddf3>
 800b7cc:	4682      	mov	sl, r0
 800b7ce:	468b      	mov	fp, r1
 800b7d0:	e7de      	b.n	800b790 <_strtod_l+0x8b8>
 800b7d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b7d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7de:	f04f 3aff 	mov.w	sl, #4294967295
 800b7e2:	e7d5      	b.n	800b790 <_strtod_l+0x8b8>
 800b7e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b7e6:	ea13 0f0a 	tst.w	r3, sl
 800b7ea:	e7e1      	b.n	800b7b0 <_strtod_l+0x8d8>
 800b7ec:	f7ff fb56 	bl	800ae9c <sulp>
 800b7f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7f4:	ec53 2b10 	vmov	r2, r3, d0
 800b7f8:	f7f4 fd66 	bl	80002c8 <__aeabi_dsub>
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2300      	movs	r3, #0
 800b800:	4682      	mov	sl, r0
 800b802:	468b      	mov	fp, r1
 800b804:	f7f5 f980 	bl	8000b08 <__aeabi_dcmpeq>
 800b808:	2800      	cmp	r0, #0
 800b80a:	d0c1      	beq.n	800b790 <_strtod_l+0x8b8>
 800b80c:	e619      	b.n	800b442 <_strtod_l+0x56a>
 800b80e:	4641      	mov	r1, r8
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff facd 	bl	800adb0 <__ratio>
 800b816:	ec57 6b10 	vmov	r6, r7, d0
 800b81a:	2200      	movs	r2, #0
 800b81c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f5 f984 	bl	8000b30 <__aeabi_dcmple>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d06f      	beq.n	800b90c <_strtod_l+0xa34>
 800b82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d17a      	bne.n	800b928 <_strtod_l+0xa50>
 800b832:	f1ba 0f00 	cmp.w	sl, #0
 800b836:	d158      	bne.n	800b8ea <_strtod_l+0xa12>
 800b838:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b83a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d15a      	bne.n	800b8f8 <_strtod_l+0xa20>
 800b842:	4b64      	ldr	r3, [pc, #400]	@ (800b9d4 <_strtod_l+0xafc>)
 800b844:	2200      	movs	r2, #0
 800b846:	4630      	mov	r0, r6
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f5 f967 	bl	8000b1c <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d159      	bne.n	800b906 <_strtod_l+0xa2e>
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	4b60      	ldr	r3, [pc, #384]	@ (800b9d8 <_strtod_l+0xb00>)
 800b858:	2200      	movs	r2, #0
 800b85a:	f7f4 feed 	bl	8000638 <__aeabi_dmul>
 800b85e:	4606      	mov	r6, r0
 800b860:	460f      	mov	r7, r1
 800b862:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b866:	9606      	str	r6, [sp, #24]
 800b868:	9307      	str	r3, [sp, #28]
 800b86a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b86e:	4d57      	ldr	r5, [pc, #348]	@ (800b9cc <_strtod_l+0xaf4>)
 800b870:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b876:	401d      	ands	r5, r3
 800b878:	4b58      	ldr	r3, [pc, #352]	@ (800b9dc <_strtod_l+0xb04>)
 800b87a:	429d      	cmp	r5, r3
 800b87c:	f040 80b2 	bne.w	800b9e4 <_strtod_l+0xb0c>
 800b880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b882:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b886:	ec4b ab10 	vmov	d0, sl, fp
 800b88a:	f7ff f9c9 	bl	800ac20 <__ulp>
 800b88e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b892:	ec51 0b10 	vmov	r0, r1, d0
 800b896:	f7f4 fecf 	bl	8000638 <__aeabi_dmul>
 800b89a:	4652      	mov	r2, sl
 800b89c:	465b      	mov	r3, fp
 800b89e:	f7f4 fd15 	bl	80002cc <__adddf3>
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4949      	ldr	r1, [pc, #292]	@ (800b9cc <_strtod_l+0xaf4>)
 800b8a6:	4a4e      	ldr	r2, [pc, #312]	@ (800b9e0 <_strtod_l+0xb08>)
 800b8a8:	4019      	ands	r1, r3
 800b8aa:	4291      	cmp	r1, r2
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	d942      	bls.n	800b936 <_strtod_l+0xa5e>
 800b8b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8b2:	4b47      	ldr	r3, [pc, #284]	@ (800b9d0 <_strtod_l+0xaf8>)
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d103      	bne.n	800b8c0 <_strtod_l+0x9e8>
 800b8b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f43f ad2b 	beq.w	800b316 <_strtod_l+0x43e>
 800b8c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b9d0 <_strtod_l+0xaf8>
 800b8c4:	f04f 3aff 	mov.w	sl, #4294967295
 800b8c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8ca:	9805      	ldr	r0, [sp, #20]
 800b8cc:	f7fe fe74 	bl	800a5b8 <_Bfree>
 800b8d0:	9805      	ldr	r0, [sp, #20]
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	f7fe fe70 	bl	800a5b8 <_Bfree>
 800b8d8:	9805      	ldr	r0, [sp, #20]
 800b8da:	4641      	mov	r1, r8
 800b8dc:	f7fe fe6c 	bl	800a5b8 <_Bfree>
 800b8e0:	9805      	ldr	r0, [sp, #20]
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	f7fe fe68 	bl	800a5b8 <_Bfree>
 800b8e8:	e618      	b.n	800b51c <_strtod_l+0x644>
 800b8ea:	f1ba 0f01 	cmp.w	sl, #1
 800b8ee:	d103      	bne.n	800b8f8 <_strtod_l+0xa20>
 800b8f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f43f ada5 	beq.w	800b442 <_strtod_l+0x56a>
 800b8f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b9a8 <_strtod_l+0xad0>
 800b8fc:	4f35      	ldr	r7, [pc, #212]	@ (800b9d4 <_strtod_l+0xafc>)
 800b8fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b902:	2600      	movs	r6, #0
 800b904:	e7b1      	b.n	800b86a <_strtod_l+0x992>
 800b906:	4f34      	ldr	r7, [pc, #208]	@ (800b9d8 <_strtod_l+0xb00>)
 800b908:	2600      	movs	r6, #0
 800b90a:	e7aa      	b.n	800b862 <_strtod_l+0x98a>
 800b90c:	4b32      	ldr	r3, [pc, #200]	@ (800b9d8 <_strtod_l+0xb00>)
 800b90e:	4630      	mov	r0, r6
 800b910:	4639      	mov	r1, r7
 800b912:	2200      	movs	r2, #0
 800b914:	f7f4 fe90 	bl	8000638 <__aeabi_dmul>
 800b918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b91a:	4606      	mov	r6, r0
 800b91c:	460f      	mov	r7, r1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d09f      	beq.n	800b862 <_strtod_l+0x98a>
 800b922:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b926:	e7a0      	b.n	800b86a <_strtod_l+0x992>
 800b928:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b9b0 <_strtod_l+0xad8>
 800b92c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b930:	ec57 6b17 	vmov	r6, r7, d7
 800b934:	e799      	b.n	800b86a <_strtod_l+0x992>
 800b936:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b93a:	9b08      	ldr	r3, [sp, #32]
 800b93c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1c1      	bne.n	800b8c8 <_strtod_l+0x9f0>
 800b944:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b948:	0d1b      	lsrs	r3, r3, #20
 800b94a:	051b      	lsls	r3, r3, #20
 800b94c:	429d      	cmp	r5, r3
 800b94e:	d1bb      	bne.n	800b8c8 <_strtod_l+0x9f0>
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f5 fa20 	bl	8000d98 <__aeabi_d2lz>
 800b958:	f7f4 fe40 	bl	80005dc <__aeabi_l2d>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f4 fcb0 	bl	80002c8 <__aeabi_dsub>
 800b968:	460b      	mov	r3, r1
 800b96a:	4602      	mov	r2, r0
 800b96c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b970:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b976:	ea46 060a 	orr.w	r6, r6, sl
 800b97a:	431e      	orrs	r6, r3
 800b97c:	d06f      	beq.n	800ba5e <_strtod_l+0xb86>
 800b97e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b9b8 <_strtod_l+0xae0>)
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f7f5 f8ca 	bl	8000b1c <__aeabi_dcmplt>
 800b988:	2800      	cmp	r0, #0
 800b98a:	f47f accf 	bne.w	800b32c <_strtod_l+0x454>
 800b98e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b9c0 <_strtod_l+0xae8>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b998:	f7f5 f8de 	bl	8000b58 <__aeabi_dcmpgt>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d093      	beq.n	800b8c8 <_strtod_l+0x9f0>
 800b9a0:	e4c4      	b.n	800b32c <_strtod_l+0x454>
 800b9a2:	bf00      	nop
 800b9a4:	f3af 8000 	nop.w
 800b9a8:	00000000 	.word	0x00000000
 800b9ac:	bff00000 	.word	0xbff00000
 800b9b0:	00000000 	.word	0x00000000
 800b9b4:	3ff00000 	.word	0x3ff00000
 800b9b8:	94a03595 	.word	0x94a03595
 800b9bc:	3fdfffff 	.word	0x3fdfffff
 800b9c0:	35afe535 	.word	0x35afe535
 800b9c4:	3fe00000 	.word	0x3fe00000
 800b9c8:	000fffff 	.word	0x000fffff
 800b9cc:	7ff00000 	.word	0x7ff00000
 800b9d0:	7fefffff 	.word	0x7fefffff
 800b9d4:	3ff00000 	.word	0x3ff00000
 800b9d8:	3fe00000 	.word	0x3fe00000
 800b9dc:	7fe00000 	.word	0x7fe00000
 800b9e0:	7c9fffff 	.word	0x7c9fffff
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	b323      	cbz	r3, 800ba32 <_strtod_l+0xb5a>
 800b9e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b9ec:	d821      	bhi.n	800ba32 <_strtod_l+0xb5a>
 800b9ee:	a328      	add	r3, pc, #160	@ (adr r3, 800ba90 <_strtod_l+0xbb8>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f5 f89a 	bl	8000b30 <__aeabi_dcmple>
 800b9fc:	b1a0      	cbz	r0, 800ba28 <_strtod_l+0xb50>
 800b9fe:	4639      	mov	r1, r7
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7f5 f8f1 	bl	8000be8 <__aeabi_d2uiz>
 800ba06:	2801      	cmp	r0, #1
 800ba08:	bf38      	it	cc
 800ba0a:	2001      	movcc	r0, #1
 800ba0c:	f7f4 fd9a 	bl	8000544 <__aeabi_ui2d>
 800ba10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	b9fb      	cbnz	r3, 800ba58 <_strtod_l+0xb80>
 800ba18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba1c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ba1e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ba24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ba28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ba2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ba2e:	1b5b      	subs	r3, r3, r5
 800ba30:	9311      	str	r3, [sp, #68]	@ 0x44
 800ba32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ba36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ba3a:	f7ff f8f1 	bl	800ac20 <__ulp>
 800ba3e:	4650      	mov	r0, sl
 800ba40:	ec53 2b10 	vmov	r2, r3, d0
 800ba44:	4659      	mov	r1, fp
 800ba46:	f7f4 fdf7 	bl	8000638 <__aeabi_dmul>
 800ba4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ba4e:	f7f4 fc3d 	bl	80002cc <__adddf3>
 800ba52:	4682      	mov	sl, r0
 800ba54:	468b      	mov	fp, r1
 800ba56:	e770      	b.n	800b93a <_strtod_l+0xa62>
 800ba58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ba5c:	e7e0      	b.n	800ba20 <_strtod_l+0xb48>
 800ba5e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ba98 <_strtod_l+0xbc0>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	f7f5 f85a 	bl	8000b1c <__aeabi_dcmplt>
 800ba68:	e798      	b.n	800b99c <_strtod_l+0xac4>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ba70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	f7ff ba6d 	b.w	800af52 <_strtod_l+0x7a>
 800ba78:	2a65      	cmp	r2, #101	@ 0x65
 800ba7a:	f43f ab66 	beq.w	800b14a <_strtod_l+0x272>
 800ba7e:	2a45      	cmp	r2, #69	@ 0x45
 800ba80:	f43f ab63 	beq.w	800b14a <_strtod_l+0x272>
 800ba84:	2301      	movs	r3, #1
 800ba86:	f7ff bb9e 	b.w	800b1c6 <_strtod_l+0x2ee>
 800ba8a:	bf00      	nop
 800ba8c:	f3af 8000 	nop.w
 800ba90:	ffc00000 	.word	0xffc00000
 800ba94:	41dfffff 	.word	0x41dfffff
 800ba98:	94a03595 	.word	0x94a03595
 800ba9c:	3fcfffff 	.word	0x3fcfffff

0800baa0 <_strtod_r>:
 800baa0:	4b01      	ldr	r3, [pc, #4]	@ (800baa8 <_strtod_r+0x8>)
 800baa2:	f7ff ba19 	b.w	800aed8 <_strtod_l>
 800baa6:	bf00      	nop
 800baa8:	200000b8 	.word	0x200000b8

0800baac <_strtol_l.constprop.0>:
 800baac:	2b24      	cmp	r3, #36	@ 0x24
 800baae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab2:	4686      	mov	lr, r0
 800bab4:	4690      	mov	r8, r2
 800bab6:	d801      	bhi.n	800babc <_strtol_l.constprop.0+0x10>
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d106      	bne.n	800baca <_strtol_l.constprop.0+0x1e>
 800babc:	f7fd fdac 	bl	8009618 <__errno>
 800bac0:	2316      	movs	r3, #22
 800bac2:	6003      	str	r3, [r0, #0]
 800bac4:	2000      	movs	r0, #0
 800bac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baca:	4834      	ldr	r0, [pc, #208]	@ (800bb9c <_strtol_l.constprop.0+0xf0>)
 800bacc:	460d      	mov	r5, r1
 800bace:	462a      	mov	r2, r5
 800bad0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bad4:	5d06      	ldrb	r6, [r0, r4]
 800bad6:	f016 0608 	ands.w	r6, r6, #8
 800bada:	d1f8      	bne.n	800bace <_strtol_l.constprop.0+0x22>
 800badc:	2c2d      	cmp	r4, #45	@ 0x2d
 800bade:	d12d      	bne.n	800bb3c <_strtol_l.constprop.0+0x90>
 800bae0:	782c      	ldrb	r4, [r5, #0]
 800bae2:	2601      	movs	r6, #1
 800bae4:	1c95      	adds	r5, r2, #2
 800bae6:	f033 0210 	bics.w	r2, r3, #16
 800baea:	d109      	bne.n	800bb00 <_strtol_l.constprop.0+0x54>
 800baec:	2c30      	cmp	r4, #48	@ 0x30
 800baee:	d12a      	bne.n	800bb46 <_strtol_l.constprop.0+0x9a>
 800baf0:	782a      	ldrb	r2, [r5, #0]
 800baf2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800baf6:	2a58      	cmp	r2, #88	@ 0x58
 800baf8:	d125      	bne.n	800bb46 <_strtol_l.constprop.0+0x9a>
 800bafa:	786c      	ldrb	r4, [r5, #1]
 800bafc:	2310      	movs	r3, #16
 800bafe:	3502      	adds	r5, #2
 800bb00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bb04:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb08:	2200      	movs	r2, #0
 800bb0a:	fbbc f9f3 	udiv	r9, ip, r3
 800bb0e:	4610      	mov	r0, r2
 800bb10:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bb18:	2f09      	cmp	r7, #9
 800bb1a:	d81b      	bhi.n	800bb54 <_strtol_l.constprop.0+0xa8>
 800bb1c:	463c      	mov	r4, r7
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	dd27      	ble.n	800bb72 <_strtol_l.constprop.0+0xc6>
 800bb22:	1c57      	adds	r7, r2, #1
 800bb24:	d007      	beq.n	800bb36 <_strtol_l.constprop.0+0x8a>
 800bb26:	4581      	cmp	r9, r0
 800bb28:	d320      	bcc.n	800bb6c <_strtol_l.constprop.0+0xc0>
 800bb2a:	d101      	bne.n	800bb30 <_strtol_l.constprop.0+0x84>
 800bb2c:	45a2      	cmp	sl, r4
 800bb2e:	db1d      	blt.n	800bb6c <_strtol_l.constprop.0+0xc0>
 800bb30:	fb00 4003 	mla	r0, r0, r3, r4
 800bb34:	2201      	movs	r2, #1
 800bb36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb3a:	e7eb      	b.n	800bb14 <_strtol_l.constprop.0+0x68>
 800bb3c:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb3e:	bf04      	itt	eq
 800bb40:	782c      	ldrbeq	r4, [r5, #0]
 800bb42:	1c95      	addeq	r5, r2, #2
 800bb44:	e7cf      	b.n	800bae6 <_strtol_l.constprop.0+0x3a>
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1da      	bne.n	800bb00 <_strtol_l.constprop.0+0x54>
 800bb4a:	2c30      	cmp	r4, #48	@ 0x30
 800bb4c:	bf0c      	ite	eq
 800bb4e:	2308      	moveq	r3, #8
 800bb50:	230a      	movne	r3, #10
 800bb52:	e7d5      	b.n	800bb00 <_strtol_l.constprop.0+0x54>
 800bb54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bb58:	2f19      	cmp	r7, #25
 800bb5a:	d801      	bhi.n	800bb60 <_strtol_l.constprop.0+0xb4>
 800bb5c:	3c37      	subs	r4, #55	@ 0x37
 800bb5e:	e7de      	b.n	800bb1e <_strtol_l.constprop.0+0x72>
 800bb60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bb64:	2f19      	cmp	r7, #25
 800bb66:	d804      	bhi.n	800bb72 <_strtol_l.constprop.0+0xc6>
 800bb68:	3c57      	subs	r4, #87	@ 0x57
 800bb6a:	e7d8      	b.n	800bb1e <_strtol_l.constprop.0+0x72>
 800bb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb70:	e7e1      	b.n	800bb36 <_strtol_l.constprop.0+0x8a>
 800bb72:	1c53      	adds	r3, r2, #1
 800bb74:	d108      	bne.n	800bb88 <_strtol_l.constprop.0+0xdc>
 800bb76:	2322      	movs	r3, #34	@ 0x22
 800bb78:	f8ce 3000 	str.w	r3, [lr]
 800bb7c:	4660      	mov	r0, ip
 800bb7e:	f1b8 0f00 	cmp.w	r8, #0
 800bb82:	d0a0      	beq.n	800bac6 <_strtol_l.constprop.0+0x1a>
 800bb84:	1e69      	subs	r1, r5, #1
 800bb86:	e006      	b.n	800bb96 <_strtol_l.constprop.0+0xea>
 800bb88:	b106      	cbz	r6, 800bb8c <_strtol_l.constprop.0+0xe0>
 800bb8a:	4240      	negs	r0, r0
 800bb8c:	f1b8 0f00 	cmp.w	r8, #0
 800bb90:	d099      	beq.n	800bac6 <_strtol_l.constprop.0+0x1a>
 800bb92:	2a00      	cmp	r2, #0
 800bb94:	d1f6      	bne.n	800bb84 <_strtol_l.constprop.0+0xd8>
 800bb96:	f8c8 1000 	str.w	r1, [r8]
 800bb9a:	e794      	b.n	800bac6 <_strtol_l.constprop.0+0x1a>
 800bb9c:	0800e4a9 	.word	0x0800e4a9

0800bba0 <_strtol_r>:
 800bba0:	f7ff bf84 	b.w	800baac <_strtol_l.constprop.0>

0800bba4 <__ssputs_r>:
 800bba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba8:	688e      	ldr	r6, [r1, #8]
 800bbaa:	461f      	mov	r7, r3
 800bbac:	42be      	cmp	r6, r7
 800bbae:	680b      	ldr	r3, [r1, #0]
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	4690      	mov	r8, r2
 800bbb6:	d82d      	bhi.n	800bc14 <__ssputs_r+0x70>
 800bbb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbc0:	d026      	beq.n	800bc10 <__ssputs_r+0x6c>
 800bbc2:	6965      	ldr	r5, [r4, #20]
 800bbc4:	6909      	ldr	r1, [r1, #16]
 800bbc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbca:	eba3 0901 	sub.w	r9, r3, r1
 800bbce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbd2:	1c7b      	adds	r3, r7, #1
 800bbd4:	444b      	add	r3, r9
 800bbd6:	106d      	asrs	r5, r5, #1
 800bbd8:	429d      	cmp	r5, r3
 800bbda:	bf38      	it	cc
 800bbdc:	461d      	movcc	r5, r3
 800bbde:	0553      	lsls	r3, r2, #21
 800bbe0:	d527      	bpl.n	800bc32 <__ssputs_r+0x8e>
 800bbe2:	4629      	mov	r1, r5
 800bbe4:	f7fe fc1c 	bl	800a420 <_malloc_r>
 800bbe8:	4606      	mov	r6, r0
 800bbea:	b360      	cbz	r0, 800bc46 <__ssputs_r+0xa2>
 800bbec:	6921      	ldr	r1, [r4, #16]
 800bbee:	464a      	mov	r2, r9
 800bbf0:	f7fd fd3f 	bl	8009672 <memcpy>
 800bbf4:	89a3      	ldrh	r3, [r4, #12]
 800bbf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbfe:	81a3      	strh	r3, [r4, #12]
 800bc00:	6126      	str	r6, [r4, #16]
 800bc02:	6165      	str	r5, [r4, #20]
 800bc04:	444e      	add	r6, r9
 800bc06:	eba5 0509 	sub.w	r5, r5, r9
 800bc0a:	6026      	str	r6, [r4, #0]
 800bc0c:	60a5      	str	r5, [r4, #8]
 800bc0e:	463e      	mov	r6, r7
 800bc10:	42be      	cmp	r6, r7
 800bc12:	d900      	bls.n	800bc16 <__ssputs_r+0x72>
 800bc14:	463e      	mov	r6, r7
 800bc16:	6820      	ldr	r0, [r4, #0]
 800bc18:	4632      	mov	r2, r6
 800bc1a:	4641      	mov	r1, r8
 800bc1c:	f7fd fc8f 	bl	800953e <memmove>
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	1b9b      	subs	r3, r3, r6
 800bc24:	60a3      	str	r3, [r4, #8]
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	4433      	add	r3, r6
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc32:	462a      	mov	r2, r5
 800bc34:	f000 fd61 	bl	800c6fa <_realloc_r>
 800bc38:	4606      	mov	r6, r0
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d1e0      	bne.n	800bc00 <__ssputs_r+0x5c>
 800bc3e:	6921      	ldr	r1, [r4, #16]
 800bc40:	4650      	mov	r0, sl
 800bc42:	f7fe fb79 	bl	800a338 <_free_r>
 800bc46:	230c      	movs	r3, #12
 800bc48:	f8ca 3000 	str.w	r3, [sl]
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295
 800bc58:	e7e9      	b.n	800bc2e <__ssputs_r+0x8a>
	...

0800bc5c <_svfiprintf_r>:
 800bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc60:	4698      	mov	r8, r3
 800bc62:	898b      	ldrh	r3, [r1, #12]
 800bc64:	061b      	lsls	r3, r3, #24
 800bc66:	b09d      	sub	sp, #116	@ 0x74
 800bc68:	4607      	mov	r7, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	4614      	mov	r4, r2
 800bc6e:	d510      	bpl.n	800bc92 <_svfiprintf_r+0x36>
 800bc70:	690b      	ldr	r3, [r1, #16]
 800bc72:	b973      	cbnz	r3, 800bc92 <_svfiprintf_r+0x36>
 800bc74:	2140      	movs	r1, #64	@ 0x40
 800bc76:	f7fe fbd3 	bl	800a420 <_malloc_r>
 800bc7a:	6028      	str	r0, [r5, #0]
 800bc7c:	6128      	str	r0, [r5, #16]
 800bc7e:	b930      	cbnz	r0, 800bc8e <_svfiprintf_r+0x32>
 800bc80:	230c      	movs	r3, #12
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	f04f 30ff 	mov.w	r0, #4294967295
 800bc88:	b01d      	add	sp, #116	@ 0x74
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	2340      	movs	r3, #64	@ 0x40
 800bc90:	616b      	str	r3, [r5, #20]
 800bc92:	2300      	movs	r3, #0
 800bc94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc96:	2320      	movs	r3, #32
 800bc98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bca0:	2330      	movs	r3, #48	@ 0x30
 800bca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800be40 <_svfiprintf_r+0x1e4>
 800bca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcaa:	f04f 0901 	mov.w	r9, #1
 800bcae:	4623      	mov	r3, r4
 800bcb0:	469a      	mov	sl, r3
 800bcb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb6:	b10a      	cbz	r2, 800bcbc <_svfiprintf_r+0x60>
 800bcb8:	2a25      	cmp	r2, #37	@ 0x25
 800bcba:	d1f9      	bne.n	800bcb0 <_svfiprintf_r+0x54>
 800bcbc:	ebba 0b04 	subs.w	fp, sl, r4
 800bcc0:	d00b      	beq.n	800bcda <_svfiprintf_r+0x7e>
 800bcc2:	465b      	mov	r3, fp
 800bcc4:	4622      	mov	r2, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f7ff ff6b 	bl	800bba4 <__ssputs_r>
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f000 80a7 	beq.w	800be22 <_svfiprintf_r+0x1c6>
 800bcd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcd6:	445a      	add	r2, fp
 800bcd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcda:	f89a 3000 	ldrb.w	r3, [sl]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f000 809f 	beq.w	800be22 <_svfiprintf_r+0x1c6>
 800bce4:	2300      	movs	r3, #0
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcee:	f10a 0a01 	add.w	sl, sl, #1
 800bcf2:	9304      	str	r3, [sp, #16]
 800bcf4:	9307      	str	r3, [sp, #28]
 800bcf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bcfa:	931a      	str	r3, [sp, #104]	@ 0x68
 800bcfc:	4654      	mov	r4, sl
 800bcfe:	2205      	movs	r2, #5
 800bd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd04:	484e      	ldr	r0, [pc, #312]	@ (800be40 <_svfiprintf_r+0x1e4>)
 800bd06:	f7f4 fa83 	bl	8000210 <memchr>
 800bd0a:	9a04      	ldr	r2, [sp, #16]
 800bd0c:	b9d8      	cbnz	r0, 800bd46 <_svfiprintf_r+0xea>
 800bd0e:	06d0      	lsls	r0, r2, #27
 800bd10:	bf44      	itt	mi
 800bd12:	2320      	movmi	r3, #32
 800bd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd18:	0711      	lsls	r1, r2, #28
 800bd1a:	bf44      	itt	mi
 800bd1c:	232b      	movmi	r3, #43	@ 0x2b
 800bd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd22:	f89a 3000 	ldrb.w	r3, [sl]
 800bd26:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd28:	d015      	beq.n	800bd56 <_svfiprintf_r+0xfa>
 800bd2a:	9a07      	ldr	r2, [sp, #28]
 800bd2c:	4654      	mov	r4, sl
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f04f 0c0a 	mov.w	ip, #10
 800bd34:	4621      	mov	r1, r4
 800bd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd3a:	3b30      	subs	r3, #48	@ 0x30
 800bd3c:	2b09      	cmp	r3, #9
 800bd3e:	d94b      	bls.n	800bdd8 <_svfiprintf_r+0x17c>
 800bd40:	b1b0      	cbz	r0, 800bd70 <_svfiprintf_r+0x114>
 800bd42:	9207      	str	r2, [sp, #28]
 800bd44:	e014      	b.n	800bd70 <_svfiprintf_r+0x114>
 800bd46:	eba0 0308 	sub.w	r3, r0, r8
 800bd4a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	46a2      	mov	sl, r4
 800bd54:	e7d2      	b.n	800bcfc <_svfiprintf_r+0xa0>
 800bd56:	9b03      	ldr	r3, [sp, #12]
 800bd58:	1d19      	adds	r1, r3, #4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	9103      	str	r1, [sp, #12]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	bfbb      	ittet	lt
 800bd62:	425b      	neglt	r3, r3
 800bd64:	f042 0202 	orrlt.w	r2, r2, #2
 800bd68:	9307      	strge	r3, [sp, #28]
 800bd6a:	9307      	strlt	r3, [sp, #28]
 800bd6c:	bfb8      	it	lt
 800bd6e:	9204      	strlt	r2, [sp, #16]
 800bd70:	7823      	ldrb	r3, [r4, #0]
 800bd72:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd74:	d10a      	bne.n	800bd8c <_svfiprintf_r+0x130>
 800bd76:	7863      	ldrb	r3, [r4, #1]
 800bd78:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd7a:	d132      	bne.n	800bde2 <_svfiprintf_r+0x186>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	1d1a      	adds	r2, r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	9203      	str	r2, [sp, #12]
 800bd84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd88:	3402      	adds	r4, #2
 800bd8a:	9305      	str	r3, [sp, #20]
 800bd8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be50 <_svfiprintf_r+0x1f4>
 800bd90:	7821      	ldrb	r1, [r4, #0]
 800bd92:	2203      	movs	r2, #3
 800bd94:	4650      	mov	r0, sl
 800bd96:	f7f4 fa3b 	bl	8000210 <memchr>
 800bd9a:	b138      	cbz	r0, 800bdac <_svfiprintf_r+0x150>
 800bd9c:	9b04      	ldr	r3, [sp, #16]
 800bd9e:	eba0 000a 	sub.w	r0, r0, sl
 800bda2:	2240      	movs	r2, #64	@ 0x40
 800bda4:	4082      	lsls	r2, r0
 800bda6:	4313      	orrs	r3, r2
 800bda8:	3401      	adds	r4, #1
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb0:	4824      	ldr	r0, [pc, #144]	@ (800be44 <_svfiprintf_r+0x1e8>)
 800bdb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdb6:	2206      	movs	r2, #6
 800bdb8:	f7f4 fa2a 	bl	8000210 <memchr>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d036      	beq.n	800be2e <_svfiprintf_r+0x1d2>
 800bdc0:	4b21      	ldr	r3, [pc, #132]	@ (800be48 <_svfiprintf_r+0x1ec>)
 800bdc2:	bb1b      	cbnz	r3, 800be0c <_svfiprintf_r+0x1b0>
 800bdc4:	9b03      	ldr	r3, [sp, #12]
 800bdc6:	3307      	adds	r3, #7
 800bdc8:	f023 0307 	bic.w	r3, r3, #7
 800bdcc:	3308      	adds	r3, #8
 800bdce:	9303      	str	r3, [sp, #12]
 800bdd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd2:	4433      	add	r3, r6
 800bdd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd6:	e76a      	b.n	800bcae <_svfiprintf_r+0x52>
 800bdd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bddc:	460c      	mov	r4, r1
 800bdde:	2001      	movs	r0, #1
 800bde0:	e7a8      	b.n	800bd34 <_svfiprintf_r+0xd8>
 800bde2:	2300      	movs	r3, #0
 800bde4:	3401      	adds	r4, #1
 800bde6:	9305      	str	r3, [sp, #20]
 800bde8:	4619      	mov	r1, r3
 800bdea:	f04f 0c0a 	mov.w	ip, #10
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf4:	3a30      	subs	r2, #48	@ 0x30
 800bdf6:	2a09      	cmp	r2, #9
 800bdf8:	d903      	bls.n	800be02 <_svfiprintf_r+0x1a6>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0c6      	beq.n	800bd8c <_svfiprintf_r+0x130>
 800bdfe:	9105      	str	r1, [sp, #20]
 800be00:	e7c4      	b.n	800bd8c <_svfiprintf_r+0x130>
 800be02:	fb0c 2101 	mla	r1, ip, r1, r2
 800be06:	4604      	mov	r4, r0
 800be08:	2301      	movs	r3, #1
 800be0a:	e7f0      	b.n	800bdee <_svfiprintf_r+0x192>
 800be0c:	ab03      	add	r3, sp, #12
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	462a      	mov	r2, r5
 800be12:	4b0e      	ldr	r3, [pc, #56]	@ (800be4c <_svfiprintf_r+0x1f0>)
 800be14:	a904      	add	r1, sp, #16
 800be16:	4638      	mov	r0, r7
 800be18:	f7fc fc6c 	bl	80086f4 <_printf_float>
 800be1c:	1c42      	adds	r2, r0, #1
 800be1e:	4606      	mov	r6, r0
 800be20:	d1d6      	bne.n	800bdd0 <_svfiprintf_r+0x174>
 800be22:	89ab      	ldrh	r3, [r5, #12]
 800be24:	065b      	lsls	r3, r3, #25
 800be26:	f53f af2d 	bmi.w	800bc84 <_svfiprintf_r+0x28>
 800be2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be2c:	e72c      	b.n	800bc88 <_svfiprintf_r+0x2c>
 800be2e:	ab03      	add	r3, sp, #12
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	462a      	mov	r2, r5
 800be34:	4b05      	ldr	r3, [pc, #20]	@ (800be4c <_svfiprintf_r+0x1f0>)
 800be36:	a904      	add	r1, sp, #16
 800be38:	4638      	mov	r0, r7
 800be3a:	f7fc fef3 	bl	8008c24 <_printf_i>
 800be3e:	e7ed      	b.n	800be1c <_svfiprintf_r+0x1c0>
 800be40:	0800e5a9 	.word	0x0800e5a9
 800be44:	0800e5b3 	.word	0x0800e5b3
 800be48:	080086f5 	.word	0x080086f5
 800be4c:	0800bba5 	.word	0x0800bba5
 800be50:	0800e5af 	.word	0x0800e5af

0800be54 <__sflush_r>:
 800be54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	0716      	lsls	r6, r2, #28
 800be5e:	4605      	mov	r5, r0
 800be60:	460c      	mov	r4, r1
 800be62:	d454      	bmi.n	800bf0e <__sflush_r+0xba>
 800be64:	684b      	ldr	r3, [r1, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	dc02      	bgt.n	800be70 <__sflush_r+0x1c>
 800be6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dd48      	ble.n	800bf02 <__sflush_r+0xae>
 800be70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be72:	2e00      	cmp	r6, #0
 800be74:	d045      	beq.n	800bf02 <__sflush_r+0xae>
 800be76:	2300      	movs	r3, #0
 800be78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be7c:	682f      	ldr	r7, [r5, #0]
 800be7e:	6a21      	ldr	r1, [r4, #32]
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	d030      	beq.n	800bee6 <__sflush_r+0x92>
 800be84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	0759      	lsls	r1, r3, #29
 800be8a:	d505      	bpl.n	800be98 <__sflush_r+0x44>
 800be8c:	6863      	ldr	r3, [r4, #4]
 800be8e:	1ad2      	subs	r2, r2, r3
 800be90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be92:	b10b      	cbz	r3, 800be98 <__sflush_r+0x44>
 800be94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	2300      	movs	r3, #0
 800be9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be9c:	6a21      	ldr	r1, [r4, #32]
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b0      	blx	r6
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	d106      	bne.n	800beb6 <__sflush_r+0x62>
 800bea8:	6829      	ldr	r1, [r5, #0]
 800beaa:	291d      	cmp	r1, #29
 800beac:	d82b      	bhi.n	800bf06 <__sflush_r+0xb2>
 800beae:	4a2a      	ldr	r2, [pc, #168]	@ (800bf58 <__sflush_r+0x104>)
 800beb0:	410a      	asrs	r2, r1
 800beb2:	07d6      	lsls	r6, r2, #31
 800beb4:	d427      	bmi.n	800bf06 <__sflush_r+0xb2>
 800beb6:	2200      	movs	r2, #0
 800beb8:	6062      	str	r2, [r4, #4]
 800beba:	04d9      	lsls	r1, r3, #19
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	6022      	str	r2, [r4, #0]
 800bec0:	d504      	bpl.n	800becc <__sflush_r+0x78>
 800bec2:	1c42      	adds	r2, r0, #1
 800bec4:	d101      	bne.n	800beca <__sflush_r+0x76>
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	b903      	cbnz	r3, 800becc <__sflush_r+0x78>
 800beca:	6560      	str	r0, [r4, #84]	@ 0x54
 800becc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bece:	602f      	str	r7, [r5, #0]
 800bed0:	b1b9      	cbz	r1, 800bf02 <__sflush_r+0xae>
 800bed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bed6:	4299      	cmp	r1, r3
 800bed8:	d002      	beq.n	800bee0 <__sflush_r+0x8c>
 800beda:	4628      	mov	r0, r5
 800bedc:	f7fe fa2c 	bl	800a338 <_free_r>
 800bee0:	2300      	movs	r3, #0
 800bee2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bee4:	e00d      	b.n	800bf02 <__sflush_r+0xae>
 800bee6:	2301      	movs	r3, #1
 800bee8:	4628      	mov	r0, r5
 800beea:	47b0      	blx	r6
 800beec:	4602      	mov	r2, r0
 800beee:	1c50      	adds	r0, r2, #1
 800bef0:	d1c9      	bne.n	800be86 <__sflush_r+0x32>
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d0c6      	beq.n	800be86 <__sflush_r+0x32>
 800bef8:	2b1d      	cmp	r3, #29
 800befa:	d001      	beq.n	800bf00 <__sflush_r+0xac>
 800befc:	2b16      	cmp	r3, #22
 800befe:	d11e      	bne.n	800bf3e <__sflush_r+0xea>
 800bf00:	602f      	str	r7, [r5, #0]
 800bf02:	2000      	movs	r0, #0
 800bf04:	e022      	b.n	800bf4c <__sflush_r+0xf8>
 800bf06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf0a:	b21b      	sxth	r3, r3
 800bf0c:	e01b      	b.n	800bf46 <__sflush_r+0xf2>
 800bf0e:	690f      	ldr	r7, [r1, #16]
 800bf10:	2f00      	cmp	r7, #0
 800bf12:	d0f6      	beq.n	800bf02 <__sflush_r+0xae>
 800bf14:	0793      	lsls	r3, r2, #30
 800bf16:	680e      	ldr	r6, [r1, #0]
 800bf18:	bf08      	it	eq
 800bf1a:	694b      	ldreq	r3, [r1, #20]
 800bf1c:	600f      	str	r7, [r1, #0]
 800bf1e:	bf18      	it	ne
 800bf20:	2300      	movne	r3, #0
 800bf22:	eba6 0807 	sub.w	r8, r6, r7
 800bf26:	608b      	str	r3, [r1, #8]
 800bf28:	f1b8 0f00 	cmp.w	r8, #0
 800bf2c:	dde9      	ble.n	800bf02 <__sflush_r+0xae>
 800bf2e:	6a21      	ldr	r1, [r4, #32]
 800bf30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf32:	4643      	mov	r3, r8
 800bf34:	463a      	mov	r2, r7
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b0      	blx	r6
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	dc08      	bgt.n	800bf50 <__sflush_r+0xfc>
 800bf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	4407      	add	r7, r0
 800bf52:	eba8 0800 	sub.w	r8, r8, r0
 800bf56:	e7e7      	b.n	800bf28 <__sflush_r+0xd4>
 800bf58:	dfbffffe 	.word	0xdfbffffe

0800bf5c <_fflush_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	690b      	ldr	r3, [r1, #16]
 800bf60:	4605      	mov	r5, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	b913      	cbnz	r3, 800bf6c <_fflush_r+0x10>
 800bf66:	2500      	movs	r5, #0
 800bf68:	4628      	mov	r0, r5
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	b118      	cbz	r0, 800bf76 <_fflush_r+0x1a>
 800bf6e:	6a03      	ldr	r3, [r0, #32]
 800bf70:	b90b      	cbnz	r3, 800bf76 <_fflush_r+0x1a>
 800bf72:	f7fd fa17 	bl	80093a4 <__sinit>
 800bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f3      	beq.n	800bf66 <_fflush_r+0xa>
 800bf7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf80:	07d0      	lsls	r0, r2, #31
 800bf82:	d404      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf84:	0599      	lsls	r1, r3, #22
 800bf86:	d402      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf8a:	f7fd fb70 	bl	800966e <__retarget_lock_acquire_recursive>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	4621      	mov	r1, r4
 800bf92:	f7ff ff5f 	bl	800be54 <__sflush_r>
 800bf96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf98:	07da      	lsls	r2, r3, #31
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	d4e4      	bmi.n	800bf68 <_fflush_r+0xc>
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	059b      	lsls	r3, r3, #22
 800bfa2:	d4e1      	bmi.n	800bf68 <_fflush_r+0xc>
 800bfa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfa6:	f7fd fb63 	bl	8009670 <__retarget_lock_release_recursive>
 800bfaa:	e7dd      	b.n	800bf68 <_fflush_r+0xc>

0800bfac <strncmp>:
 800bfac:	b510      	push	{r4, lr}
 800bfae:	b16a      	cbz	r2, 800bfcc <strncmp+0x20>
 800bfb0:	3901      	subs	r1, #1
 800bfb2:	1884      	adds	r4, r0, r2
 800bfb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d103      	bne.n	800bfc8 <strncmp+0x1c>
 800bfc0:	42a0      	cmp	r0, r4
 800bfc2:	d001      	beq.n	800bfc8 <strncmp+0x1c>
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	d1f5      	bne.n	800bfb4 <strncmp+0x8>
 800bfc8:	1ad0      	subs	r0, r2, r3
 800bfca:	bd10      	pop	{r4, pc}
 800bfcc:	4610      	mov	r0, r2
 800bfce:	e7fc      	b.n	800bfca <strncmp+0x1e>

0800bfd0 <_sbrk_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d06      	ldr	r5, [pc, #24]	@ (800bfec <_sbrk_r+0x1c>)
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	f7f5 ff1c 	bl	8001e18 <_sbrk>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_sbrk_r+0x1a>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_sbrk_r+0x1a>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	20000978 	.word	0x20000978

0800bff0 <nan>:
 800bff0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bff8 <nan+0x8>
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	00000000 	.word	0x00000000
 800bffc:	7ff80000 	.word	0x7ff80000

0800c000 <__assert_func>:
 800c000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c002:	4614      	mov	r4, r2
 800c004:	461a      	mov	r2, r3
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <__assert_func+0x2c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4605      	mov	r5, r0
 800c00c:	68d8      	ldr	r0, [r3, #12]
 800c00e:	b954      	cbnz	r4, 800c026 <__assert_func+0x26>
 800c010:	4b07      	ldr	r3, [pc, #28]	@ (800c030 <__assert_func+0x30>)
 800c012:	461c      	mov	r4, r3
 800c014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c018:	9100      	str	r1, [sp, #0]
 800c01a:	462b      	mov	r3, r5
 800c01c:	4905      	ldr	r1, [pc, #20]	@ (800c034 <__assert_func+0x34>)
 800c01e:	f000 fba7 	bl	800c770 <fiprintf>
 800c022:	f000 fbb7 	bl	800c794 <abort>
 800c026:	4b04      	ldr	r3, [pc, #16]	@ (800c038 <__assert_func+0x38>)
 800c028:	e7f4      	b.n	800c014 <__assert_func+0x14>
 800c02a:	bf00      	nop
 800c02c:	20000068 	.word	0x20000068
 800c030:	0800e5fd 	.word	0x0800e5fd
 800c034:	0800e5cf 	.word	0x0800e5cf
 800c038:	0800e5c2 	.word	0x0800e5c2

0800c03c <_calloc_r>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	fba1 5402 	umull	r5, r4, r1, r2
 800c042:	b93c      	cbnz	r4, 800c054 <_calloc_r+0x18>
 800c044:	4629      	mov	r1, r5
 800c046:	f7fe f9eb 	bl	800a420 <_malloc_r>
 800c04a:	4606      	mov	r6, r0
 800c04c:	b928      	cbnz	r0, 800c05a <_calloc_r+0x1e>
 800c04e:	2600      	movs	r6, #0
 800c050:	4630      	mov	r0, r6
 800c052:	bd70      	pop	{r4, r5, r6, pc}
 800c054:	220c      	movs	r2, #12
 800c056:	6002      	str	r2, [r0, #0]
 800c058:	e7f9      	b.n	800c04e <_calloc_r+0x12>
 800c05a:	462a      	mov	r2, r5
 800c05c:	4621      	mov	r1, r4
 800c05e:	f7fd fa88 	bl	8009572 <memset>
 800c062:	e7f5      	b.n	800c050 <_calloc_r+0x14>

0800c064 <rshift>:
 800c064:	6903      	ldr	r3, [r0, #16]
 800c066:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c06a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c06e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c072:	f100 0414 	add.w	r4, r0, #20
 800c076:	dd45      	ble.n	800c104 <rshift+0xa0>
 800c078:	f011 011f 	ands.w	r1, r1, #31
 800c07c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c080:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c084:	d10c      	bne.n	800c0a0 <rshift+0x3c>
 800c086:	f100 0710 	add.w	r7, r0, #16
 800c08a:	4629      	mov	r1, r5
 800c08c:	42b1      	cmp	r1, r6
 800c08e:	d334      	bcc.n	800c0fa <rshift+0x96>
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	1eea      	subs	r2, r5, #3
 800c096:	4296      	cmp	r6, r2
 800c098:	bf38      	it	cc
 800c09a:	2300      	movcc	r3, #0
 800c09c:	4423      	add	r3, r4
 800c09e:	e015      	b.n	800c0cc <rshift+0x68>
 800c0a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0a4:	f1c1 0820 	rsb	r8, r1, #32
 800c0a8:	40cf      	lsrs	r7, r1
 800c0aa:	f105 0e04 	add.w	lr, r5, #4
 800c0ae:	46a1      	mov	r9, r4
 800c0b0:	4576      	cmp	r6, lr
 800c0b2:	46f4      	mov	ip, lr
 800c0b4:	d815      	bhi.n	800c0e2 <rshift+0x7e>
 800c0b6:	1a9a      	subs	r2, r3, r2
 800c0b8:	0092      	lsls	r2, r2, #2
 800c0ba:	3a04      	subs	r2, #4
 800c0bc:	3501      	adds	r5, #1
 800c0be:	42ae      	cmp	r6, r5
 800c0c0:	bf38      	it	cc
 800c0c2:	2200      	movcc	r2, #0
 800c0c4:	18a3      	adds	r3, r4, r2
 800c0c6:	50a7      	str	r7, [r4, r2]
 800c0c8:	b107      	cbz	r7, 800c0cc <rshift+0x68>
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	1b1a      	subs	r2, r3, r4
 800c0ce:	42a3      	cmp	r3, r4
 800c0d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c0d4:	bf08      	it	eq
 800c0d6:	2300      	moveq	r3, #0
 800c0d8:	6102      	str	r2, [r0, #16]
 800c0da:	bf08      	it	eq
 800c0dc:	6143      	streq	r3, [r0, #20]
 800c0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0e2:	f8dc c000 	ldr.w	ip, [ip]
 800c0e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c0ea:	ea4c 0707 	orr.w	r7, ip, r7
 800c0ee:	f849 7b04 	str.w	r7, [r9], #4
 800c0f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0f6:	40cf      	lsrs	r7, r1
 800c0f8:	e7da      	b.n	800c0b0 <rshift+0x4c>
 800c0fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800c0fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800c102:	e7c3      	b.n	800c08c <rshift+0x28>
 800c104:	4623      	mov	r3, r4
 800c106:	e7e1      	b.n	800c0cc <rshift+0x68>

0800c108 <__hexdig_fun>:
 800c108:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c10c:	2b09      	cmp	r3, #9
 800c10e:	d802      	bhi.n	800c116 <__hexdig_fun+0xe>
 800c110:	3820      	subs	r0, #32
 800c112:	b2c0      	uxtb	r0, r0
 800c114:	4770      	bx	lr
 800c116:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c11a:	2b05      	cmp	r3, #5
 800c11c:	d801      	bhi.n	800c122 <__hexdig_fun+0x1a>
 800c11e:	3847      	subs	r0, #71	@ 0x47
 800c120:	e7f7      	b.n	800c112 <__hexdig_fun+0xa>
 800c122:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c126:	2b05      	cmp	r3, #5
 800c128:	d801      	bhi.n	800c12e <__hexdig_fun+0x26>
 800c12a:	3827      	subs	r0, #39	@ 0x27
 800c12c:	e7f1      	b.n	800c112 <__hexdig_fun+0xa>
 800c12e:	2000      	movs	r0, #0
 800c130:	4770      	bx	lr
	...

0800c134 <__gethex>:
 800c134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c138:	b085      	sub	sp, #20
 800c13a:	468a      	mov	sl, r1
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	680b      	ldr	r3, [r1, #0]
 800c140:	9001      	str	r0, [sp, #4]
 800c142:	4690      	mov	r8, r2
 800c144:	1c9c      	adds	r4, r3, #2
 800c146:	46a1      	mov	r9, r4
 800c148:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c14c:	2830      	cmp	r0, #48	@ 0x30
 800c14e:	d0fa      	beq.n	800c146 <__gethex+0x12>
 800c150:	eba9 0303 	sub.w	r3, r9, r3
 800c154:	f1a3 0b02 	sub.w	fp, r3, #2
 800c158:	f7ff ffd6 	bl	800c108 <__hexdig_fun>
 800c15c:	4605      	mov	r5, r0
 800c15e:	2800      	cmp	r0, #0
 800c160:	d168      	bne.n	800c234 <__gethex+0x100>
 800c162:	49a0      	ldr	r1, [pc, #640]	@ (800c3e4 <__gethex+0x2b0>)
 800c164:	2201      	movs	r2, #1
 800c166:	4648      	mov	r0, r9
 800c168:	f7ff ff20 	bl	800bfac <strncmp>
 800c16c:	4607      	mov	r7, r0
 800c16e:	2800      	cmp	r0, #0
 800c170:	d167      	bne.n	800c242 <__gethex+0x10e>
 800c172:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c176:	4626      	mov	r6, r4
 800c178:	f7ff ffc6 	bl	800c108 <__hexdig_fun>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d062      	beq.n	800c246 <__gethex+0x112>
 800c180:	4623      	mov	r3, r4
 800c182:	7818      	ldrb	r0, [r3, #0]
 800c184:	2830      	cmp	r0, #48	@ 0x30
 800c186:	4699      	mov	r9, r3
 800c188:	f103 0301 	add.w	r3, r3, #1
 800c18c:	d0f9      	beq.n	800c182 <__gethex+0x4e>
 800c18e:	f7ff ffbb 	bl	800c108 <__hexdig_fun>
 800c192:	fab0 f580 	clz	r5, r0
 800c196:	096d      	lsrs	r5, r5, #5
 800c198:	f04f 0b01 	mov.w	fp, #1
 800c19c:	464a      	mov	r2, r9
 800c19e:	4616      	mov	r6, r2
 800c1a0:	3201      	adds	r2, #1
 800c1a2:	7830      	ldrb	r0, [r6, #0]
 800c1a4:	f7ff ffb0 	bl	800c108 <__hexdig_fun>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d1f8      	bne.n	800c19e <__gethex+0x6a>
 800c1ac:	498d      	ldr	r1, [pc, #564]	@ (800c3e4 <__gethex+0x2b0>)
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7ff fefb 	bl	800bfac <strncmp>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d13f      	bne.n	800c23a <__gethex+0x106>
 800c1ba:	b944      	cbnz	r4, 800c1ce <__gethex+0x9a>
 800c1bc:	1c74      	adds	r4, r6, #1
 800c1be:	4622      	mov	r2, r4
 800c1c0:	4616      	mov	r6, r2
 800c1c2:	3201      	adds	r2, #1
 800c1c4:	7830      	ldrb	r0, [r6, #0]
 800c1c6:	f7ff ff9f 	bl	800c108 <__hexdig_fun>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d1f8      	bne.n	800c1c0 <__gethex+0x8c>
 800c1ce:	1ba4      	subs	r4, r4, r6
 800c1d0:	00a7      	lsls	r7, r4, #2
 800c1d2:	7833      	ldrb	r3, [r6, #0]
 800c1d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c1d8:	2b50      	cmp	r3, #80	@ 0x50
 800c1da:	d13e      	bne.n	800c25a <__gethex+0x126>
 800c1dc:	7873      	ldrb	r3, [r6, #1]
 800c1de:	2b2b      	cmp	r3, #43	@ 0x2b
 800c1e0:	d033      	beq.n	800c24a <__gethex+0x116>
 800c1e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c1e4:	d034      	beq.n	800c250 <__gethex+0x11c>
 800c1e6:	1c71      	adds	r1, r6, #1
 800c1e8:	2400      	movs	r4, #0
 800c1ea:	7808      	ldrb	r0, [r1, #0]
 800c1ec:	f7ff ff8c 	bl	800c108 <__hexdig_fun>
 800c1f0:	1e43      	subs	r3, r0, #1
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b18      	cmp	r3, #24
 800c1f6:	d830      	bhi.n	800c25a <__gethex+0x126>
 800c1f8:	f1a0 0210 	sub.w	r2, r0, #16
 800c1fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c200:	f7ff ff82 	bl	800c108 <__hexdig_fun>
 800c204:	f100 3cff 	add.w	ip, r0, #4294967295
 800c208:	fa5f fc8c 	uxtb.w	ip, ip
 800c20c:	f1bc 0f18 	cmp.w	ip, #24
 800c210:	f04f 030a 	mov.w	r3, #10
 800c214:	d91e      	bls.n	800c254 <__gethex+0x120>
 800c216:	b104      	cbz	r4, 800c21a <__gethex+0xe6>
 800c218:	4252      	negs	r2, r2
 800c21a:	4417      	add	r7, r2
 800c21c:	f8ca 1000 	str.w	r1, [sl]
 800c220:	b1ed      	cbz	r5, 800c25e <__gethex+0x12a>
 800c222:	f1bb 0f00 	cmp.w	fp, #0
 800c226:	bf0c      	ite	eq
 800c228:	2506      	moveq	r5, #6
 800c22a:	2500      	movne	r5, #0
 800c22c:	4628      	mov	r0, r5
 800c22e:	b005      	add	sp, #20
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	2500      	movs	r5, #0
 800c236:	462c      	mov	r4, r5
 800c238:	e7b0      	b.n	800c19c <__gethex+0x68>
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	d1c7      	bne.n	800c1ce <__gethex+0x9a>
 800c23e:	4627      	mov	r7, r4
 800c240:	e7c7      	b.n	800c1d2 <__gethex+0x9e>
 800c242:	464e      	mov	r6, r9
 800c244:	462f      	mov	r7, r5
 800c246:	2501      	movs	r5, #1
 800c248:	e7c3      	b.n	800c1d2 <__gethex+0x9e>
 800c24a:	2400      	movs	r4, #0
 800c24c:	1cb1      	adds	r1, r6, #2
 800c24e:	e7cc      	b.n	800c1ea <__gethex+0xb6>
 800c250:	2401      	movs	r4, #1
 800c252:	e7fb      	b.n	800c24c <__gethex+0x118>
 800c254:	fb03 0002 	mla	r0, r3, r2, r0
 800c258:	e7ce      	b.n	800c1f8 <__gethex+0xc4>
 800c25a:	4631      	mov	r1, r6
 800c25c:	e7de      	b.n	800c21c <__gethex+0xe8>
 800c25e:	eba6 0309 	sub.w	r3, r6, r9
 800c262:	3b01      	subs	r3, #1
 800c264:	4629      	mov	r1, r5
 800c266:	2b07      	cmp	r3, #7
 800c268:	dc0a      	bgt.n	800c280 <__gethex+0x14c>
 800c26a:	9801      	ldr	r0, [sp, #4]
 800c26c:	f7fe f964 	bl	800a538 <_Balloc>
 800c270:	4604      	mov	r4, r0
 800c272:	b940      	cbnz	r0, 800c286 <__gethex+0x152>
 800c274:	4b5c      	ldr	r3, [pc, #368]	@ (800c3e8 <__gethex+0x2b4>)
 800c276:	4602      	mov	r2, r0
 800c278:	21e4      	movs	r1, #228	@ 0xe4
 800c27a:	485c      	ldr	r0, [pc, #368]	@ (800c3ec <__gethex+0x2b8>)
 800c27c:	f7ff fec0 	bl	800c000 <__assert_func>
 800c280:	3101      	adds	r1, #1
 800c282:	105b      	asrs	r3, r3, #1
 800c284:	e7ef      	b.n	800c266 <__gethex+0x132>
 800c286:	f100 0a14 	add.w	sl, r0, #20
 800c28a:	2300      	movs	r3, #0
 800c28c:	4655      	mov	r5, sl
 800c28e:	469b      	mov	fp, r3
 800c290:	45b1      	cmp	r9, r6
 800c292:	d337      	bcc.n	800c304 <__gethex+0x1d0>
 800c294:	f845 bb04 	str.w	fp, [r5], #4
 800c298:	eba5 050a 	sub.w	r5, r5, sl
 800c29c:	10ad      	asrs	r5, r5, #2
 800c29e:	6125      	str	r5, [r4, #16]
 800c2a0:	4658      	mov	r0, fp
 800c2a2:	f7fe fa3b 	bl	800a71c <__hi0bits>
 800c2a6:	016d      	lsls	r5, r5, #5
 800c2a8:	f8d8 6000 	ldr.w	r6, [r8]
 800c2ac:	1a2d      	subs	r5, r5, r0
 800c2ae:	42b5      	cmp	r5, r6
 800c2b0:	dd54      	ble.n	800c35c <__gethex+0x228>
 800c2b2:	1bad      	subs	r5, r5, r6
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7fe fdcf 	bl	800ae5a <__any_on>
 800c2bc:	4681      	mov	r9, r0
 800c2be:	b178      	cbz	r0, 800c2e0 <__gethex+0x1ac>
 800c2c0:	1e6b      	subs	r3, r5, #1
 800c2c2:	1159      	asrs	r1, r3, #5
 800c2c4:	f003 021f 	and.w	r2, r3, #31
 800c2c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c2cc:	f04f 0901 	mov.w	r9, #1
 800c2d0:	fa09 f202 	lsl.w	r2, r9, r2
 800c2d4:	420a      	tst	r2, r1
 800c2d6:	d003      	beq.n	800c2e0 <__gethex+0x1ac>
 800c2d8:	454b      	cmp	r3, r9
 800c2da:	dc36      	bgt.n	800c34a <__gethex+0x216>
 800c2dc:	f04f 0902 	mov.w	r9, #2
 800c2e0:	4629      	mov	r1, r5
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f7ff febe 	bl	800c064 <rshift>
 800c2e8:	442f      	add	r7, r5
 800c2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2ee:	42bb      	cmp	r3, r7
 800c2f0:	da42      	bge.n	800c378 <__gethex+0x244>
 800c2f2:	9801      	ldr	r0, [sp, #4]
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	f7fe f95f 	bl	800a5b8 <_Bfree>
 800c2fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	6013      	str	r3, [r2, #0]
 800c300:	25a3      	movs	r5, #163	@ 0xa3
 800c302:	e793      	b.n	800c22c <__gethex+0xf8>
 800c304:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c308:	2a2e      	cmp	r2, #46	@ 0x2e
 800c30a:	d012      	beq.n	800c332 <__gethex+0x1fe>
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	d104      	bne.n	800c31a <__gethex+0x1e6>
 800c310:	f845 bb04 	str.w	fp, [r5], #4
 800c314:	f04f 0b00 	mov.w	fp, #0
 800c318:	465b      	mov	r3, fp
 800c31a:	7830      	ldrb	r0, [r6, #0]
 800c31c:	9303      	str	r3, [sp, #12]
 800c31e:	f7ff fef3 	bl	800c108 <__hexdig_fun>
 800c322:	9b03      	ldr	r3, [sp, #12]
 800c324:	f000 000f 	and.w	r0, r0, #15
 800c328:	4098      	lsls	r0, r3
 800c32a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c32e:	3304      	adds	r3, #4
 800c330:	e7ae      	b.n	800c290 <__gethex+0x15c>
 800c332:	45b1      	cmp	r9, r6
 800c334:	d8ea      	bhi.n	800c30c <__gethex+0x1d8>
 800c336:	492b      	ldr	r1, [pc, #172]	@ (800c3e4 <__gethex+0x2b0>)
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	2201      	movs	r2, #1
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7ff fe35 	bl	800bfac <strncmp>
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	2800      	cmp	r0, #0
 800c346:	d1e1      	bne.n	800c30c <__gethex+0x1d8>
 800c348:	e7a2      	b.n	800c290 <__gethex+0x15c>
 800c34a:	1ea9      	subs	r1, r5, #2
 800c34c:	4620      	mov	r0, r4
 800c34e:	f7fe fd84 	bl	800ae5a <__any_on>
 800c352:	2800      	cmp	r0, #0
 800c354:	d0c2      	beq.n	800c2dc <__gethex+0x1a8>
 800c356:	f04f 0903 	mov.w	r9, #3
 800c35a:	e7c1      	b.n	800c2e0 <__gethex+0x1ac>
 800c35c:	da09      	bge.n	800c372 <__gethex+0x23e>
 800c35e:	1b75      	subs	r5, r6, r5
 800c360:	4621      	mov	r1, r4
 800c362:	9801      	ldr	r0, [sp, #4]
 800c364:	462a      	mov	r2, r5
 800c366:	f7fe fb3f 	bl	800a9e8 <__lshift>
 800c36a:	1b7f      	subs	r7, r7, r5
 800c36c:	4604      	mov	r4, r0
 800c36e:	f100 0a14 	add.w	sl, r0, #20
 800c372:	f04f 0900 	mov.w	r9, #0
 800c376:	e7b8      	b.n	800c2ea <__gethex+0x1b6>
 800c378:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c37c:	42bd      	cmp	r5, r7
 800c37e:	dd6f      	ble.n	800c460 <__gethex+0x32c>
 800c380:	1bed      	subs	r5, r5, r7
 800c382:	42ae      	cmp	r6, r5
 800c384:	dc34      	bgt.n	800c3f0 <__gethex+0x2bc>
 800c386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c38a:	2b02      	cmp	r3, #2
 800c38c:	d022      	beq.n	800c3d4 <__gethex+0x2a0>
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d024      	beq.n	800c3dc <__gethex+0x2a8>
 800c392:	2b01      	cmp	r3, #1
 800c394:	d115      	bne.n	800c3c2 <__gethex+0x28e>
 800c396:	42ae      	cmp	r6, r5
 800c398:	d113      	bne.n	800c3c2 <__gethex+0x28e>
 800c39a:	2e01      	cmp	r6, #1
 800c39c:	d10b      	bne.n	800c3b6 <__gethex+0x282>
 800c39e:	9a02      	ldr	r2, [sp, #8]
 800c3a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	6123      	str	r3, [r4, #16]
 800c3aa:	f8ca 3000 	str.w	r3, [sl]
 800c3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3b0:	2562      	movs	r5, #98	@ 0x62
 800c3b2:	601c      	str	r4, [r3, #0]
 800c3b4:	e73a      	b.n	800c22c <__gethex+0xf8>
 800c3b6:	1e71      	subs	r1, r6, #1
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f7fe fd4e 	bl	800ae5a <__any_on>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d1ed      	bne.n	800c39e <__gethex+0x26a>
 800c3c2:	9801      	ldr	r0, [sp, #4]
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	f7fe f8f7 	bl	800a5b8 <_Bfree>
 800c3ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	6013      	str	r3, [r2, #0]
 800c3d0:	2550      	movs	r5, #80	@ 0x50
 800c3d2:	e72b      	b.n	800c22c <__gethex+0xf8>
 800c3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1f3      	bne.n	800c3c2 <__gethex+0x28e>
 800c3da:	e7e0      	b.n	800c39e <__gethex+0x26a>
 800c3dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1dd      	bne.n	800c39e <__gethex+0x26a>
 800c3e2:	e7ee      	b.n	800c3c2 <__gethex+0x28e>
 800c3e4:	0800e450 	.word	0x0800e450
 800c3e8:	0800e2e9 	.word	0x0800e2e9
 800c3ec:	0800e5fe 	.word	0x0800e5fe
 800c3f0:	1e6f      	subs	r7, r5, #1
 800c3f2:	f1b9 0f00 	cmp.w	r9, #0
 800c3f6:	d130      	bne.n	800c45a <__gethex+0x326>
 800c3f8:	b127      	cbz	r7, 800c404 <__gethex+0x2d0>
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f7fe fd2c 	bl	800ae5a <__any_on>
 800c402:	4681      	mov	r9, r0
 800c404:	117a      	asrs	r2, r7, #5
 800c406:	2301      	movs	r3, #1
 800c408:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c40c:	f007 071f 	and.w	r7, r7, #31
 800c410:	40bb      	lsls	r3, r7
 800c412:	4213      	tst	r3, r2
 800c414:	4629      	mov	r1, r5
 800c416:	4620      	mov	r0, r4
 800c418:	bf18      	it	ne
 800c41a:	f049 0902 	orrne.w	r9, r9, #2
 800c41e:	f7ff fe21 	bl	800c064 <rshift>
 800c422:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c426:	1b76      	subs	r6, r6, r5
 800c428:	2502      	movs	r5, #2
 800c42a:	f1b9 0f00 	cmp.w	r9, #0
 800c42e:	d047      	beq.n	800c4c0 <__gethex+0x38c>
 800c430:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d015      	beq.n	800c464 <__gethex+0x330>
 800c438:	2b03      	cmp	r3, #3
 800c43a:	d017      	beq.n	800c46c <__gethex+0x338>
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d109      	bne.n	800c454 <__gethex+0x320>
 800c440:	f019 0f02 	tst.w	r9, #2
 800c444:	d006      	beq.n	800c454 <__gethex+0x320>
 800c446:	f8da 3000 	ldr.w	r3, [sl]
 800c44a:	ea49 0903 	orr.w	r9, r9, r3
 800c44e:	f019 0f01 	tst.w	r9, #1
 800c452:	d10e      	bne.n	800c472 <__gethex+0x33e>
 800c454:	f045 0510 	orr.w	r5, r5, #16
 800c458:	e032      	b.n	800c4c0 <__gethex+0x38c>
 800c45a:	f04f 0901 	mov.w	r9, #1
 800c45e:	e7d1      	b.n	800c404 <__gethex+0x2d0>
 800c460:	2501      	movs	r5, #1
 800c462:	e7e2      	b.n	800c42a <__gethex+0x2f6>
 800c464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c466:	f1c3 0301 	rsb	r3, r3, #1
 800c46a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c46c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d0f0      	beq.n	800c454 <__gethex+0x320>
 800c472:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c476:	f104 0314 	add.w	r3, r4, #20
 800c47a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c47e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c482:	f04f 0c00 	mov.w	ip, #0
 800c486:	4618      	mov	r0, r3
 800c488:	f853 2b04 	ldr.w	r2, [r3], #4
 800c48c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c490:	d01b      	beq.n	800c4ca <__gethex+0x396>
 800c492:	3201      	adds	r2, #1
 800c494:	6002      	str	r2, [r0, #0]
 800c496:	2d02      	cmp	r5, #2
 800c498:	f104 0314 	add.w	r3, r4, #20
 800c49c:	d13c      	bne.n	800c518 <__gethex+0x3e4>
 800c49e:	f8d8 2000 	ldr.w	r2, [r8]
 800c4a2:	3a01      	subs	r2, #1
 800c4a4:	42b2      	cmp	r2, r6
 800c4a6:	d109      	bne.n	800c4bc <__gethex+0x388>
 800c4a8:	1171      	asrs	r1, r6, #5
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4b0:	f006 061f 	and.w	r6, r6, #31
 800c4b4:	fa02 f606 	lsl.w	r6, r2, r6
 800c4b8:	421e      	tst	r6, r3
 800c4ba:	d13a      	bne.n	800c532 <__gethex+0x3fe>
 800c4bc:	f045 0520 	orr.w	r5, r5, #32
 800c4c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c2:	601c      	str	r4, [r3, #0]
 800c4c4:	9b02      	ldr	r3, [sp, #8]
 800c4c6:	601f      	str	r7, [r3, #0]
 800c4c8:	e6b0      	b.n	800c22c <__gethex+0xf8>
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c4d0:	d8d9      	bhi.n	800c486 <__gethex+0x352>
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	459b      	cmp	fp, r3
 800c4d6:	db17      	blt.n	800c508 <__gethex+0x3d4>
 800c4d8:	6861      	ldr	r1, [r4, #4]
 800c4da:	9801      	ldr	r0, [sp, #4]
 800c4dc:	3101      	adds	r1, #1
 800c4de:	f7fe f82b 	bl	800a538 <_Balloc>
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	b918      	cbnz	r0, 800c4ee <__gethex+0x3ba>
 800c4e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c550 <__gethex+0x41c>)
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	2184      	movs	r1, #132	@ 0x84
 800c4ec:	e6c5      	b.n	800c27a <__gethex+0x146>
 800c4ee:	6922      	ldr	r2, [r4, #16]
 800c4f0:	3202      	adds	r2, #2
 800c4f2:	f104 010c 	add.w	r1, r4, #12
 800c4f6:	0092      	lsls	r2, r2, #2
 800c4f8:	300c      	adds	r0, #12
 800c4fa:	f7fd f8ba 	bl	8009672 <memcpy>
 800c4fe:	4621      	mov	r1, r4
 800c500:	9801      	ldr	r0, [sp, #4]
 800c502:	f7fe f859 	bl	800a5b8 <_Bfree>
 800c506:	464c      	mov	r4, r9
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	1c5a      	adds	r2, r3, #1
 800c50c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c510:	6122      	str	r2, [r4, #16]
 800c512:	2201      	movs	r2, #1
 800c514:	615a      	str	r2, [r3, #20]
 800c516:	e7be      	b.n	800c496 <__gethex+0x362>
 800c518:	6922      	ldr	r2, [r4, #16]
 800c51a:	455a      	cmp	r2, fp
 800c51c:	dd0b      	ble.n	800c536 <__gethex+0x402>
 800c51e:	2101      	movs	r1, #1
 800c520:	4620      	mov	r0, r4
 800c522:	f7ff fd9f 	bl	800c064 <rshift>
 800c526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c52a:	3701      	adds	r7, #1
 800c52c:	42bb      	cmp	r3, r7
 800c52e:	f6ff aee0 	blt.w	800c2f2 <__gethex+0x1be>
 800c532:	2501      	movs	r5, #1
 800c534:	e7c2      	b.n	800c4bc <__gethex+0x388>
 800c536:	f016 061f 	ands.w	r6, r6, #31
 800c53a:	d0fa      	beq.n	800c532 <__gethex+0x3fe>
 800c53c:	4453      	add	r3, sl
 800c53e:	f1c6 0620 	rsb	r6, r6, #32
 800c542:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c546:	f7fe f8e9 	bl	800a71c <__hi0bits>
 800c54a:	42b0      	cmp	r0, r6
 800c54c:	dbe7      	blt.n	800c51e <__gethex+0x3ea>
 800c54e:	e7f0      	b.n	800c532 <__gethex+0x3fe>
 800c550:	0800e2e9 	.word	0x0800e2e9

0800c554 <L_shift>:
 800c554:	f1c2 0208 	rsb	r2, r2, #8
 800c558:	0092      	lsls	r2, r2, #2
 800c55a:	b570      	push	{r4, r5, r6, lr}
 800c55c:	f1c2 0620 	rsb	r6, r2, #32
 800c560:	6843      	ldr	r3, [r0, #4]
 800c562:	6804      	ldr	r4, [r0, #0]
 800c564:	fa03 f506 	lsl.w	r5, r3, r6
 800c568:	432c      	orrs	r4, r5
 800c56a:	40d3      	lsrs	r3, r2
 800c56c:	6004      	str	r4, [r0, #0]
 800c56e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c572:	4288      	cmp	r0, r1
 800c574:	d3f4      	bcc.n	800c560 <L_shift+0xc>
 800c576:	bd70      	pop	{r4, r5, r6, pc}

0800c578 <__match>:
 800c578:	b530      	push	{r4, r5, lr}
 800c57a:	6803      	ldr	r3, [r0, #0]
 800c57c:	3301      	adds	r3, #1
 800c57e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c582:	b914      	cbnz	r4, 800c58a <__match+0x12>
 800c584:	6003      	str	r3, [r0, #0]
 800c586:	2001      	movs	r0, #1
 800c588:	bd30      	pop	{r4, r5, pc}
 800c58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c58e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c592:	2d19      	cmp	r5, #25
 800c594:	bf98      	it	ls
 800c596:	3220      	addls	r2, #32
 800c598:	42a2      	cmp	r2, r4
 800c59a:	d0f0      	beq.n	800c57e <__match+0x6>
 800c59c:	2000      	movs	r0, #0
 800c59e:	e7f3      	b.n	800c588 <__match+0x10>

0800c5a0 <__hexnan>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	680b      	ldr	r3, [r1, #0]
 800c5a6:	6801      	ldr	r1, [r0, #0]
 800c5a8:	115e      	asrs	r6, r3, #5
 800c5aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c5ae:	f013 031f 	ands.w	r3, r3, #31
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	bf18      	it	ne
 800c5b6:	3604      	addne	r6, #4
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	1f37      	subs	r7, r6, #4
 800c5bc:	4682      	mov	sl, r0
 800c5be:	4690      	mov	r8, r2
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c5c6:	46b9      	mov	r9, r7
 800c5c8:	463c      	mov	r4, r7
 800c5ca:	9502      	str	r5, [sp, #8]
 800c5cc:	46ab      	mov	fp, r5
 800c5ce:	784a      	ldrb	r2, [r1, #1]
 800c5d0:	1c4b      	adds	r3, r1, #1
 800c5d2:	9303      	str	r3, [sp, #12]
 800c5d4:	b342      	cbz	r2, 800c628 <__hexnan+0x88>
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	9105      	str	r1, [sp, #20]
 800c5da:	9204      	str	r2, [sp, #16]
 800c5dc:	f7ff fd94 	bl	800c108 <__hexdig_fun>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d151      	bne.n	800c688 <__hexnan+0xe8>
 800c5e4:	9a04      	ldr	r2, [sp, #16]
 800c5e6:	9905      	ldr	r1, [sp, #20]
 800c5e8:	2a20      	cmp	r2, #32
 800c5ea:	d818      	bhi.n	800c61e <__hexnan+0x7e>
 800c5ec:	9b02      	ldr	r3, [sp, #8]
 800c5ee:	459b      	cmp	fp, r3
 800c5f0:	dd13      	ble.n	800c61a <__hexnan+0x7a>
 800c5f2:	454c      	cmp	r4, r9
 800c5f4:	d206      	bcs.n	800c604 <__hexnan+0x64>
 800c5f6:	2d07      	cmp	r5, #7
 800c5f8:	dc04      	bgt.n	800c604 <__hexnan+0x64>
 800c5fa:	462a      	mov	r2, r5
 800c5fc:	4649      	mov	r1, r9
 800c5fe:	4620      	mov	r0, r4
 800c600:	f7ff ffa8 	bl	800c554 <L_shift>
 800c604:	4544      	cmp	r4, r8
 800c606:	d952      	bls.n	800c6ae <__hexnan+0x10e>
 800c608:	2300      	movs	r3, #0
 800c60a:	f1a4 0904 	sub.w	r9, r4, #4
 800c60e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c612:	f8cd b008 	str.w	fp, [sp, #8]
 800c616:	464c      	mov	r4, r9
 800c618:	461d      	mov	r5, r3
 800c61a:	9903      	ldr	r1, [sp, #12]
 800c61c:	e7d7      	b.n	800c5ce <__hexnan+0x2e>
 800c61e:	2a29      	cmp	r2, #41	@ 0x29
 800c620:	d157      	bne.n	800c6d2 <__hexnan+0x132>
 800c622:	3102      	adds	r1, #2
 800c624:	f8ca 1000 	str.w	r1, [sl]
 800c628:	f1bb 0f00 	cmp.w	fp, #0
 800c62c:	d051      	beq.n	800c6d2 <__hexnan+0x132>
 800c62e:	454c      	cmp	r4, r9
 800c630:	d206      	bcs.n	800c640 <__hexnan+0xa0>
 800c632:	2d07      	cmp	r5, #7
 800c634:	dc04      	bgt.n	800c640 <__hexnan+0xa0>
 800c636:	462a      	mov	r2, r5
 800c638:	4649      	mov	r1, r9
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7ff ff8a 	bl	800c554 <L_shift>
 800c640:	4544      	cmp	r4, r8
 800c642:	d936      	bls.n	800c6b2 <__hexnan+0x112>
 800c644:	f1a8 0204 	sub.w	r2, r8, #4
 800c648:	4623      	mov	r3, r4
 800c64a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c64e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c652:	429f      	cmp	r7, r3
 800c654:	d2f9      	bcs.n	800c64a <__hexnan+0xaa>
 800c656:	1b3b      	subs	r3, r7, r4
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	3304      	adds	r3, #4
 800c65e:	3401      	adds	r4, #1
 800c660:	3e03      	subs	r6, #3
 800c662:	42b4      	cmp	r4, r6
 800c664:	bf88      	it	hi
 800c666:	2304      	movhi	r3, #4
 800c668:	4443      	add	r3, r8
 800c66a:	2200      	movs	r2, #0
 800c66c:	f843 2b04 	str.w	r2, [r3], #4
 800c670:	429f      	cmp	r7, r3
 800c672:	d2fb      	bcs.n	800c66c <__hexnan+0xcc>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	b91b      	cbnz	r3, 800c680 <__hexnan+0xe0>
 800c678:	4547      	cmp	r7, r8
 800c67a:	d128      	bne.n	800c6ce <__hexnan+0x12e>
 800c67c:	2301      	movs	r3, #1
 800c67e:	603b      	str	r3, [r7, #0]
 800c680:	2005      	movs	r0, #5
 800c682:	b007      	add	sp, #28
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	3501      	adds	r5, #1
 800c68a:	2d08      	cmp	r5, #8
 800c68c:	f10b 0b01 	add.w	fp, fp, #1
 800c690:	dd06      	ble.n	800c6a0 <__hexnan+0x100>
 800c692:	4544      	cmp	r4, r8
 800c694:	d9c1      	bls.n	800c61a <__hexnan+0x7a>
 800c696:	2300      	movs	r3, #0
 800c698:	f844 3c04 	str.w	r3, [r4, #-4]
 800c69c:	2501      	movs	r5, #1
 800c69e:	3c04      	subs	r4, #4
 800c6a0:	6822      	ldr	r2, [r4, #0]
 800c6a2:	f000 000f 	and.w	r0, r0, #15
 800c6a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c6aa:	6020      	str	r0, [r4, #0]
 800c6ac:	e7b5      	b.n	800c61a <__hexnan+0x7a>
 800c6ae:	2508      	movs	r5, #8
 800c6b0:	e7b3      	b.n	800c61a <__hexnan+0x7a>
 800c6b2:	9b01      	ldr	r3, [sp, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d0dd      	beq.n	800c674 <__hexnan+0xd4>
 800c6b8:	f1c3 0320 	rsb	r3, r3, #32
 800c6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6c0:	40da      	lsrs	r2, r3
 800c6c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c6cc:	e7d2      	b.n	800c674 <__hexnan+0xd4>
 800c6ce:	3f04      	subs	r7, #4
 800c6d0:	e7d0      	b.n	800c674 <__hexnan+0xd4>
 800c6d2:	2004      	movs	r0, #4
 800c6d4:	e7d5      	b.n	800c682 <__hexnan+0xe2>

0800c6d6 <__ascii_mbtowc>:
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	b901      	cbnz	r1, 800c6dc <__ascii_mbtowc+0x6>
 800c6da:	a901      	add	r1, sp, #4
 800c6dc:	b142      	cbz	r2, 800c6f0 <__ascii_mbtowc+0x1a>
 800c6de:	b14b      	cbz	r3, 800c6f4 <__ascii_mbtowc+0x1e>
 800c6e0:	7813      	ldrb	r3, [r2, #0]
 800c6e2:	600b      	str	r3, [r1, #0]
 800c6e4:	7812      	ldrb	r2, [r2, #0]
 800c6e6:	1e10      	subs	r0, r2, #0
 800c6e8:	bf18      	it	ne
 800c6ea:	2001      	movne	r0, #1
 800c6ec:	b002      	add	sp, #8
 800c6ee:	4770      	bx	lr
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	e7fb      	b.n	800c6ec <__ascii_mbtowc+0x16>
 800c6f4:	f06f 0001 	mvn.w	r0, #1
 800c6f8:	e7f8      	b.n	800c6ec <__ascii_mbtowc+0x16>

0800c6fa <_realloc_r>:
 800c6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fe:	4680      	mov	r8, r0
 800c700:	4615      	mov	r5, r2
 800c702:	460c      	mov	r4, r1
 800c704:	b921      	cbnz	r1, 800c710 <_realloc_r+0x16>
 800c706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c70a:	4611      	mov	r1, r2
 800c70c:	f7fd be88 	b.w	800a420 <_malloc_r>
 800c710:	b92a      	cbnz	r2, 800c71e <_realloc_r+0x24>
 800c712:	f7fd fe11 	bl	800a338 <_free_r>
 800c716:	2400      	movs	r4, #0
 800c718:	4620      	mov	r0, r4
 800c71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71e:	f000 f840 	bl	800c7a2 <_malloc_usable_size_r>
 800c722:	4285      	cmp	r5, r0
 800c724:	4606      	mov	r6, r0
 800c726:	d802      	bhi.n	800c72e <_realloc_r+0x34>
 800c728:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c72c:	d8f4      	bhi.n	800c718 <_realloc_r+0x1e>
 800c72e:	4629      	mov	r1, r5
 800c730:	4640      	mov	r0, r8
 800c732:	f7fd fe75 	bl	800a420 <_malloc_r>
 800c736:	4607      	mov	r7, r0
 800c738:	2800      	cmp	r0, #0
 800c73a:	d0ec      	beq.n	800c716 <_realloc_r+0x1c>
 800c73c:	42b5      	cmp	r5, r6
 800c73e:	462a      	mov	r2, r5
 800c740:	4621      	mov	r1, r4
 800c742:	bf28      	it	cs
 800c744:	4632      	movcs	r2, r6
 800c746:	f7fc ff94 	bl	8009672 <memcpy>
 800c74a:	4621      	mov	r1, r4
 800c74c:	4640      	mov	r0, r8
 800c74e:	f7fd fdf3 	bl	800a338 <_free_r>
 800c752:	463c      	mov	r4, r7
 800c754:	e7e0      	b.n	800c718 <_realloc_r+0x1e>

0800c756 <__ascii_wctomb>:
 800c756:	4603      	mov	r3, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	b141      	cbz	r1, 800c76e <__ascii_wctomb+0x18>
 800c75c:	2aff      	cmp	r2, #255	@ 0xff
 800c75e:	d904      	bls.n	800c76a <__ascii_wctomb+0x14>
 800c760:	228a      	movs	r2, #138	@ 0x8a
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	f04f 30ff 	mov.w	r0, #4294967295
 800c768:	4770      	bx	lr
 800c76a:	700a      	strb	r2, [r1, #0]
 800c76c:	2001      	movs	r0, #1
 800c76e:	4770      	bx	lr

0800c770 <fiprintf>:
 800c770:	b40e      	push	{r1, r2, r3}
 800c772:	b503      	push	{r0, r1, lr}
 800c774:	4601      	mov	r1, r0
 800c776:	ab03      	add	r3, sp, #12
 800c778:	4805      	ldr	r0, [pc, #20]	@ (800c790 <fiprintf+0x20>)
 800c77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77e:	6800      	ldr	r0, [r0, #0]
 800c780:	9301      	str	r3, [sp, #4]
 800c782:	f000 f83f 	bl	800c804 <_vfiprintf_r>
 800c786:	b002      	add	sp, #8
 800c788:	f85d eb04 	ldr.w	lr, [sp], #4
 800c78c:	b003      	add	sp, #12
 800c78e:	4770      	bx	lr
 800c790:	20000068 	.word	0x20000068

0800c794 <abort>:
 800c794:	b508      	push	{r3, lr}
 800c796:	2006      	movs	r0, #6
 800c798:	f000 fa08 	bl	800cbac <raise>
 800c79c:	2001      	movs	r0, #1
 800c79e:	f7f5 fac3 	bl	8001d28 <_exit>

0800c7a2 <_malloc_usable_size_r>:
 800c7a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a6:	1f18      	subs	r0, r3, #4
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bfbc      	itt	lt
 800c7ac:	580b      	ldrlt	r3, [r1, r0]
 800c7ae:	18c0      	addlt	r0, r0, r3
 800c7b0:	4770      	bx	lr

0800c7b2 <__sfputc_r>:
 800c7b2:	6893      	ldr	r3, [r2, #8]
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	b410      	push	{r4}
 800c7ba:	6093      	str	r3, [r2, #8]
 800c7bc:	da08      	bge.n	800c7d0 <__sfputc_r+0x1e>
 800c7be:	6994      	ldr	r4, [r2, #24]
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	db01      	blt.n	800c7c8 <__sfputc_r+0x16>
 800c7c4:	290a      	cmp	r1, #10
 800c7c6:	d103      	bne.n	800c7d0 <__sfputc_r+0x1e>
 800c7c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7cc:	f000 b932 	b.w	800ca34 <__swbuf_r>
 800c7d0:	6813      	ldr	r3, [r2, #0]
 800c7d2:	1c58      	adds	r0, r3, #1
 800c7d4:	6010      	str	r0, [r2, #0]
 800c7d6:	7019      	strb	r1, [r3, #0]
 800c7d8:	4608      	mov	r0, r1
 800c7da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <__sfputs_r>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460f      	mov	r7, r1
 800c7e6:	4614      	mov	r4, r2
 800c7e8:	18d5      	adds	r5, r2, r3
 800c7ea:	42ac      	cmp	r4, r5
 800c7ec:	d101      	bne.n	800c7f2 <__sfputs_r+0x12>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	e007      	b.n	800c802 <__sfputs_r+0x22>
 800c7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f6:	463a      	mov	r2, r7
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7ff ffda 	bl	800c7b2 <__sfputc_r>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	d1f3      	bne.n	800c7ea <__sfputs_r+0xa>
 800c802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c804 <_vfiprintf_r>:
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	460d      	mov	r5, r1
 800c80a:	b09d      	sub	sp, #116	@ 0x74
 800c80c:	4614      	mov	r4, r2
 800c80e:	4698      	mov	r8, r3
 800c810:	4606      	mov	r6, r0
 800c812:	b118      	cbz	r0, 800c81c <_vfiprintf_r+0x18>
 800c814:	6a03      	ldr	r3, [r0, #32]
 800c816:	b90b      	cbnz	r3, 800c81c <_vfiprintf_r+0x18>
 800c818:	f7fc fdc4 	bl	80093a4 <__sinit>
 800c81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c81e:	07d9      	lsls	r1, r3, #31
 800c820:	d405      	bmi.n	800c82e <_vfiprintf_r+0x2a>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	059a      	lsls	r2, r3, #22
 800c826:	d402      	bmi.n	800c82e <_vfiprintf_r+0x2a>
 800c828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c82a:	f7fc ff20 	bl	800966e <__retarget_lock_acquire_recursive>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	071b      	lsls	r3, r3, #28
 800c832:	d501      	bpl.n	800c838 <_vfiprintf_r+0x34>
 800c834:	692b      	ldr	r3, [r5, #16]
 800c836:	b99b      	cbnz	r3, 800c860 <_vfiprintf_r+0x5c>
 800c838:	4629      	mov	r1, r5
 800c83a:	4630      	mov	r0, r6
 800c83c:	f000 f938 	bl	800cab0 <__swsetup_r>
 800c840:	b170      	cbz	r0, 800c860 <_vfiprintf_r+0x5c>
 800c842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c844:	07dc      	lsls	r4, r3, #31
 800c846:	d504      	bpl.n	800c852 <_vfiprintf_r+0x4e>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	b01d      	add	sp, #116	@ 0x74
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	89ab      	ldrh	r3, [r5, #12]
 800c854:	0598      	lsls	r0, r3, #22
 800c856:	d4f7      	bmi.n	800c848 <_vfiprintf_r+0x44>
 800c858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c85a:	f7fc ff09 	bl	8009670 <__retarget_lock_release_recursive>
 800c85e:	e7f3      	b.n	800c848 <_vfiprintf_r+0x44>
 800c860:	2300      	movs	r3, #0
 800c862:	9309      	str	r3, [sp, #36]	@ 0x24
 800c864:	2320      	movs	r3, #32
 800c866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c86e:	2330      	movs	r3, #48	@ 0x30
 800c870:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca20 <_vfiprintf_r+0x21c>
 800c874:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c878:	f04f 0901 	mov.w	r9, #1
 800c87c:	4623      	mov	r3, r4
 800c87e:	469a      	mov	sl, r3
 800c880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c884:	b10a      	cbz	r2, 800c88a <_vfiprintf_r+0x86>
 800c886:	2a25      	cmp	r2, #37	@ 0x25
 800c888:	d1f9      	bne.n	800c87e <_vfiprintf_r+0x7a>
 800c88a:	ebba 0b04 	subs.w	fp, sl, r4
 800c88e:	d00b      	beq.n	800c8a8 <_vfiprintf_r+0xa4>
 800c890:	465b      	mov	r3, fp
 800c892:	4622      	mov	r2, r4
 800c894:	4629      	mov	r1, r5
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff ffa2 	bl	800c7e0 <__sfputs_r>
 800c89c:	3001      	adds	r0, #1
 800c89e:	f000 80a7 	beq.w	800c9f0 <_vfiprintf_r+0x1ec>
 800c8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8a4:	445a      	add	r2, fp
 800c8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 809f 	beq.w	800c9f0 <_vfiprintf_r+0x1ec>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8bc:	f10a 0a01 	add.w	sl, sl, #1
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	9307      	str	r3, [sp, #28]
 800c8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ca:	4654      	mov	r4, sl
 800c8cc:	2205      	movs	r2, #5
 800c8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d2:	4853      	ldr	r0, [pc, #332]	@ (800ca20 <_vfiprintf_r+0x21c>)
 800c8d4:	f7f3 fc9c 	bl	8000210 <memchr>
 800c8d8:	9a04      	ldr	r2, [sp, #16]
 800c8da:	b9d8      	cbnz	r0, 800c914 <_vfiprintf_r+0x110>
 800c8dc:	06d1      	lsls	r1, r2, #27
 800c8de:	bf44      	itt	mi
 800c8e0:	2320      	movmi	r3, #32
 800c8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8e6:	0713      	lsls	r3, r2, #28
 800c8e8:	bf44      	itt	mi
 800c8ea:	232b      	movmi	r3, #43	@ 0x2b
 800c8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8f6:	d015      	beq.n	800c924 <_vfiprintf_r+0x120>
 800c8f8:	9a07      	ldr	r2, [sp, #28]
 800c8fa:	4654      	mov	r4, sl
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	f04f 0c0a 	mov.w	ip, #10
 800c902:	4621      	mov	r1, r4
 800c904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c908:	3b30      	subs	r3, #48	@ 0x30
 800c90a:	2b09      	cmp	r3, #9
 800c90c:	d94b      	bls.n	800c9a6 <_vfiprintf_r+0x1a2>
 800c90e:	b1b0      	cbz	r0, 800c93e <_vfiprintf_r+0x13a>
 800c910:	9207      	str	r2, [sp, #28]
 800c912:	e014      	b.n	800c93e <_vfiprintf_r+0x13a>
 800c914:	eba0 0308 	sub.w	r3, r0, r8
 800c918:	fa09 f303 	lsl.w	r3, r9, r3
 800c91c:	4313      	orrs	r3, r2
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	46a2      	mov	sl, r4
 800c922:	e7d2      	b.n	800c8ca <_vfiprintf_r+0xc6>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	1d19      	adds	r1, r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	9103      	str	r1, [sp, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfbb      	ittet	lt
 800c930:	425b      	neglt	r3, r3
 800c932:	f042 0202 	orrlt.w	r2, r2, #2
 800c936:	9307      	strge	r3, [sp, #28]
 800c938:	9307      	strlt	r3, [sp, #28]
 800c93a:	bfb8      	it	lt
 800c93c:	9204      	strlt	r2, [sp, #16]
 800c93e:	7823      	ldrb	r3, [r4, #0]
 800c940:	2b2e      	cmp	r3, #46	@ 0x2e
 800c942:	d10a      	bne.n	800c95a <_vfiprintf_r+0x156>
 800c944:	7863      	ldrb	r3, [r4, #1]
 800c946:	2b2a      	cmp	r3, #42	@ 0x2a
 800c948:	d132      	bne.n	800c9b0 <_vfiprintf_r+0x1ac>
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	1d1a      	adds	r2, r3, #4
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	9203      	str	r2, [sp, #12]
 800c952:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c956:	3402      	adds	r4, #2
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca30 <_vfiprintf_r+0x22c>
 800c95e:	7821      	ldrb	r1, [r4, #0]
 800c960:	2203      	movs	r2, #3
 800c962:	4650      	mov	r0, sl
 800c964:	f7f3 fc54 	bl	8000210 <memchr>
 800c968:	b138      	cbz	r0, 800c97a <_vfiprintf_r+0x176>
 800c96a:	9b04      	ldr	r3, [sp, #16]
 800c96c:	eba0 000a 	sub.w	r0, r0, sl
 800c970:	2240      	movs	r2, #64	@ 0x40
 800c972:	4082      	lsls	r2, r0
 800c974:	4313      	orrs	r3, r2
 800c976:	3401      	adds	r4, #1
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	4829      	ldr	r0, [pc, #164]	@ (800ca24 <_vfiprintf_r+0x220>)
 800c980:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c984:	2206      	movs	r2, #6
 800c986:	f7f3 fc43 	bl	8000210 <memchr>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d03f      	beq.n	800ca0e <_vfiprintf_r+0x20a>
 800c98e:	4b26      	ldr	r3, [pc, #152]	@ (800ca28 <_vfiprintf_r+0x224>)
 800c990:	bb1b      	cbnz	r3, 800c9da <_vfiprintf_r+0x1d6>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	3307      	adds	r3, #7
 800c996:	f023 0307 	bic.w	r3, r3, #7
 800c99a:	3308      	adds	r3, #8
 800c99c:	9303      	str	r3, [sp, #12]
 800c99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a0:	443b      	add	r3, r7
 800c9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a4:	e76a      	b.n	800c87c <_vfiprintf_r+0x78>
 800c9a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	2001      	movs	r0, #1
 800c9ae:	e7a8      	b.n	800c902 <_vfiprintf_r+0xfe>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	3401      	adds	r4, #1
 800c9b4:	9305      	str	r3, [sp, #20]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	f04f 0c0a 	mov.w	ip, #10
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c2:	3a30      	subs	r2, #48	@ 0x30
 800c9c4:	2a09      	cmp	r2, #9
 800c9c6:	d903      	bls.n	800c9d0 <_vfiprintf_r+0x1cc>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0c6      	beq.n	800c95a <_vfiprintf_r+0x156>
 800c9cc:	9105      	str	r1, [sp, #20]
 800c9ce:	e7c4      	b.n	800c95a <_vfiprintf_r+0x156>
 800c9d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e7f0      	b.n	800c9bc <_vfiprintf_r+0x1b8>
 800c9da:	ab03      	add	r3, sp, #12
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4b12      	ldr	r3, [pc, #72]	@ (800ca2c <_vfiprintf_r+0x228>)
 800c9e2:	a904      	add	r1, sp, #16
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7fb fe85 	bl	80086f4 <_printf_float>
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	1c78      	adds	r0, r7, #1
 800c9ee:	d1d6      	bne.n	800c99e <_vfiprintf_r+0x19a>
 800c9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9f2:	07d9      	lsls	r1, r3, #31
 800c9f4:	d405      	bmi.n	800ca02 <_vfiprintf_r+0x1fe>
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	059a      	lsls	r2, r3, #22
 800c9fa:	d402      	bmi.n	800ca02 <_vfiprintf_r+0x1fe>
 800c9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9fe:	f7fc fe37 	bl	8009670 <__retarget_lock_release_recursive>
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	065b      	lsls	r3, r3, #25
 800ca06:	f53f af1f 	bmi.w	800c848 <_vfiprintf_r+0x44>
 800ca0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca0c:	e71e      	b.n	800c84c <_vfiprintf_r+0x48>
 800ca0e:	ab03      	add	r3, sp, #12
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	462a      	mov	r2, r5
 800ca14:	4b05      	ldr	r3, [pc, #20]	@ (800ca2c <_vfiprintf_r+0x228>)
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7fc f903 	bl	8008c24 <_printf_i>
 800ca1e:	e7e4      	b.n	800c9ea <_vfiprintf_r+0x1e6>
 800ca20:	0800e5a9 	.word	0x0800e5a9
 800ca24:	0800e5b3 	.word	0x0800e5b3
 800ca28:	080086f5 	.word	0x080086f5
 800ca2c:	0800c7e1 	.word	0x0800c7e1
 800ca30:	0800e5af 	.word	0x0800e5af

0800ca34 <__swbuf_r>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	460e      	mov	r6, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	b118      	cbz	r0, 800ca46 <__swbuf_r+0x12>
 800ca3e:	6a03      	ldr	r3, [r0, #32]
 800ca40:	b90b      	cbnz	r3, 800ca46 <__swbuf_r+0x12>
 800ca42:	f7fc fcaf 	bl	80093a4 <__sinit>
 800ca46:	69a3      	ldr	r3, [r4, #24]
 800ca48:	60a3      	str	r3, [r4, #8]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	071a      	lsls	r2, r3, #28
 800ca4e:	d501      	bpl.n	800ca54 <__swbuf_r+0x20>
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	b943      	cbnz	r3, 800ca66 <__swbuf_r+0x32>
 800ca54:	4621      	mov	r1, r4
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 f82a 	bl	800cab0 <__swsetup_r>
 800ca5c:	b118      	cbz	r0, 800ca66 <__swbuf_r+0x32>
 800ca5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ca62:	4638      	mov	r0, r7
 800ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	6922      	ldr	r2, [r4, #16]
 800ca6a:	1a98      	subs	r0, r3, r2
 800ca6c:	6963      	ldr	r3, [r4, #20]
 800ca6e:	b2f6      	uxtb	r6, r6
 800ca70:	4283      	cmp	r3, r0
 800ca72:	4637      	mov	r7, r6
 800ca74:	dc05      	bgt.n	800ca82 <__swbuf_r+0x4e>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7ff fa6f 	bl	800bf5c <_fflush_r>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d1ed      	bne.n	800ca5e <__swbuf_r+0x2a>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	6022      	str	r2, [r4, #0]
 800ca8e:	701e      	strb	r6, [r3, #0]
 800ca90:	6962      	ldr	r2, [r4, #20]
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d004      	beq.n	800caa2 <__swbuf_r+0x6e>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	07db      	lsls	r3, r3, #31
 800ca9c:	d5e1      	bpl.n	800ca62 <__swbuf_r+0x2e>
 800ca9e:	2e0a      	cmp	r6, #10
 800caa0:	d1df      	bne.n	800ca62 <__swbuf_r+0x2e>
 800caa2:	4621      	mov	r1, r4
 800caa4:	4628      	mov	r0, r5
 800caa6:	f7ff fa59 	bl	800bf5c <_fflush_r>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0d9      	beq.n	800ca62 <__swbuf_r+0x2e>
 800caae:	e7d6      	b.n	800ca5e <__swbuf_r+0x2a>

0800cab0 <__swsetup_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4b29      	ldr	r3, [pc, #164]	@ (800cb58 <__swsetup_r+0xa8>)
 800cab4:	4605      	mov	r5, r0
 800cab6:	6818      	ldr	r0, [r3, #0]
 800cab8:	460c      	mov	r4, r1
 800caba:	b118      	cbz	r0, 800cac4 <__swsetup_r+0x14>
 800cabc:	6a03      	ldr	r3, [r0, #32]
 800cabe:	b90b      	cbnz	r3, 800cac4 <__swsetup_r+0x14>
 800cac0:	f7fc fc70 	bl	80093a4 <__sinit>
 800cac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac8:	0719      	lsls	r1, r3, #28
 800caca:	d422      	bmi.n	800cb12 <__swsetup_r+0x62>
 800cacc:	06da      	lsls	r2, r3, #27
 800cace:	d407      	bmi.n	800cae0 <__swsetup_r+0x30>
 800cad0:	2209      	movs	r2, #9
 800cad2:	602a      	str	r2, [r5, #0]
 800cad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cad8:	81a3      	strh	r3, [r4, #12]
 800cada:	f04f 30ff 	mov.w	r0, #4294967295
 800cade:	e033      	b.n	800cb48 <__swsetup_r+0x98>
 800cae0:	0758      	lsls	r0, r3, #29
 800cae2:	d512      	bpl.n	800cb0a <__swsetup_r+0x5a>
 800cae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cae6:	b141      	cbz	r1, 800cafa <__swsetup_r+0x4a>
 800cae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caec:	4299      	cmp	r1, r3
 800caee:	d002      	beq.n	800caf6 <__swsetup_r+0x46>
 800caf0:	4628      	mov	r0, r5
 800caf2:	f7fd fc21 	bl	800a338 <_free_r>
 800caf6:	2300      	movs	r3, #0
 800caf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	2300      	movs	r3, #0
 800cb04:	6063      	str	r3, [r4, #4]
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f043 0308 	orr.w	r3, r3, #8
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	b94b      	cbnz	r3, 800cb2a <__swsetup_r+0x7a>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb20:	d003      	beq.n	800cb2a <__swsetup_r+0x7a>
 800cb22:	4621      	mov	r1, r4
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 f883 	bl	800cc30 <__smakebuf_r>
 800cb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2e:	f013 0201 	ands.w	r2, r3, #1
 800cb32:	d00a      	beq.n	800cb4a <__swsetup_r+0x9a>
 800cb34:	2200      	movs	r2, #0
 800cb36:	60a2      	str	r2, [r4, #8]
 800cb38:	6962      	ldr	r2, [r4, #20]
 800cb3a:	4252      	negs	r2, r2
 800cb3c:	61a2      	str	r2, [r4, #24]
 800cb3e:	6922      	ldr	r2, [r4, #16]
 800cb40:	b942      	cbnz	r2, 800cb54 <__swsetup_r+0xa4>
 800cb42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb46:	d1c5      	bne.n	800cad4 <__swsetup_r+0x24>
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	0799      	lsls	r1, r3, #30
 800cb4c:	bf58      	it	pl
 800cb4e:	6962      	ldrpl	r2, [r4, #20]
 800cb50:	60a2      	str	r2, [r4, #8]
 800cb52:	e7f4      	b.n	800cb3e <__swsetup_r+0x8e>
 800cb54:	2000      	movs	r0, #0
 800cb56:	e7f7      	b.n	800cb48 <__swsetup_r+0x98>
 800cb58:	20000068 	.word	0x20000068

0800cb5c <_raise_r>:
 800cb5c:	291f      	cmp	r1, #31
 800cb5e:	b538      	push	{r3, r4, r5, lr}
 800cb60:	4605      	mov	r5, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	d904      	bls.n	800cb70 <_raise_r+0x14>
 800cb66:	2316      	movs	r3, #22
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb72:	b112      	cbz	r2, 800cb7a <_raise_r+0x1e>
 800cb74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb78:	b94b      	cbnz	r3, 800cb8e <_raise_r+0x32>
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f830 	bl	800cbe0 <_getpid_r>
 800cb80:	4622      	mov	r2, r4
 800cb82:	4601      	mov	r1, r0
 800cb84:	4628      	mov	r0, r5
 800cb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb8a:	f000 b817 	b.w	800cbbc <_kill_r>
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d00a      	beq.n	800cba8 <_raise_r+0x4c>
 800cb92:	1c59      	adds	r1, r3, #1
 800cb94:	d103      	bne.n	800cb9e <_raise_r+0x42>
 800cb96:	2316      	movs	r3, #22
 800cb98:	6003      	str	r3, [r0, #0]
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	e7e7      	b.n	800cb6e <_raise_r+0x12>
 800cb9e:	2100      	movs	r1, #0
 800cba0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cba4:	4620      	mov	r0, r4
 800cba6:	4798      	blx	r3
 800cba8:	2000      	movs	r0, #0
 800cbaa:	e7e0      	b.n	800cb6e <_raise_r+0x12>

0800cbac <raise>:
 800cbac:	4b02      	ldr	r3, [pc, #8]	@ (800cbb8 <raise+0xc>)
 800cbae:	4601      	mov	r1, r0
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	f7ff bfd3 	b.w	800cb5c <_raise_r>
 800cbb6:	bf00      	nop
 800cbb8:	20000068 	.word	0x20000068

0800cbbc <_kill_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d07      	ldr	r5, [pc, #28]	@ (800cbdc <_kill_r+0x20>)
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f7f5 f89d 	bl	8001d08 <_kill>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d102      	bne.n	800cbd8 <_kill_r+0x1c>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	b103      	cbz	r3, 800cbd8 <_kill_r+0x1c>
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000978 	.word	0x20000978

0800cbe0 <_getpid_r>:
 800cbe0:	f7f5 b88a 	b.w	8001cf8 <_getpid>

0800cbe4 <__swhatbuf_r>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	2900      	cmp	r1, #0
 800cbee:	b096      	sub	sp, #88	@ 0x58
 800cbf0:	4615      	mov	r5, r2
 800cbf2:	461e      	mov	r6, r3
 800cbf4:	da0d      	bge.n	800cc12 <__swhatbuf_r+0x2e>
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbfc:	f04f 0100 	mov.w	r1, #0
 800cc00:	bf14      	ite	ne
 800cc02:	2340      	movne	r3, #64	@ 0x40
 800cc04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc08:	2000      	movs	r0, #0
 800cc0a:	6031      	str	r1, [r6, #0]
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	b016      	add	sp, #88	@ 0x58
 800cc10:	bd70      	pop	{r4, r5, r6, pc}
 800cc12:	466a      	mov	r2, sp
 800cc14:	f000 f848 	bl	800cca8 <_fstat_r>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	dbec      	blt.n	800cbf6 <__swhatbuf_r+0x12>
 800cc1c:	9901      	ldr	r1, [sp, #4]
 800cc1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc26:	4259      	negs	r1, r3
 800cc28:	4159      	adcs	r1, r3
 800cc2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc2e:	e7eb      	b.n	800cc08 <__swhatbuf_r+0x24>

0800cc30 <__smakebuf_r>:
 800cc30:	898b      	ldrh	r3, [r1, #12]
 800cc32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc34:	079d      	lsls	r5, r3, #30
 800cc36:	4606      	mov	r6, r0
 800cc38:	460c      	mov	r4, r1
 800cc3a:	d507      	bpl.n	800cc4c <__smakebuf_r+0x1c>
 800cc3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	6123      	str	r3, [r4, #16]
 800cc44:	2301      	movs	r3, #1
 800cc46:	6163      	str	r3, [r4, #20]
 800cc48:	b003      	add	sp, #12
 800cc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4c:	ab01      	add	r3, sp, #4
 800cc4e:	466a      	mov	r2, sp
 800cc50:	f7ff ffc8 	bl	800cbe4 <__swhatbuf_r>
 800cc54:	9f00      	ldr	r7, [sp, #0]
 800cc56:	4605      	mov	r5, r0
 800cc58:	4639      	mov	r1, r7
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f7fd fbe0 	bl	800a420 <_malloc_r>
 800cc60:	b948      	cbnz	r0, 800cc76 <__smakebuf_r+0x46>
 800cc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc66:	059a      	lsls	r2, r3, #22
 800cc68:	d4ee      	bmi.n	800cc48 <__smakebuf_r+0x18>
 800cc6a:	f023 0303 	bic.w	r3, r3, #3
 800cc6e:	f043 0302 	orr.w	r3, r3, #2
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	e7e2      	b.n	800cc3c <__smakebuf_r+0xc>
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	6020      	str	r0, [r4, #0]
 800cc7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc86:	b15b      	cbz	r3, 800cca0 <__smakebuf_r+0x70>
 800cc88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f000 f81d 	bl	800cccc <_isatty_r>
 800cc92:	b128      	cbz	r0, 800cca0 <__smakebuf_r+0x70>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	f043 0301 	orr.w	r3, r3, #1
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	431d      	orrs	r5, r3
 800cca4:	81a5      	strh	r5, [r4, #12]
 800cca6:	e7cf      	b.n	800cc48 <__smakebuf_r+0x18>

0800cca8 <_fstat_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	@ (800ccc8 <_fstat_r+0x20>)
 800ccac:	2300      	movs	r3, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f5 f887 	bl	8001dc8 <_fstat>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_fstat_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_fstat_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20000978 	.word	0x20000978

0800cccc <_isatty_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d06      	ldr	r5, [pc, #24]	@ (800cce8 <_isatty_r+0x1c>)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f5 f886 	bl	8001de8 <_isatty>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_isatty_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_isatty_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	20000978 	.word	0x20000978

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
